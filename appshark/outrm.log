<android.accounts.Account: boolean equals(java.lang.Object)>
<android.accounts.Account: int hashCode()>
<android.accounts.Account: java.lang.String getAccessId()>
<android.accounts.Account: java.lang.String toSafeString()>
<android.accounts.Account: void <init>(android.accounts.Account,java.lang.String)>
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>
<android.accounts.Account: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: void invalidateLocalAccountUserDataCaches()>
<android.accounts.AccountManager: void invalidateLocalAccountsDataCaches()>
<android.accounts.IAccountManager$Stub: int getCallingUid()>
<android.accounts.IAccountManager$Stub: long clearCallingIdentity()>
<android.accounts.IAccountManager$Stub: void restoreCallingIdentity(long)>
<android.app.ActivityManager: android.app.IActivityManager getService()>
<android.app.ActivityManager: boolean isRunningInTestHarness()>
<android.app.ActivityManager: int getCurrentUser()>
<android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>
<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>
<android.app.AppOpsManager: int permissionToOpCode(java.lang.String)>
<android.app.IActivityManager: boolean switchUser(int)>
<android.app.IActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>
<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>
<android.app.NotificationManager: android.app.INotificationManager getService()>
<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>
<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String,java.lang.String,java.lang.String[])>
<android.app.admin.DevicePolicyEventLogger: void write()>
<android.app.admin.DevicePolicyManagerInternal: boolean isActiveDeviceOwner(int)>
<android.app.admin.DevicePolicyManagerInternal: boolean isActiveProfileOwner(int)>
<android.app.compat.CompatChanges: boolean isChangeEnabled(long,int)>
<android.content.ContentValues: void <init>()>
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>
<android.content.ContentValues: void put(java.lang.String,java.lang.String)>
<android.content.Context: java.lang.String getPackageName()>
<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent setFlags(int)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.content.Intent: java.lang.String getAction()>
<android.content.Intent: void <init>(java.lang.String)>
<android.content.pm.IPackageManager: int checkPermission(java.lang.String,java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>
<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>
<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>
<android.content.pm.PackageManager: java.util.List getInstalledPackagesAsUser(int,int)>
<android.content.pm.PackageManager: java.util.List queryBroadcastReceiversAsUser(android.content.Intent,int,int)>
<android.content.pm.PackageManagerInternal: boolean filterAppAccess(java.lang.String,int,int)>
<android.content.pm.PackageManagerInternal: boolean hasSignatureCapability(int,int,int)>
<android.content.pm.PackageManagerInternal: int getPackageUid(java.lang.String,long,int)>
<android.content.pm.UserInfo: boolean canHaveProfile()>
<android.content.pm.UserInfo: boolean isRestricted()>
<android.database.Cursor: boolean moveToNext()>
<android.database.Cursor: int getCount()>
<android.database.Cursor: int getInt(int)>
<android.database.Cursor: java.lang.String getString(int)>
<android.database.Cursor: long getLong(int)>
<android.database.Cursor: void close()>
<android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: void beginTransaction()>
<android.database.sqlite.SQLiteDatabase: void endTransaction()>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.database.sqlite.SQLiteOpenHelper: void close()>
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>
<android.database.sqlite.SQLiteProgram: void clearBindings()>
<android.database.sqlite.SQLiteStatement: void execute()>
<android.os.Binder: int getCallingPid()>
<android.os.Binder: int getCallingUid()>
<android.os.Binder: long clearCallingIdentity()>
<android.os.Binder: void restoreCallingIdentity(long)>
<android.os.Bundle: android.os.Bundle setDefusable(android.os.Bundle,boolean)>
<android.os.Bundle: java.lang.String getString(java.lang.String)>
<android.os.Bundle: java.util.Set keySet()>
<android.os.Environment: java.io.File getDataSystemCeDirectory(int)>
<android.os.Environment: java.io.File getDataSystemDeDirectory(int)>
<android.os.Environment: java.io.File getDataSystemDirectory()>
<android.os.Environment: java.io.File getUserSystemDirectory(int)>
<android.os.FileUtils: void copyFileOrThrow(java.io.File,java.io.File)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>
<android.os.Handler: boolean post(java.lang.Runnable)>
<android.os.Handler: boolean sendMessage(android.os.Message)>
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()>
<android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>
<android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>
<android.os.UserHandle: boolean isSameApp(int,int)>
<android.os.UserHandle: int getAppId(int)>
<android.os.UserHandle: int getCallingUserId()>
<android.os.UserHandle: int getIdentifier()>
<android.os.UserHandle: int getUserId(int)>
<android.os.UserHandle: void <init>(int)>
<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>
<android.os.UserManager: android.os.UserManager get(android.content.Context)>
<android.os.UserManager: boolean removeUserEvenWhenDisallowed(int)>
<android.os.UserManager: java.util.List getAliveUsers()>
<android.os.UserManager: java.util.List getUsers()>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.String emptyIfNull(java.lang.String)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
<android.util.Log: boolean isLoggable(java.lang.String,int)>
<android.util.Log: int d(java.lang.String,java.lang.String)>
<android.util.Log: int e(java.lang.String,java.lang.String)>
<android.util.Log: int i(java.lang.String,java.lang.String)>
<android.util.Log: int v(java.lang.String,java.lang.String)>
<android.util.Log: int w(java.lang.String,java.lang.String)>
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.LruCache: java.lang.Object remove(java.lang.Object)>
<android.util.LruCache: void <init>(int)>
<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>
<android.util.Slog: int e(java.lang.String,java.lang.String)>
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Slog: int i(java.lang.String,java.lang.String)>
<android.util.Slog: int w(java.lang.String,java.lang.String)>
<android.util.Slog: int wtf(java.lang.String,java.lang.String)>
<android.util.SparseArray: java.lang.Object get(int)>
<android.util.SparseArray: void append(int,java.lang.Object)>
<android.util.SparseBooleanArray: boolean get(int)>
<android.util.SparseBooleanArray: void <init>(int)>
<android.util.SparseBooleanArray: void put(int,boolean)>
<com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>
<com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>
<com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>
<com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>
<com.android.server.accounts.AccountManagerService$$ExternalSyntheticLambda2: void <init>(com.android.server.accounts.AccountManagerService,android.accounts.Account,int)>
<com.android.server.accounts.AccountManagerService$$ExternalSyntheticLambda2: void run()>
<com.android.server.accounts.AccountManagerService$1LogRecordTask: void <init>(com.android.server.accounts.AccountManagerService,java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int,long)>
<com.android.server.accounts.AccountManagerService$1LogRecordTask: void run()>
<com.android.server.accounts.AccountManagerService$Injector: android.app.INotificationManager getNotificationManager()>
<com.android.server.accounts.AccountManagerService$Injector: java.lang.String getCeDatabaseName(int)>
<com.android.server.accounts.AccountManagerService$Injector: java.lang.String getDeDatabaseName(int)>
<com.android.server.accounts.AccountManagerService$Injector: java.lang.String getPreNDatabaseName(int)>
<com.android.server.accounts.AccountManagerService$NotificationId: int '-$$Nest$fgetmId'(com.android.server.accounts.AccountManagerService$NotificationId)>
<com.android.server.accounts.AccountManagerService$NotificationId: void <init>(java.lang.String,int)>
<com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.TokenCache '-$$Nest$fgetaccountTokenCaches'(com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService$UserAccounts: int '-$$Nest$fgetuserId'(com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap '-$$Nest$fgetcredentialsPermissionNotificationIds'(com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap '-$$Nest$fgetpreviousNameCache'(com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map '-$$Nest$fgetauthTokenCache'(com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map '-$$Nest$fgetmReceiversForType'(com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map '-$$Nest$fgetuserDataCache'(com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService$UserAccounts: java.util.Map '-$$Nest$fgetvisibilityCache'(com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService$UserAccounts: void <init>(android.content.Context,int,java.io.File,java.io.File)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account insertAccountIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>
<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>
<com.android.server.accounts.AccountManagerService: android.util.SparseBooleanArray getUidsOfInstalledOrUpdatedPackagesAsUser(int)>
<com.android.server.accounts.AccountManagerService: boolean accountTypeManagesContacts(java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map,java.lang.String)>
<com.android.server.accounts.AccountManagerService: boolean addAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,android.os.Bundle,int,java.util.Map,java.lang.String)>
<com.android.server.accounts.AccountManagerService: boolean addSharedAccountAsUser(android.accounts.Account,int)>
<com.android.server.accounts.AccountManagerService: boolean canCallerAccessPackage(java.lang.String,int,int)>
<com.android.server.accounts.AccountManagerService: boolean canHaveProfile(int)>
<com.android.server.accounts.AccountManagerService: boolean checkGetAccountsPermission(java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: boolean checkReadContactsPermission(java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
<com.android.server.accounts.AccountManagerService: boolean hasAccountAccess(android.accounts.Account,java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: boolean hasExplicitlyGrantedPermission(android.accounts.Account,java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: boolean isAccountManagedByCaller(java.lang.String,int,int)>
<com.android.server.accounts.AccountManagerService: boolean isLocalUnlockedUser(int)>
<com.android.server.accounts.AccountManagerService: boolean isPermittedForPackage(java.lang.String,int,java.lang.String[])>
<com.android.server.accounts.AccountManagerService: boolean isPreOApplication(java.lang.String)>
<com.android.server.accounts.AccountManagerService: boolean isPrivileged(int)>
<com.android.server.accounts.AccountManagerService: boolean isProfileOwner(int)>
<com.android.server.accounts.AccountManagerService: boolean isSpecialPackageKey(java.lang.String)>
<com.android.server.accounts.AccountManagerService: boolean isVisible(int)>
<com.android.server.accounts.AccountManagerService: boolean permissionIsGranted(android.accounts.Account,java.lang.String,int,int)>
<com.android.server.accounts.AccountManagerService: boolean removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,int)>
<com.android.server.accounts.AccountManagerService: boolean removeSharedAccountAsUser(android.accounts.Account,int,int)>
<com.android.server.accounts.AccountManagerService: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int,boolean,com.android.server.accounts.AccountManagerService$UserAccounts,int)>
<com.android.server.accounts.AccountManagerService: boolean shouldNotifyPackageOnAccountRemoval(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: boolean updateAccountVisibilityLocked(android.accounts.Account,java.lang.String,int,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsNotChecked(int)>
<com.android.server.accounts.AccountManagerService: int checkPackageSignature(java.lang.String,int,int)>
<com.android.server.accounts.AccountManagerService: int getAccountVisibilityFromCache(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: int handleIncomingUser(int)>
<com.android.server.accounts.AccountManagerService: java.lang.Integer resolveAccountVisibility(android.accounts.Account,java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: java.lang.String getPackageNameForUid(int)>
<com.android.server.accounts.AccountManagerService: java.lang.String getPackagesForVisibilityStr(int,java.util.Map)>
<com.android.server.accounts.AccountManagerService: java.lang.String[] findPackagesPerVisibility(java.util.Map)>
<com.android.server.accounts.AccountManagerService: java.text.SimpleDateFormat '-$$Nest$fgetmDateFormat'(com.android.server.accounts.AccountManagerService)>
<com.android.server.accounts.AccountManagerService: java.util.HashMap getAuthenticatorTypeAndUIDForUser(com.android.server.accounts.IAccountAuthenticatorCache,int)>
<com.android.server.accounts.AccountManagerService: java.util.List getAccountRemovedReceivers(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: java.util.List getTypesForCaller(int,int,boolean)>
<com.android.server.accounts.AccountManagerService: java.util.List getTypesManagedByCaller(int,int)>
<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: java.util.Map getRequestingPackages(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: void $r8$lambda$MDxK-qC6nJa1Z9d1qgf3atXEJCE(com.android.server.accounts.AccountManagerService,android.accounts.Account,int)>
<com.android.server.accounts.AccountManagerService: void addAccountToLinkedRestrictedUsers(android.accounts.Account,int)>
<com.android.server.accounts.AccountManagerService: void cancelAccountAccessRequestNotificationIfNeeded(android.accounts.Account,int,boolean)>
<com.android.server.accounts.AccountManagerService: void cancelAccountAccessRequestNotificationIfNeeded(android.accounts.Account,int,java.lang.String,boolean)>
<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,android.os.UserHandle)>
<com.android.server.accounts.AccountManagerService: void cancelNotification(com.android.server.accounts.AccountManagerService$NotificationId,java.lang.String,android.os.UserHandle)>
<com.android.server.accounts.AccountManagerService: void lambda$removeAccountInternal$2(android.accounts.Account,int)>
<com.android.server.accounts.AccountManagerService: void logAddAccountExplicitlyMetrics(java.lang.String,java.lang.String,java.util.Map)>
<com.android.server.accounts.AccountManagerService: void logRecord(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,java.lang.String)>
<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: void logRecord(java.lang.String,java.lang.String,long,com.android.server.accounts.AccountManagerService$UserAccounts,int)>
<com.android.server.accounts.AccountManagerService: void notifyPackage(java.lang.String,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: void purgeOldGrants(com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: void removeAccountFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>
<com.android.server.accounts.AccountManagerService: void sendAccountRemovedBroadcast(android.accounts.Account,java.lang.String,int,java.lang.String)>
<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int,java.lang.String,java.lang.String)>
<com.android.server.accounts.AccountManagerService: void sendNotificationAccountUpdated(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: void syncDeCeAccountsLocked(com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>
<com.android.server.accounts.AccountsDb$CeDatabaseHelper: boolean migratePreNDbToCe(java.io.File,java.io.File)>
<com.android.server.accounts.AccountsDb$CeDatabaseHelper: com.android.server.accounts.AccountsDb$CeDatabaseHelper create(android.content.Context,java.io.File,java.io.File)>
<com.android.server.accounts.AccountsDb$CeDatabaseHelper: void <init>(android.content.Context,java.lang.String)>
<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabaseUserIsUnlocked()>
<com.android.server.accounts.AccountsDb$DeDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabaseUserIsUnlocked()>
<com.android.server.accounts.AccountsDb$DeDatabaseHelper: boolean '-$$Nest$fgetmCeAttached'(com.android.server.accounts.AccountsDb$DeDatabaseHelper)>
<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void '-$$Nest$fputmCeAttached'(com.android.server.accounts.AccountsDb$DeDatabaseHelper,boolean)>
<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void '-$$Nest$mmigratePreNDbToDe'(com.android.server.accounts.AccountsDb$DeDatabaseHelper,java.io.File)>
<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void <init>(android.content.Context,int,java.lang.String)>
<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void <init>(android.content.Context,int,java.lang.String,com.android.server.accounts.AccountsDb$DeDatabaseHelper-IA)>
<com.android.server.accounts.AccountsDb$DeDatabaseHelper: void migratePreNDbToDe(java.io.File)>
<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: void <init>(android.content.Context,int,java.lang.String)>
<com.android.server.accounts.AccountsDb: android.database.sqlite.SQLiteStatement compileSqlStatementForLogging()>
<com.android.server.accounts.AccountsDb: android.database.sqlite.SQLiteStatement getStatementForLogging()>
<com.android.server.accounts.AccountsDb: boolean deleteCeAccount(long)>
<com.android.server.accounts.AccountsDb: boolean deleteDeAccount(long)>
<com.android.server.accounts.AccountsDb: boolean deleteGrantsByUid(int)>
<com.android.server.accounts.AccountsDb: boolean deleteMetaByAuthTypeAndUid(java.lang.String,int)>
<com.android.server.accounts.AccountsDb: boolean deleteSharedAccount(android.accounts.Account)>
<com.android.server.accounts.AccountsDb: boolean isCeDatabaseAttached()>
<com.android.server.accounts.AccountsDb: boolean setAccountVisibility(long,java.lang.String,int)>
<com.android.server.accounts.AccountsDb: com.android.server.accounts.AccountsDb create(android.content.Context,int,java.io.File,java.io.File)>
<com.android.server.accounts.AccountsDb: java.lang.String '-$$Nest$sfgetDEBUG_TABLE_ACTION_TYPE'()>
<com.android.server.accounts.AccountsDb: java.lang.String '-$$Nest$sfgetDEBUG_TABLE_CALLER_UID'()>
<com.android.server.accounts.AccountsDb: java.lang.String '-$$Nest$sfgetDEBUG_TABLE_KEY'()>
<com.android.server.accounts.AccountsDb: java.lang.String '-$$Nest$sfgetDEBUG_TABLE_TABLE_NAME'()>
<com.android.server.accounts.AccountsDb: java.lang.String '-$$Nest$sfgetDEBUG_TABLE_TIMESTAMP'()>
<com.android.server.accounts.AccountsDb: java.lang.String '-$$Nest$sfgetTABLE_DEBUG'()>
<com.android.server.accounts.AccountsDb: java.util.List findAllUidGrants()>
<com.android.server.accounts.AccountsDb: java.util.List findCeAccountsNotInDe()>
<com.android.server.accounts.AccountsDb: java.util.Map findAllDeAccounts()>
<com.android.server.accounts.AccountsDb: java.util.Map findAllVisibilityValues()>
<com.android.server.accounts.AccountsDb: java.util.Map findMetaAuthUid()>
<com.android.server.accounts.AccountsDb: long calculateDebugTableInsertionPoint()>
<com.android.server.accounts.AccountsDb: long findCeAccountId(android.accounts.Account)>
<com.android.server.accounts.AccountsDb: long findDeAccountId(android.accounts.Account)>
<com.android.server.accounts.AccountsDb: long findMatchingGrantsCount(int,java.lang.String,android.accounts.Account)>
<com.android.server.accounts.AccountsDb: long findMatchingGrantsCountAnyToken(int,android.accounts.Account)>
<com.android.server.accounts.AccountsDb: long findSharedAccountId(android.accounts.Account)>
<com.android.server.accounts.AccountsDb: long insertCeAccount(android.accounts.Account,java.lang.String)>
<com.android.server.accounts.AccountsDb: long insertDeAccount(android.accounts.Account,long)>
<com.android.server.accounts.AccountsDb: long insertExtra(long,java.lang.String,java.lang.String)>
<com.android.server.accounts.AccountsDb: long insertOrReplaceMetaAuthTypeAndUid(java.lang.String,int)>
<com.android.server.accounts.AccountsDb: long insertSharedAccount(android.accounts.Account)>
<com.android.server.accounts.AccountsDb: long reserveDebugDbInsertionPoint()>
<com.android.server.accounts.AccountsDb: void <clinit>()>
<com.android.server.accounts.AccountsDb: void <init>(com.android.server.accounts.AccountsDb$DeDatabaseHelper,android.content.Context,java.io.File)>
<com.android.server.accounts.AccountsDb: void attachCeDatabase(java.io.File)>
<com.android.server.accounts.AccountsDb: void beginTransaction()>
<com.android.server.accounts.AccountsDb: void deleteDbFileWarnIfFailed(java.io.File)>
<com.android.server.accounts.AccountsDb: void endTransaction()>
<com.android.server.accounts.AccountsDb: void setTransactionSuccessful()>
<com.android.server.accounts.IAccountAuthenticatorCache: java.util.Collection getAllServices(int)>
<com.android.server.accounts.IAccountAuthenticatorCache: void invalidateCache(int)>
<com.android.server.accounts.TokenCache$TokenLruCache$Evictor: void evict()>
<com.android.server.accounts.TokenCache$TokenLruCache: void <init>()>
<com.android.server.accounts.TokenCache$TokenLruCache: void evict(android.accounts.Account)>
<com.android.server.accounts.TokenCache: void <init>()>
<com.android.server.accounts.TokenCache: void remove(android.accounts.Account)>
<com.google.android.collect.Sets: java.util.HashSet newHashSet()>
<java.io.File: boolean exists()>
<java.io.File: boolean mkdirs()>
<java.io.File: boolean renameTo(java.io.File)>
<java.io.File: java.lang.String getPath()>
<java.io.File: void <init>(java.io.File,java.lang.String)>
<java.io.File: void <init>(java.lang.String)>
<java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.Integer: int intValue()>
<java.lang.Integer: int parseInt(java.lang.String)>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.Integer: java.lang.String toString(int)>
<java.lang.Long: java.lang.Long valueOf(long)>
<java.lang.Long: long longValue()>
<java.lang.Object: void <init>()>
<java.lang.SecurityException: void <init>(java.lang.String)>
<java.lang.String: boolean equals(java.lang.Object)>
<java.lang.String: int hashCode()>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.lang.String: java.lang.String valueOf(int)>
<java.lang.String: java.lang.String valueOf(long)>
<java.lang.StringBuilder: java.lang.String toString()>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.lang.StringBuilder: void <init>()>
<java.lang.System: long currentTimeMillis()>
<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
<java.lang.Thread: boolean holdsLock(java.lang.Object)>
<java.lang.Throwable: java.lang.String getMessage()>
<java.lang.Throwable: void <init>()>
<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
<java.text.DateFormat: java.lang.String format(java.util.Date)>
<java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.ArrayList: boolean isEmpty()>
<java.util.ArrayList: int size()>
<java.util.ArrayList: java.lang.Object get(int)>
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.ArrayList: void <init>()>
<java.util.ArrayList: void <init>(int)>
<java.util.Collection: java.util.Iterator iterator()>
<java.util.Collections: java.util.List emptyList()>
<java.util.Collections: java.util.Map emptyMap()>
<java.util.Date: void <init>()>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.HashMap: java.util.Set entrySet()>
<java.util.HashMap: java.util.Set keySet()>
<java.util.HashMap: void <init>()>
<java.util.HashMap: void clear()>
<java.util.HashSet: boolean add(java.lang.Object)>
<java.util.HashSet: boolean contains(java.lang.Object)>
<java.util.HashSet: void <init>()>
<java.util.Iterator: boolean hasNext()>
<java.util.Iterator: java.lang.Object next()>
<java.util.LinkedHashMap: void <init>()>
<java.util.List: boolean add(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean isEmpty()>
<java.util.List: int size()>
<java.util.List: java.util.Iterator iterator()>
<java.util.Map$Entry: java.lang.Object getKey()>
<java.util.Map$Entry: java.lang.Object getValue()>
<java.util.Map: boolean containsKey(java.lang.Object)>
<java.util.Map: int size()>
<java.util.Map: java.lang.Object get(java.lang.Object)>
<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Map: java.lang.Object remove(java.lang.Object)>
<java.util.Map: java.util.Set entrySet()>
<java.util.Map: java.util.Set keySet()>
<java.util.Map: void putAll(java.util.Map)>
<java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>
<java.util.Set: boolean add(java.lang.Object)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: java.util.Iterator iterator()>
<java.util.UUID: java.lang.String toString()>
<java.util.UUID: java.util.UUID randomUUID()>

