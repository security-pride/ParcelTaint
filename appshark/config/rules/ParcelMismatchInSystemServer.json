{
  "ParcelMismatchInSystemServer": {
    "enable": true,
    "DirectMode": true,
    "traceDepth": 16,
    "PreciseTaint": false,
    "desc": {
      "name": "ParcelMismatch",
      "category": "ParcelMismatch",
      "detail": "ParcelMismatch in System Server",
      "wiki": "",
      "possibility": "2",
      "model": "high"
    },
    "entry": {
      "methods": [      "<android.os.Handler$MessengerImpl: void send(android.os.Message)>",
      "<com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>",
      "<com.android.server.compat.PlatformCompat: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>",
      "<com.android.server.compat.PlatformCompat: void reportChange(long,android.content.pm.ApplicationInfo)>",
      "<com.android.server.wm.Session: android.os.IBinder performDrag(android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData)>",
      "<com.android.server.wm.Session: int relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,int,int,android.window.ClientWindowFrames,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl$Array,android.os.Bundle)>",
      "<com.android.server.wm.Session: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)>",
      "<com.android.server.wm.Session: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>",
      "<android.app.ActivityThread$ApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)>",
      "<android.app.ActivityThread$ApplicationThread: void instrumentWithoutRestart(android.content.ComponentName,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,android.content.pm.ApplicationInfo)>",
      "<android.app.ActivityThread$ApplicationThread: void notifyContentProviderPublishStatus(android.app.ContentProviderHolder,java.lang.String,int,boolean)>",
      "<android.app.ActivityThread$ApplicationThread: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,android.os.RemoteCallback,android.os.RemoteCallback)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleApplicationInfoChanged(android.content.pm.ApplicationInfo)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean,int,long)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleCrash(java.lang.String,int,android.os.Bundle)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,int,int,int)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo,int)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo,int)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleInstallProvider(android.content.pm.ProviderInfo)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleOnNewActivityOptions(android.os.IBinder,android.os.Bundle)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,boolean,int,int,int,java.lang.String)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean,int,int,int,java.lang.String)>",
      "<android.app.ActivityThread$ApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>",
      "<android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)>",
      "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setAuthenticationResult(android.os.Bundle,int,int,int)>",
      "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setUserData(android.service.autofill.UserData)>",
      "<android.view.autofill.AutofillManager$AutofillManagerClient: void authenticate(int,int,android.content.IntentSender,android.content.Intent,boolean)>",
      "<android.view.autofill.AutofillManager$AutofillManagerClient: void autofillContent(int,android.view.autofill.AutofillId,android.content.ClipData)>",
      "<android.view.autofill.AutofillManager$AutofillManagerClient: void startIntentSender(android.content.IntentSender,android.content.Intent)>",
      "<com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>",
      "<com.android.server.content.ContentService: void cancelRequest(android.content.SyncRequest)>",
      "<com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>",
      "<com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>",
      "<com.android.server.content.ContentService: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>",
      "<com.android.server.content.ContentService: void sync(android.content.SyncRequest,java.lang.String)>",
      "<com.android.server.content.ContentService: void syncAsUser(android.content.SyncRequest,int,java.lang.String)>",
      "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startAbortVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>",
      "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startCommand(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,java.lang.String,android.os.Bundle)>",
      "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startCompleteVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>",
      "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startConfirmation(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>",
      "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startPickOption(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>",
      "<com.android.server.media.MediaSessionRecord$ControllerStub: void playFromMediaId(java.lang.String,java.lang.String,android.os.Bundle)>",
      "<com.android.server.media.MediaSessionRecord$ControllerStub: void playFromSearch(java.lang.String,java.lang.String,android.os.Bundle)>",
      "<com.android.server.media.MediaSessionRecord$ControllerStub: void playFromUri(java.lang.String,android.net.Uri,android.os.Bundle)>",
      "<com.android.server.media.MediaSessionRecord$ControllerStub: void prepareFromMediaId(java.lang.String,java.lang.String,android.os.Bundle)>",
      "<com.android.server.media.MediaSessionRecord$ControllerStub: void prepareFromSearch(java.lang.String,java.lang.String,android.os.Bundle)>",
      "<com.android.server.media.MediaSessionRecord$ControllerStub: void prepareFromUri(java.lang.String,android.net.Uri,android.os.Bundle)>",
      "<com.android.server.media.MediaSessionRecord$ControllerStub: void sendCommand(java.lang.String,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>",
      "<com.android.server.media.MediaSessionRecord$ControllerStub: void sendCustomAction(java.lang.String,java.lang.String,android.os.Bundle)>",
      "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[],android.os.Bundle)>",
      "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)>",
      "<com.android.server.audio.AudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>",
      "<com.android.server.audio.AudioService: int abandonAudioFocusForTest(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>",
      "<com.android.server.audio.AudioService: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>",
      "<com.android.server.audio.AudioService: void addOnDevicesForAttributesChangedListener(android.media.AudioAttributes,android.media.IDevicesForAttributesCallback)>",
      "<com.android.server.audio.AudioService: boolean canBeSpatialized(android.media.AudioAttributes,android.media.AudioFormat)>",
      "<com.android.server.audio.AudioService: int clearPreferredMixerAttributes(android.media.AudioAttributes,int)>",
      "<com.android.server.audio.AudioService: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>",
      "<com.android.server.audio.AudioService: android.media.VolumeInfo getDeviceVolume(android.media.VolumeInfo,android.media.AudioDeviceAttributes,java.lang.String)>",
      "<com.android.server.audio.AudioService: java.util.List getDevicesForAttributes(android.media.AudioAttributes)>",
      "<com.android.server.audio.AudioService: java.util.List getDevicesForAttributesUnprotected(android.media.AudioAttributes)>",
      "<com.android.server.audio.AudioService: long getFadeOutDurationOnFocusLossMillis(android.media.AudioAttributes)>",
      "<com.android.server.audio.AudioService: int getFocusRampTimeMs(int,android.media.AudioAttributes)>",
      "<com.android.server.audio.AudioService: void playerAttributes(int,android.media.AudioAttributes)>",
      "<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>",
      "<com.android.server.audio.AudioService: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>",
      "<com.android.server.audio.AudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>",
      "<com.android.server.audio.AudioService: int requestAudioFocusForTest(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,int)>",
      "<com.android.server.audio.AudioService: boolean sendFocusLoss(android.media.AudioFocusInfo,android.media.audiopolicy.IAudioPolicyCallback)>",
      "<com.android.server.audio.AudioService: void setDeviceVolume(android.media.VolumeInfo,android.media.AudioDeviceAttributes,java.lang.String)>",
      "<com.android.server.audio.AudioService: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>",
      "<com.android.server.audio.AudioService: int setPreferredMixerAttributes(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>",
      "<com.android.server.audio.AudioService: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>",
      "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void startInput(com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,android.view.inputmethod.EditorInfo,boolean)>",
      "<android.app.VoiceInteractor$2: void deliverAbortVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>",
      "<android.app.VoiceInteractor$2: void deliverCommandResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>",
      "<android.app.VoiceInteractor$2: void deliverCompleteVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>",
      "<android.app.VoiceInteractor$2: void deliverConfirmationResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>",
      "<android.app.VoiceInteractor$2: void deliverPickOptionResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>",
      "<com.android.server.am.ActivityManagerService: void addInstrumentationResults(android.app.IApplicationThread,android.os.Bundle)>",
      "<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,long,java.lang.String,int)>",
      "<com.android.server.am.ActivityManagerService: int bindServiceInstance(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,long,java.lang.String,java.lang.String,int)>",
      "<com.android.server.am.ActivityManagerService: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>",
      "<com.android.server.am.ActivityManagerService: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],java.lang.String[],java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>",
      "<com.android.server.am.ActivityManagerService: void crashApplicationWithTypeWithExtras(int,int,java.lang.String,int,java.lang.String,boolean,int,android.os.Bundle)>",
      "<com.android.server.am.ActivityManagerService: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>",
      "<com.android.server.am.ActivityManagerService: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>",
      "<com.android.server.am.ActivityManagerService: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>",
      "<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>",
      "<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>",
      "<com.android.server.am.ActivityManagerService: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>",
      "<com.android.server.am.ActivityManagerService: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>",
      "<com.android.server.am.ActivityManagerService: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>",
      "<com.android.server.am.ActivityManagerService: int sendIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>",
      "<com.android.server.am.ActivityManagerService: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>",
      "<com.android.server.am.ActivityManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>",
      "<com.android.server.am.ActivityManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>",
      "<com.android.server.am.ActivityManagerService: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>",
      "<com.android.server.am.ActivityManagerService: int startActivityFromRecents(int,android.os.Bundle)>",
      "<com.android.server.am.ActivityManagerService: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>",
      "<com.android.server.am.ActivityManagerService: void startConfirmDeviceCredentialIntent(android.content.Intent,android.os.Bundle)>",
      "<com.android.server.am.ActivityManagerService: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>",
      "<com.android.server.am.ActivityManagerService: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>",
      "<com.android.server.am.ActivityManagerService: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>",
      "<com.android.server.am.ActivityManagerService: void unbindBackupAgent(android.content.pm.ApplicationInfo)>",
      "<com.android.server.am.ActivityManagerService: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>",
      "<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>",
      "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>",
      "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setUiHints(android.os.Bundle)>",
      "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void showSession(android.os.Bundle,int,java.lang.String)>",
      "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean showSessionForActiveService(android.os.Bundle,int,java.lang.String,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>",
      "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int,java.lang.String)>",
      "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String,android.os.Bundle)>",
      "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>",
      "<android.media.session.MediaController$CallbackStub: void onEvent(java.lang.String,android.os.Bundle)>",
      "<android.media.session.MediaController$CallbackStub: void onExtrasChanged(android.os.Bundle)>",
      "<android.media.session.MediaController$CallbackStub: void onMetadataChanged(android.media.MediaMetadata)>",
      "<android.media.session.MediaController$CallbackStub: void onPlaybackStateChanged(android.media.session.PlaybackState)>",
      "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusAbandon(android.media.AudioFocusInfo)>",
      "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusGrant(android.media.AudioFocusInfo,int)>",
      "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusLoss(android.media.AudioFocusInfo,boolean)>",
      "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusRequest(android.media.AudioFocusInfo,int)>",
      "<android.media.AudioManager$IDevicesForAttributesCallbackStub: void onDevicesForAttributesChanged(android.media.AudioAttributes,boolean,java.util.List)>",
      "<android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub: void dispatchDeviceVolumeAdjusted(android.media.AudioDeviceAttributes,android.media.VolumeInfo,int,int)>",
      "<android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub: void dispatchDeviceVolumeChanged(android.media.AudioDeviceAttributes,android.media.VolumeInfo)>",
      "<android.media.AudioManager$PreferredMixerAttributesDispatcherStub: void dispatchPrefMixerAttributesChanged(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>",
      "<android.inputmethodservice.IInputMethodSessionWrapper: void appPrivateCommand(java.lang.String,android.os.Bundle)>",
      "<android.inputmethodservice.IInputMethodSessionWrapper: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,int)>",
      "<com.android.server.inputmethod.InputMethodManagerService: com.android.internal.inputmethod.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.inputmethod.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int,int,android.window.ImeOnBackInvokedDispatcher)>",
      "<com.android.server.appop.AppOpsService: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>",
      "<android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int)>",
      "<com.android.server.am.ActivityManagerShellCommand$MyActivityController: boolean activityStarting(android.content.Intent,java.lang.String)>",
      "<com.android.server.wm.ActivityTaskManagerService: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>",
      "<com.android.server.wm.ActivityTaskManagerService: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>",
      "<com.android.server.wm.ActivityTaskManagerService: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>",
      "<com.android.server.wm.ActivityTaskManagerService: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>",
      "<com.android.server.wm.ActivityTaskManagerService: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>",
      "<com.android.server.wm.ActivityTaskManagerService: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>",
      "<com.android.server.wm.ActivityTaskManagerService: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>",
      "<com.android.server.wm.ActivityTaskManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>",
      "<com.android.server.wm.ActivityTaskManagerService: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>",
      "<com.android.server.wm.ActivityTaskManagerService: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,boolean,int)>",
      "<com.android.server.wm.ActivityTaskManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>",
      "<com.android.server.wm.ActivityTaskManagerService: int startActivityFromGameSession(android.app.IApplicationThread,java.lang.String,java.lang.String,int,int,android.content.Intent,int,int)>",
      "<com.android.server.wm.ActivityTaskManagerService: int startActivityFromRecents(int,android.os.Bundle)>",
      "<com.android.server.wm.ActivityTaskManagerService: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>",
      "<com.android.server.wm.ActivityTaskManagerService: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>",
      "<com.android.server.wm.ActivityTaskManagerService: int startAssistantActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.os.Bundle,int)>",
      "<com.android.server.wm.ActivityTaskManagerService: boolean startDreamActivity(android.content.Intent)>",
      "<com.android.server.wm.ActivityTaskManagerService: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>",
      "<com.android.server.wm.ActivityTaskManagerService: void startRecentsActivity(android.content.Intent,long,android.view.IRecentsAnimationRunner)>",
      "<com.android.server.wm.ActivityTaskManagerService: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>",
      "<com.android.server.wm.AppTaskImpl: int startActivity(android.os.IBinder,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.Bundle)>",
      "<com.android.server.pm.permission.PermissionManagerService: boolean addPermission(android.content.pm.PermissionInfo,boolean)>",
      "<com.android.server.search.SearchManagerService: void launchAssist(int,android.os.Bundle)>",
      "<android.service.voice.VoiceInteractionSession$2: void handleAssist(int,android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)>",
      "<android.service.voice.VoiceInteractionSession$2: void show(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback)>",
      "<android.service.voice.VoiceInteractionSession$2: void taskFinished(android.content.Intent,int)>",
      "<android.service.voice.VoiceInteractionSession$2: void taskStarted(android.content.Intent,int)>",
      "<com.android.server.voiceinteraction.VoiceInteractionManagerService$3: void onSetUiHints(android.os.Bundle)>",
      "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void setPrimaryClip(android.content.ClipData,java.lang.String,java.lang.String,int,int)>",
      "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void setPrimaryClipAsPackage(android.content.ClipData,java.lang.String,java.lang.String,int,int,java.lang.String)>",
      "<com.android.server.textservices.TextServicesManagerService: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int)>",
      "<com.android.server.media.MediaSessionRecord$SessionStub: void sendEvent(java.lang.String,android.os.Bundle)>",
      "<com.android.server.media.MediaSessionRecord$SessionStub: void setExtras(android.os.Bundle)>",
      "<com.android.server.media.MediaSessionRecord$SessionStub: void setMetadata(android.media.MediaMetadata,long,java.lang.String)>",
      "<com.android.server.media.MediaSessionRecord$SessionStub: void setPlaybackState(android.media.session.PlaybackState)>",
      "<com.android.server.media.MediaSessionRecord$SessionStub: void setPlaybackToLocal(android.media.AudioAttributes)>",
      "<com.android.server.media.MediaSessionService$SessionManagerImpl: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>",
      "<android.view.inputmethod.RemoteInputConnectionImpl: void commitContent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.InputContentInfo,int,android.os.Bundle,com.android.internal.infra.AndroidFuture)>",
      "<android.view.inputmethod.RemoteInputConnectionImpl: void performPrivateCommand(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.String,android.os.Bundle)>",
      "<com.android.server.wm.ActivityClientController: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>",
      "<com.android.server.wm.ActivityClientController: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>",
      "<com.android.server.wm.ActivityClientController: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>",
      "<com.android.server.wm.ActivityClientController: boolean navigateUpTo(android.os.IBinder,android.content.Intent,java.lang.String,int,android.content.Intent)>",
      "<com.android.server.wm.ActivityClientController: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>",
      "<com.android.server.wm.ActivityClientController: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>",
      "<android.app.PackageDeleteObserver$1: void onUserActionRequired(android.content.Intent)>",
      "<android.companion.virtual.VirtualDeviceInternal$IntentInterceptorDelegate: void onIntentIntercepted(android.content.Intent)>",
      "<android.media.session.MediaSession$CallbackStub: void onCommand(java.lang.String,int,int,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>",
      "<android.media.session.MediaSession$CallbackStub: void onCustomAction(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
      "<android.media.session.MediaSession$CallbackStub: void onMediaButton(java.lang.String,int,int,android.content.Intent,int,android.os.ResultReceiver)>",
      "<android.media.session.MediaSession$CallbackStub: void onMediaButtonFromController(java.lang.String,int,int,android.content.Intent)>",
      "<android.media.session.MediaSession$CallbackStub: void onPlayFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
      "<android.media.session.MediaSession$CallbackStub: void onPlayFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
      "<android.media.session.MediaSession$CallbackStub: void onPlayFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>",
      "<android.media.session.MediaSession$CallbackStub: void onPrepareFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
      "<android.media.session.MediaSession$CallbackStub: void onPrepareFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
      "<android.media.session.MediaSession$CallbackStub: void onPrepareFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>",
      "<com.android.server.pm.UserManagerService: void setApplicationRestrictions(java.lang.String,android.os.Bundle,int)>",
      "<com.android.server.pm.UserManagerService: void setDefaultGuestRestrictions(android.os.Bundle)>",
      "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>",
      "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int,boolean)>",
      "<com.android.server.wallpaper.WallpaperManagerService: void notifyGoingToSleep(int,int,android.os.Bundle)>",
      "<com.android.server.wallpaper.WallpaperManagerService: void notifyWakingUp(int,int,android.os.Bundle)>",
      "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>",
      "<com.android.server.notification.NotificationManagerService$11: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>",
      "<com.android.server.notification.NotificationManagerService$11: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>",
      "<com.android.server.notification.NotificationManagerService$11: void createConversationNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel,java.lang.String)>",
      "<com.android.server.notification.NotificationManagerService$11: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>",
      "<com.android.server.notification.NotificationManagerService$11: boolean matchesCallFilter(android.os.Bundle)>",
      "<com.android.server.notification.NotificationManagerService$11: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>",
      "<com.android.server.notification.NotificationManagerService$11: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>",
      "<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int,int,android.os.Bundle)>",
      "<com.android.server.wm.WindowManagerService: android.content.res.Configuration attachWindowContextToDisplayArea(android.os.IBinder,int,int,android.os.Bundle)>",
      "<com.android.server.wm.WindowManagerService: void lockNow(android.os.Bundle)>",
      "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onActionClicked(java.lang.String,android.app.Notification$Action,int)>",
      "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationChannelModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)>",
      "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationEnqueuedWithChannel(android.service.notification.IStatusBarNotificationHolder,android.app.NotificationChannel,android.service.notification.NotificationRankingUpdate)>",
      "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationFeedbackReceived(java.lang.String,android.service.notification.NotificationRankingUpdate,android.os.Bundle)>",
      "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDestroy(android.content.Intent)>",
      "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,long,int)>",
      "<com.android.server.devicepolicy.DevicePolicyManagerService: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>",
      "<com.android.server.devicepolicy.DevicePolicyManagerService: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>",
      "<com.android.server.devicepolicy.DevicePolicyManagerService: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>",
      "<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>",
      "<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,long)>",
      "<com.android.server.appwidget.AppWidgetServiceImpl: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>",
      "<com.android.server.appwidget.AppWidgetServiceImpl: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>",
      "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>",
      "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)>",
      "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>",
      "<android.appwidget.AppWidgetHost$Callbacks: void updateAppWidget(int,android.widget.RemoteViews)>",
      "<android.accounts.AbstractAccountAuthenticator$Transport: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>",
      "<android.accounts.AbstractAccountAuthenticator$Transport: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>",
      "<android.accounts.AbstractAccountAuthenticator$Transport: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>",
      "<android.accounts.AbstractAccountAuthenticator$Transport: void finishSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,android.os.Bundle)>",
      "<android.accounts.AbstractAccountAuthenticator$Transport: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>",
      "<android.accounts.AbstractAccountAuthenticator$Transport: void startAddAccountSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>",
      "<android.accounts.AbstractAccountAuthenticator$Transport: void startUpdateCredentialsSession(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>",
      "<android.accounts.AbstractAccountAuthenticator$Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>",
      "<com.android.server.accounts.AccountManagerService: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>",
      "<com.android.server.accounts.AccountManagerService: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>",
      "<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>",
      "<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map,java.lang.String)>",
      "<com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>",
      "<com.android.server.accounts.AccountManagerService: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>",
      "<com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>",
      "<com.android.server.accounts.AccountManagerService: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>",
      "<com.android.server.accounts.AccountManagerService: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>",
      "<com.android.server.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>",
      "<android.os.StrictMode$UnsafeIntentStrictModeCallback: void onImplicitIntentMatchedInternalComponent(android.content.Intent)>",
      "<com.android.server.backup.BackupManagerService: void updateTransportAttributesForUser(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>",
      "<android.app.backup.BackupManagerMonitorWrapper: void onEvent(android.os.Bundle)>",
      "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int enqueue(java.lang.String,android.app.job.JobInfo,android.app.job.JobWorkItem)>",
      "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int schedule(java.lang.String,android.app.job.JobInfo)>",
      "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int scheduleAsPackage(java.lang.String,android.app.job.JobInfo,java.lang.String,int,java.lang.String)>",
      "<com.android.server.media.MediaRouterService: void deselectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>",
      "<com.android.server.media.MediaRouterService: void deselectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>",
      "<com.android.server.media.MediaRouterService: void requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>",
      "<com.android.server.media.MediaRouterService: void requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info,android.os.Bundle)>",
      "<com.android.server.media.MediaRouterService: void selectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>",
      "<com.android.server.media.MediaRouterService: void selectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>",
      "<com.android.server.media.MediaRouterService: void setDiscoveryRequestWithRouter2(android.media.IMediaRouter2,android.media.RouteDiscoveryPreference)>",
      "<com.android.server.media.MediaRouterService: void setRouteVolumeWithManager(android.media.IMediaRouter2Manager,int,android.media.MediaRoute2Info,int)>",
      "<com.android.server.media.MediaRouterService: void setRouteVolumeWithRouter2(android.media.IMediaRouter2,android.media.MediaRoute2Info,int)>",
      "<com.android.server.media.MediaRouterService: void transferToRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>",
      "<com.android.server.media.MediaRouterService: void transferToRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>",
      "<android.media.MediaRouter2Manager$Client: void notifyDiscoveryPreferenceChanged(java.lang.String,android.media.RouteDiscoveryPreference)>",
      "<android.media.MediaRouter2Manager$Client: void notifySessionCreated(int,android.media.RoutingSessionInfo)>",
      "<android.media.MediaRouter2Manager$Client: void notifySessionReleased(android.media.RoutingSessionInfo)>",
      "<android.media.MediaRouter2Manager$Client: void notifySessionUpdated(android.media.RoutingSessionInfo)>",
      "<android.media.MediaRouter2$MediaRouter2Stub: void notifyRouterRegistered(java.util.List,android.media.RoutingSessionInfo)>",
      "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionCreated(int,android.media.RoutingSessionInfo)>",
      "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionInfoChanged(android.media.RoutingSessionInfo)>",
      "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionReleased(android.media.RoutingSessionInfo)>",
      "<android.media.MediaRouter2$MediaRouter2Stub: void requestCreateSessionByManager(long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>",
      "<com.android.server.statusbar.StatusBarManagerService: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>",
      "<com.android.server.statusbar.StatusBarManagerService: void onNotificationFeedbackReceived(java.lang.String,android.os.Bundle)>",
      "<com.android.server.statusbar.StatusBarManagerService: void updateMediaTapToTransferReceiverDisplay(int,android.media.MediaRoute2Info,android.graphics.drawable.Icon,java.lang.CharSequence)>",
      "<com.android.server.statusbar.StatusBarManagerService: void updateMediaTapToTransferSenderDisplay(int,android.media.MediaRoute2Info,com.android.internal.statusbar.IUndoMediaTransferCallback)>",
      "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void createSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId,android.os.IBinder)>",
      "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void notifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>",
      "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void query(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>",
      "<com.android.server.smartspace.SmartspaceManagerService$SmartspaceManagerStub: void createSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId,android.os.IBinder)>",
      "<com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void createPredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId,android.os.IBinder)>",
      "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>",
      "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void notifyInteraction(int,java.lang.String,android.os.Bundle)>",
      "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void provideContextBitmap(int,android.graphics.Bitmap,android.os.Bundle)>",
      "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void provideContextImage(int,int,android.os.Bundle)>",
      "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>",
      "<com.android.server.pm.CrossProfileAppsServiceImpl: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean,android.os.IBinder,android.os.Bundle)>",
      "<com.android.server.pm.CrossProfileAppsServiceImpl: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>",
      "<com.android.server.timedetector.TimeDetectorService: boolean updateConfiguration(android.app.time.TimeConfiguration)>",
      "<com.android.server.timezonedetector.TimeZoneDetectorService: boolean updateConfiguration(android.app.time.TimeZoneConfiguration)>",
      "<android.permission.PermissionControllerService$1: void revokeRuntimePermissions(android.os.Bundle,boolean,int,java.lang.String,com.android.internal.infra.AndroidFuture)>",
      "<com.android.server.security.AttestationVerificationManagerService$1: void verifyAttestation(android.security.attestationverification.AttestationProfile,int,android.os.Bundle,byte[],com.android.internal.infra.AndroidFuture)>",
      "<com.android.server.security.AttestationVerificationManagerService$1: void verifyToken(android.security.attestationverification.VerificationToken,android.os.ParcelDuration,com.android.internal.infra.AndroidFuture)>",
      "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportNetworkEvent(java.lang.String,android.media.metrics.NetworkEvent,int)>",
      "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportPlaybackErrorEvent(java.lang.String,android.media.metrics.PlaybackErrorEvent,int)>",
      "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportPlaybackMetrics(java.lang.String,android.media.metrics.PlaybackMetrics,int)>",
      "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportPlaybackStateEvent(java.lang.String,android.media.metrics.PlaybackStateEvent,int)>",
      "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportTrackChangeEvent(java.lang.String,android.media.metrics.TrackChangeEvent,int)>",
      "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void connectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>",
      "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void connectKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>",
      "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void disconnectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>",
      "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void forgetKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>",
      "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onHotspotNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus)>",
      "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onKnownNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus)>",
      "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onSharedConnectivitySettingsChanged(android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState)>",
      "<com.android.server.BinaryTransparencyService$BinaryTransparencyServiceImpl: java.util.List collectAllSilentInstalledMbaInfo(android.os.Bundle)>",
      "<com.android.server.BinaryTransparencyService$BinaryTransparencyServiceImpl: java.util.List collectAllUpdatedPreloadInfo(android.os.Bundle)>",
      "<com.android.server.input.InputManagerService: java.lang.String getKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>",
      "<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayoutListForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>",
      "<com.android.server.input.InputManagerService: void setKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype,java.lang.String)>",
      "<com.android.server.location.LocationManagerService: void injectLocation(android.location.Location)>",
      "<com.android.server.location.LocationManagerService: void sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>",
      "<com.android.server.location.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>",
      "<android.location.LocationManager$GetCurrentLocationTransport: void onLocation(android.location.Location)>",
      "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)>",
      "<com.android.server.usb.UsbService: void getDeviceList(android.os.Bundle)>",
      "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.app.PendingIntent getShortcutIntent(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle,android.os.UserHandle)>",
      "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>",
      "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>",
      "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>",
      "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean startShortcut(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,int)>",
      "<android.content.pm.LauncherApps$1: void onPackagesSuspended(android.os.UserHandle,java.lang.String[],android.os.Bundle)>",
      "<android.print.PrintManager$PrintDocumentAdapterDelegate: void layout(android.print.PrintAttributes,android.print.PrintAttributes,android.print.ILayoutResultCallback,android.os.Bundle,int)>",
      "<android.media.tv.interactive.TvInteractiveAppManager$1: void onAdRequest(android.media.tv.AdRequest,int)>",
      "<android.media.tv.interactive.TvInteractiveAppManager$1: void onCommandRequest(java.lang.String,android.os.Bundle,int)>",
      "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle,int)>",
      "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle,int)>",
      "<android.media.tv.interactive.TvInteractiveAppManager$1: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle,int)>",
      "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void createBiInteractiveApp(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>",
      "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyError(android.os.IBinder,java.lang.String,android.os.Bundle,int)>",
      "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyTvMessage(android.os.IBinder,int,android.os.Bundle,int)>",
      "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendAppLinkCommand(java.lang.String,android.os.Bundle,int)>",
      "<android.media.tv.interactive.TvInteractiveAppManager$2: void onTvInteractiveAppServiceInfoUpdated(android.media.tv.interactive.TvInteractiveAppServiceInfo)>",
      "<com.android.server.tv.TvInputManagerService$BinderService: android.media.tv.ITvInputHardware acquireTvInputHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int,java.lang.String,int)>",
      "<com.android.server.tv.TvInputManagerService$BinderService: void notifyTvMessage(android.os.IBinder,int,android.os.Bundle,int)>",
      "<com.android.server.tv.TvInputManagerService$BinderService: void pauseRecording(android.os.IBinder,android.os.Bundle,int)>",
      "<com.android.server.tv.TvInputManagerService$BinderService: void requestAd(android.os.IBinder,android.media.tv.AdRequest,int)>",
      "<com.android.server.tv.TvInputManagerService$BinderService: void resumeRecording(android.os.IBinder,android.os.Bundle,int)>",
      "<com.android.server.tv.TvInputManagerService$BinderService: void sendAppPrivateCommand(android.os.IBinder,java.lang.String,android.os.Bundle,int)>",
      "<com.android.server.tv.TvInputManagerService$BinderService: void sendTvInputNotifyIntent(android.content.Intent,int)>",
      "<com.android.server.tv.TvInputManagerService$BinderService: void startRecording(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>",
      "<com.android.server.tv.TvInputManagerService$BinderService: void tune(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>",
      "<com.android.server.tv.TvInputManagerService$BinderService: void updateTvInputInfo(android.media.tv.TvInputInfo,int)>",
      "<android.media.tv.TvInputManager$1: void onSessionEvent(java.lang.String,android.os.Bundle,int)>",
      "<android.media.tv.TvInputManager$1: void onTvMessage(int,android.os.Bundle,int)>",
      "<android.media.tv.TvInputManager$2: void onTvInputInfoUpdated(android.media.tv.TvInputInfo)>",
      "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)>",
      "<com.android.server.midi.MidiService: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>",
      "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int,int)>",
      "<android.media.midi.MidiDeviceServer$1: void setDeviceInfo(android.media.midi.MidiDeviceInfo)>",
      "<android.media.midi.MidiManager$DeviceListener: void onDeviceAdded(android.media.midi.MidiDeviceInfo)>",
      "<android.media.midi.MidiManager$DeviceListener: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)>",
      "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>",
      "<com.android.server.om.OverlayManagerService$1: void commit(android.content.om.OverlayManagerTransaction)>",
      "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal clearCredentialState(android.credentials.ClearCredentialStateRequest,android.credentials.IClearCredentialStateCallback,java.lang.String)>",
      "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal executeCreateCredential(android.credentials.CreateCredentialRequest,android.credentials.ICreateCredentialCallback,java.lang.String)>",
      "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal executeGetCredential(android.credentials.GetCredentialRequest,android.credentials.IGetCredentialCallback,java.lang.String)>",
      "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal executePrepareGetCredential(android.credentials.GetCredentialRequest,android.credentials.IPrepareGetCredentialCallback,android.credentials.IGetCredentialCallback,java.lang.String)>",
      "<android.credentials.CredentialManager$CreateCredentialTransport: void onResponse(android.credentials.CreateCredentialResponse)>",
      "<android.app.backup.BackupTransport$TransportImpl: void clearBackupData(android.content.pm.PackageInfo,com.android.internal.backup.ITransportStatusCallback)>",
      "<android.app.backup.BackupTransport$TransportImpl: void isAppEligibleForBackup(android.content.pm.PackageInfo,boolean,com.android.internal.infra.AndroidFuture)>",
      "<android.app.backup.BackupTransport$TransportImpl: void performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>",
      "<android.app.backup.BackupTransport$TransportImpl: void performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>",
      "<com.android.server.job.JobServiceContext$JobCallback: void setNotification(int,int,android.app.Notification,int)>",
      "<com.android.server.job.JobServiceContext$JobCallback: void updateEstimatedNetworkBytes(int,android.app.job.JobWorkItem,long,long)>",
      "<com.android.server.job.JobServiceContext$JobCallback: void updateTransferredNetworkBytes(int,android.app.job.JobWorkItem,long,long)>",
      "<android.app.job.JobServiceEngine$JobInterface: void getTransferredDownloadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>",
      "<android.app.job.JobServiceEngine$JobInterface: void getTransferredUploadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>",
      "<android.app.job.JobServiceEngine$JobInterface: void onNetworkChanged(android.app.job.JobParameters)>",
      "<android.app.job.JobServiceEngine$JobInterface: void startJob(android.app.job.JobParameters)>",
      "<android.app.job.JobServiceEngine$JobInterface: void stopJob(android.app.job.JobParameters)>",
      "<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>",
      "<android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsCallSession createCallSession(android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.feature.MmTelFeature$1: void setUiTtyMode(int,android.os.Message)>",
      "<android.telephony.ims.feature.MmTelFeature$Listener: android.telephony.ims.aidl.IImsCallSessionListener onIncomingCall(com.android.ims.internal.IImsCallSession,java.lang.String,android.os.Bundle)>",
      "<android.telephony.ims.feature.MmTelFeature$Listener: void onRejectedCall(android.telephony.ims.ImsCallProfile,android.telephony.ims.ImsReasonInfo)>",
      "<android.telephony.ims.stub.ImsUtImplBase$1: int transact(android.os.Bundle)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHeld(android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHoldReceived(android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiated(android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiating(android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumeReceived(android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumed(android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdateReceived(android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdated(android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)>",
      "<android.inputmethodservice.IInputMethodWrapper: void onCreateInlineSuggestionsRequest(com.android.internal.inputmethod.InlineSuggestionsRequestInfo,com.android.internal.inputmethod.IInlineSuggestionsRequestCallback)>",
      "<android.speech.tts.TextToSpeechService$1: int playAudio(android.os.IBinder,android.net.Uri,int,android.os.Bundle,java.lang.String)>",
      "<android.speech.tts.TextToSpeechService$1: int speak(android.os.IBinder,java.lang.CharSequence,int,android.os.Bundle,java.lang.String)>",
      "<android.speech.tts.TextToSpeechService$1: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.CharSequence,android.os.ParcelFileDescriptor,android.os.Bundle,java.lang.String)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHeld(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHoldReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumeReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttModifyRequestReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdateReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsCallSession createCallSession(int,android.telephony.ims.ImsCallProfile)>",
      "<android.telephony.ims.compat.feature.MMTelFeature$1: void setUiTTYMode(int,android.os.Message)>",
      "<android.service.media.MediaBrowserService$ServiceBinder: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>",
      "<android.service.media.MediaBrowserService$ServiceBinder: void connect(java.lang.String,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>",
      "<android.media.browse.MediaBrowser$ServiceCallbacks: void onConnect(java.lang.String,android.media.session.MediaSession$Token,android.os.Bundle)>",
      "<android.media.browse.MediaBrowser$ServiceCallbacks: void onLoadChildren(java.lang.String,android.content.pm.ParceledListSlice,android.os.Bundle)>",
      "<com.android.server.print.RemotePrintSpooler$PrintSpoolerClient: void onPrintJobQueued(android.print.PrintJobInfo)>",
      "<com.android.server.print.RemotePrintSpooler$PrintSpoolerClient: void onPrintJobStateChanged(android.print.PrintJobInfo)>",
      "<android.printservice.PrintService$1: void onPrintJobQueued(android.print.PrintJobInfo)>",
      "<android.printservice.PrintService$1: void requestCancelPrintJob(android.print.PrintJobInfo)>",
      "<android.service.autofill.AutofillFieldClassificationService$AutofillFieldClassificationServiceWrapper: void calculateScores(android.os.RemoteCallback,java.util.List,java.lang.String[],java.lang.String[],java.lang.String,android.os.Bundle,java.util.Map,java.util.Map)>",
      "<android.service.autofill.AutofillService$1: void onFillRequest(android.service.autofill.FillRequest,android.service.autofill.IFillCallback)>",
      "<android.service.autofill.AutofillService$1: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.ISaveCallback)>",
      "<com.android.server.autofill.RemoteAugmentedAutofillService$1$1: void onSuccess(java.util.List,android.os.Bundle,boolean)>",
      "<android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onFillRequest(int,android.os.IBinder,int,android.content.ComponentName,android.view.autofill.AutofillId,android.view.autofill.AutofillValue,long,android.view.inputmethod.InlineSuggestionsRequest,android.service.autofill.augmented.IFillCallback)>",
      "<android.service.contentcapture.ContentCaptureService$1: void onActivitySnapshot(int,android.service.contentcapture.SnapshotData)>",
      "<android.service.contentcapture.ContentCaptureService$1: void onSessionStarted(android.view.contentcapture.ContentCaptureContext,int,int,com.android.internal.os.IResultReceiver,int)>",
      "<android.service.contentsuggestions.ContentSuggestionsService$1: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>",
      "<android.service.contentsuggestions.ContentSuggestionsService$1: void notifyInteraction(java.lang.String,android.os.Bundle)>",
      "<android.service.contentsuggestions.ContentSuggestionsService$1: void provideContextImage(int,android.hardware.HardwareBuffer,int,android.os.Bundle)>",
      "<android.service.contentsuggestions.ContentSuggestionsService$1: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>",
      "<android.service.controls.ControlsProviderService$1: void action(java.lang.String,android.service.controls.actions.ControlActionWrapper,android.service.controls.IControlsActionCallback)>",
      "<android.service.credentials.CredentialProviderService$1: void onBeginCreateCredential(android.service.credentials.BeginCreateCredentialRequest,android.service.credentials.IBeginCreateCredentialCallback)>",
      "<android.service.credentials.CredentialProviderService$1: void onClearCredentialState(android.service.credentials.ClearCredentialStateRequest,android.service.credentials.IClearCredentialStateCallback)>",
      "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void downloadSubscription(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.os.Bundle,android.service.euicc.IDownloadSubscriptionCallback)>",
      "<android.service.search.SearchUiService$1: void onCreateSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId)>",
      "<android.service.search.SearchUiService$1: void onNotifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>",
      "<android.service.search.SearchUiService$1: void onQuery(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>",
      "<android.service.smartspace.SmartspaceService$1: void onCreateSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId)>",
      "<android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder: void getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int,com.android.internal.textservice.ISpellCheckerServiceCallback)>",
      "<android.service.voice.VoiceInteractionService$1: void prepareToShowSession(android.os.Bundle,int)>",
      "<android.service.voice.VoiceInteractionService$1: void showSessionFailed(android.os.Bundle)>",
      "<android.service.voice.VoiceInteractionSessionService$1: void newSession(android.os.IBinder,android.os.Bundle,int)>",
      "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)>",
      "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void initializeDiagnosticCall(android.telecom.ParcelableCall)>",
      "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void updateCall(android.telecom.ParcelableCall)>",
      "<android.telecom.CallScreeningService$CallScreeningBinder: void screenCall(com.android.internal.telecom.ICallScreeningAdapter,android.telecom.ParcelableCall)>",
      "<android.telecom.CallStreamingService$CallStreamingServiceBinder: void onCallStreamingStarted(android.telecom.StreamingCall)>",
      "<android.telecom.ConnectionServiceAdapterServant$2: void addConferenceCall(java.lang.String,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>",
      "<android.telecom.ConnectionServiceAdapterServant$2: void addExistingConnection(java.lang.String,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>",
      "<android.telecom.ConnectionServiceAdapterServant$2: void handleCreateConferenceComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>",
      "<android.telecom.ConnectionServiceAdapterServant$2: void handleCreateConnectionComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>",
      "<android.telecom.ConnectionServiceAdapterServant$2: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
      "<android.telecom.ConnectionServiceAdapterServant$2: void putExtras(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
      "<android.telecom.ConnectionService$1: void onExtrasChanged(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
      "<android.telecom.ConnectionService$1: void sendCallEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
      "<android.telecom.InCallService$InCallServiceBinder: void addCall(android.telecom.ParcelableCall)>",
      "<android.telecom.InCallService$InCallServiceBinder: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle)>",
      "<android.telecom.InCallService$InCallServiceBinder: void updateCall(android.telecom.ParcelableCall)>",
      "<com.android.server.MmsServiceBroker$BinderService: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long,java.lang.String)>",
      "<com.android.server.MmsServiceBroker$BinderService: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long,java.lang.String)>",
      "<com.android.server.MmsServiceBroker$BinderService: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>",
      "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceTransition(int,int,android.location.Location,long,int)>",
      "<android.location.provider.LocationProviderBase$Service: void sendExtraCommand(java.lang.String,android.os.Bundle)>",
      "<com.android.server.location.provider.proxy.ProxyLocationProvider$Proxy: void onReportLocation(android.location.Location)>",
      "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void requestCreateSession(long,java.lang.String,java.lang.String,android.os.Bundle)>",
      "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void updateDiscoveryPreference(android.media.RouteDiscoveryPreference)>",
      "<com.android.server.media.MediaRoute2ProviderServiceProxy$ServiceCallbackStub: void notifySessionCreated(long,android.media.RoutingSessionInfo)>",
      "<com.android.server.media.MediaRoute2ProviderServiceProxy$ServiceCallbackStub: void notifySessionReleased(android.media.RoutingSessionInfo)>",
      "<android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>",
      "<com.android.server.musicrecognition.MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>",
      "<android.media.soundtrigger.SoundTriggerDetectionService$1: void setClient(android.os.ParcelUuid,android.os.Bundle,android.media.soundtrigger.ISoundTriggerDetectionServiceClient)>",
      "<com.android.server.tv.TvInputManagerService$SessionCallback: void onSessionEvent(java.lang.String,android.os.Bundle)>",
      "<com.android.server.tv.TvInputManagerService$SessionCallback: void onTvMessage(int,android.os.Bundle)>",
      "<com.android.server.tv.TvInputManagerService$ServiceCallback: void addHardwareInput(int,android.media.tv.TvInputInfo)>",
      "<com.android.server.tv.TvInputManagerService$ServiceCallback: void addHdmiInput(int,android.media.tv.TvInputInfo)>",
      "<android.media.tv.ITvInputSessionWrapper: void appPrivateCommand(java.lang.String,android.os.Bundle)>",
      "<android.media.tv.ITvInputSessionWrapper: void notifyTvMessage(int,android.os.Bundle)>",
      "<android.media.tv.ITvInputSessionWrapper: void pauseRecording(android.os.Bundle)>",
      "<android.media.tv.ITvInputSessionWrapper: void requestAd(android.media.tv.AdRequest)>",
      "<android.media.tv.ITvInputSessionWrapper: void resumeRecording(android.os.Bundle)>",
      "<android.media.tv.ITvInputSessionWrapper: void startRecording(android.net.Uri,android.os.Bundle)>",
      "<android.media.tv.ITvInputSessionWrapper: void tune(android.net.Uri,android.os.Bundle)>",
      "<android.media.tv.interactive.TvInteractiveAppService$1: void sendAppLinkCommand(android.os.Bundle)>",
      "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onAdRequest(android.media.tv.AdRequest)>",
      "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onCommandRequest(java.lang.String,android.os.Bundle)>",
      "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle)>",
      "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle)>",
      "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle)>",
      "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void createBiInteractiveApp(android.net.Uri,android.os.Bundle)>",
      "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyError(java.lang.String,android.os.Bundle)>",
      "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTvMessage(int,android.os.Bundle)>",
]
    },
    "source": {
      "Param": {        "<android.os.Handler$MessengerImpl: void send(android.os.Message)>": [
          "p0"        ],
        "<com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>": [
          "p0"        ],
        "<com.android.server.compat.PlatformCompat: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>": [
          "p1"        ],
        "<com.android.server.compat.PlatformCompat: void reportChange(long,android.content.pm.ApplicationInfo)>": [
          "p1"        ],
        "<com.android.server.wm.Session: android.os.IBinder performDrag(android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData)>": [
          "p8"        ],
        "<com.android.server.wm.Session: int relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,int,int,android.window.ClientWindowFrames,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl$Array,android.os.Bundle)>": [
          "p13"        ],
        "<com.android.server.wm.Session: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)>": [
          "p5"        ],
        "<com.android.server.wm.Session: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>": [
          "p1"        ],
        "<android.app.ActivityThread$ApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)>": [
          "p1","p7","p18"        ],
        "<android.app.ActivityThread$ApplicationThread: void instrumentWithoutRestart(android.content.ComponentName,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,android.content.pm.ApplicationInfo)>": [
          "p1","p4"        ],
        "<android.app.ActivityThread$ApplicationThread: void notifyContentProviderPublishStatus(android.app.ContentProviderHolder,java.lang.String,int,boolean)>": [
          "p0"        ],
        "<android.app.ActivityThread$ApplicationThread: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,android.os.RemoteCallback,android.os.RemoteCallback)>": [
          "p2"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleApplicationInfoChanged(android.content.pm.ApplicationInfo)>": [
          "p0"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean,int,long)>": [
          "p1"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleCrash(java.lang.String,int,android.os.Bundle)>": [
          "p2"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,int,int,int)>": [
          "p0"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo,int)>": [
          "p1"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo,int)>": [
          "p0"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleInstallProvider(android.content.pm.ProviderInfo)>": [
          "p0"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleOnNewActivityOptions(android.os.IBinder,android.os.Bundle)>": [
          "p1"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,boolean,int,int,int,java.lang.String)>": [
          "p0","p1","p5"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean,int,int,int,java.lang.String)>": [
          "p1","p4"        ],
        "<android.app.ActivityThread$ApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>": [
          "p1"        ],
        "<android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setAuthenticationResult(android.os.Bundle,int,int,int)>": [
          "p0"        ],
        "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setUserData(android.service.autofill.UserData)>": [
          "p0"        ],
        "<android.view.autofill.AutofillManager$AutofillManagerClient: void authenticate(int,int,android.content.IntentSender,android.content.Intent,boolean)>": [
          "p3"        ],
        "<android.view.autofill.AutofillManager$AutofillManagerClient: void autofillContent(int,android.view.autofill.AutofillId,android.content.ClipData)>": [
          "p2"        ],
        "<android.view.autofill.AutofillManager$AutofillManagerClient: void startIntentSender(android.content.IntentSender,android.content.Intent)>": [
          "p1"        ],
        "<com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>": [
          "p2"        ],
        "<com.android.server.content.ContentService: void cancelRequest(android.content.SyncRequest)>": [
          "p0"        ],
        "<com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>": [
          "p2"        ],
        "<com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.content.ContentService: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>": [
          "p2"        ],
        "<com.android.server.content.ContentService: void sync(android.content.SyncRequest,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.content.ContentService: void syncAsUser(android.content.SyncRequest,int,java.lang.String)>": [
          "p0"        ],
        "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startAbortVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>": [
          "p3"        ],
        "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startCommand(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,java.lang.String,android.os.Bundle)>": [
          "p3"        ],
        "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startCompleteVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>": [
          "p3"        ],
        "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startConfirmation(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>": [
          "p3"        ],
        "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startPickOption(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>": [
          "p4"        ],
        "<com.android.server.media.MediaSessionRecord$ControllerStub: void playFromMediaId(java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.media.MediaSessionRecord$ControllerStub: void playFromSearch(java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.media.MediaSessionRecord$ControllerStub: void playFromUri(java.lang.String,android.net.Uri,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.media.MediaSessionRecord$ControllerStub: void prepareFromMediaId(java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.media.MediaSessionRecord$ControllerStub: void prepareFromSearch(java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.media.MediaSessionRecord$ControllerStub: void prepareFromUri(java.lang.String,android.net.Uri,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.media.MediaSessionRecord$ControllerStub: void sendCommand(java.lang.String,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>": [
          "p2"        ],
        "<com.android.server.media.MediaSessionRecord$ControllerStub: void sendCustomAction(java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[],android.os.Bundle)>": [
          "p9"        ],
        "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)>": [
          "p2"        ],
        "<com.android.server.audio.AudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>": [
          "p2"        ],
        "<com.android.server.audio.AudioService: int abandonAudioFocusForTest(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>": [
          "p2"        ],
        "<com.android.server.audio.AudioService: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: void addOnDevicesForAttributesChangedListener(android.media.AudioAttributes,android.media.IDevicesForAttributesCallback)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: boolean canBeSpatialized(android.media.AudioAttributes,android.media.AudioFormat)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: int clearPreferredMixerAttributes(android.media.AudioAttributes,int)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: android.media.VolumeInfo getDeviceVolume(android.media.VolumeInfo,android.media.AudioDeviceAttributes,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: java.util.List getDevicesForAttributes(android.media.AudioAttributes)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: java.util.List getDevicesForAttributesUnprotected(android.media.AudioAttributes)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: long getFadeOutDurationOnFocusLossMillis(android.media.AudioAttributes)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: int getFocusRampTimeMs(int,android.media.AudioAttributes)>": [
          "p1"        ],
        "<com.android.server.audio.AudioService: void playerAttributes(int,android.media.AudioAttributes)>": [
          "p1"        ],
        "<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: int requestAudioFocusForTest(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,int)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: boolean sendFocusLoss(android.media.AudioFocusInfo,android.media.audiopolicy.IAudioPolicyCallback)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: void setDeviceVolume(android.media.VolumeInfo,android.media.AudioDeviceAttributes,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: int setPreferredMixerAttributes(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>": [
          "p0"        ],
        "<com.android.server.audio.AudioService: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>": [
          "p0"        ],
        "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void startInput(com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,android.view.inputmethod.EditorInfo,boolean)>": [
          "p1"        ],
        "<android.app.VoiceInteractor$2: void deliverAbortVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>": [
          "p1"        ],
        "<android.app.VoiceInteractor$2: void deliverCommandResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>": [
          "p2"        ],
        "<android.app.VoiceInteractor$2: void deliverCompleteVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>": [
          "p1"        ],
        "<android.app.VoiceInteractor$2: void deliverConfirmationResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>": [
          "p2"        ],
        "<android.app.VoiceInteractor$2: void deliverPickOptionResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>": [
          "p3"        ],
        "<com.android.server.am.ActivityManagerService: void addInstrumentationResults(android.app.IApplicationThread,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,long,java.lang.String,int)>": [
          "p2"        ],
        "<com.android.server.am.ActivityManagerService: int bindServiceInstance(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,long,java.lang.String,java.lang.String,int)>": [
          "p2"        ],
        "<com.android.server.am.ActivityManagerService: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>": [
          "p1","p6","p9"        ],
        "<com.android.server.am.ActivityManagerService: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],java.lang.String[],java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>": [
          "p2","p7","p12"        ],
        "<com.android.server.am.ActivityManagerService: void crashApplicationWithTypeWithExtras(int,int,java.lang.String,int,java.lang.String,boolean,int,android.os.Bundle)>": [
          "p7"        ],
        "<com.android.server.am.ActivityManagerService: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>": [
          "p2"        ],
        "<com.android.server.am.ActivityManagerService: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.am.ActivityManagerService: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>": [
          "p3"        ],
        "<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>": [
          "p8"        ],
        "<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>": [
          "p9"        ],
        "<com.android.server.am.ActivityManagerService: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>": [
          "p4"        ],
        "<com.android.server.am.ActivityManagerService: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.am.ActivityManagerService: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>": [
          "p1"        ],
        "<com.android.server.am.ActivityManagerService: int sendIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>": [
          "p4","p8"        ],
        "<com.android.server.am.ActivityManagerService: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>": [
          "p3"        ],
        "<com.android.server.am.ActivityManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>": [
          "p2","p9"        ],
        "<com.android.server.am.ActivityManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>": [
          "p2","p9"        ],
        "<com.android.server.am.ActivityManagerService: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>": [
          "p3","p10"        ],
        "<com.android.server.am.ActivityManagerService: int startActivityFromRecents(int,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.am.ActivityManagerService: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>": [
          "p3","p10"        ],
        "<com.android.server.am.ActivityManagerService: void startConfirmDeviceCredentialIntent(android.content.Intent,android.os.Bundle)>": [
          "p0","p1"        ],
        "<com.android.server.am.ActivityManagerService: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>": [
          "p3"        ],
        "<com.android.server.am.ActivityManagerService: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>": [
          "p1"        ],
        "<com.android.server.am.ActivityManagerService: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>": [
          "p1"        ],
        "<com.android.server.am.ActivityManagerService: void unbindBackupAgent(android.content.pm.ApplicationInfo)>": [
          "p0"        ],
        "<com.android.server.am.ActivityManagerService: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>": [
          "p1"        ],
        "<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>": [
          "p1"        ],
        "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>": [
          "p2"        ],
        "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setUiHints(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void showSession(android.os.Bundle,int,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean showSessionForActiveService(android.os.Bundle,int,java.lang.String,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>": [
          "p0"        ],
        "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int,java.lang.String)>": [
          "p1"        ],
        "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p1","p4"        ],
        "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>": [
          "p1"        ],
        "<android.media.session.MediaController$CallbackStub: void onEvent(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<android.media.session.MediaController$CallbackStub: void onExtrasChanged(android.os.Bundle)>": [
          "p0"        ],
        "<android.media.session.MediaController$CallbackStub: void onMetadataChanged(android.media.MediaMetadata)>": [
          "p0"        ],
        "<android.media.session.MediaController$CallbackStub: void onPlaybackStateChanged(android.media.session.PlaybackState)>": [
          "p0"        ],
        "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusAbandon(android.media.AudioFocusInfo)>": [
          "p0"        ],
        "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusGrant(android.media.AudioFocusInfo,int)>": [
          "p0"        ],
        "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusLoss(android.media.AudioFocusInfo,boolean)>": [
          "p0"        ],
        "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusRequest(android.media.AudioFocusInfo,int)>": [
          "p0"        ],
        "<android.media.AudioManager$IDevicesForAttributesCallbackStub: void onDevicesForAttributesChanged(android.media.AudioAttributes,boolean,java.util.List)>": [
          "p0"        ],
        "<android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub: void dispatchDeviceVolumeAdjusted(android.media.AudioDeviceAttributes,android.media.VolumeInfo,int,int)>": [
          "p1"        ],
        "<android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub: void dispatchDeviceVolumeChanged(android.media.AudioDeviceAttributes,android.media.VolumeInfo)>": [
          "p1"        ],
        "<android.media.AudioManager$PreferredMixerAttributesDispatcherStub: void dispatchPrefMixerAttributesChanged(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>": [
          "p0"        ],
        "<android.inputmethodservice.IInputMethodSessionWrapper: void appPrivateCommand(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<android.inputmethodservice.IInputMethodSessionWrapper: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,int)>": [
          "p0"        ],
        "<com.android.server.inputmethod.InputMethodManagerService: com.android.internal.inputmethod.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.inputmethod.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int,int,android.window.ImeOnBackInvokedDispatcher)>": [
          "p6"        ],
        "<com.android.server.appop.AppOpsService: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>": [
          "p0"        ],
        "<android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int)>": [
          "p0"        ],
        "<com.android.server.am.ActivityManagerShellCommand$MyActivityController: boolean activityStarting(android.content.Intent,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>": [
          "p1"        ],
        "<com.android.server.wm.ActivityTaskManagerService: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>": [
          "p1"        ],
        "<com.android.server.wm.ActivityTaskManagerService: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>": [
          "p4"        ],
        "<com.android.server.wm.ActivityTaskManagerService: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>": [
          "p1","p3"        ],
        "<com.android.server.wm.ActivityTaskManagerService: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>": [
          "p2"        ],
        "<com.android.server.wm.ActivityTaskManagerService: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>": [
          "p1"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>": [
          "p6"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>": [
          "p3","p10"        ],
        "<com.android.server.wm.ActivityTaskManagerService: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>": [
          "p3","p10"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,boolean,int)>": [
          "p2","p9"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>": [
          "p3","p10"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int startActivityFromGameSession(android.app.IApplicationThread,java.lang.String,java.lang.String,int,int,android.content.Intent,int,int)>": [
          "p5"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int startActivityFromRecents(int,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>": [
          "p3","p10"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>": [
          "p3","p10"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int startAssistantActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.os.Bundle,int)>": [
          "p4","p6"        ],
        "<com.android.server.wm.ActivityTaskManagerService: boolean startDreamActivity(android.content.Intent)>": [
          "p0"        ],
        "<com.android.server.wm.ActivityTaskManagerService: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>": [
          "p1","p2"        ],
        "<com.android.server.wm.ActivityTaskManagerService: void startRecentsActivity(android.content.Intent,long,android.view.IRecentsAnimationRunner)>": [
          "p0"        ],
        "<com.android.server.wm.ActivityTaskManagerService: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>": [
          "p4","p10"        ],
        "<com.android.server.wm.AppTaskImpl: int startActivity(android.os.IBinder,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.Bundle)>": [
          "p3","p5"        ],
        "<com.android.server.pm.permission.PermissionManagerService: boolean addPermission(android.content.pm.PermissionInfo,boolean)>": [
          "p0"        ],
        "<com.android.server.search.SearchManagerService: void launchAssist(int,android.os.Bundle)>": [
          "p1"        ],
        "<android.service.voice.VoiceInteractionSession$2: void handleAssist(int,android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)>": [
          "p2","p4"        ],
        "<android.service.voice.VoiceInteractionSession$2: void show(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback)>": [
          "p0"        ],
        "<android.service.voice.VoiceInteractionSession$2: void taskFinished(android.content.Intent,int)>": [
          "p0"        ],
        "<android.service.voice.VoiceInteractionSession$2: void taskStarted(android.content.Intent,int)>": [
          "p0"        ],
        "<com.android.server.voiceinteraction.VoiceInteractionManagerService$3: void onSetUiHints(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void setPrimaryClip(android.content.ClipData,java.lang.String,java.lang.String,int,int)>": [
          "p0"        ],
        "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void setPrimaryClipAsPackage(android.content.ClipData,java.lang.String,java.lang.String,int,int,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.textservices.TextServicesManagerService: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int)>": [
          "p5"        ],
        "<com.android.server.media.MediaSessionRecord$SessionStub: void sendEvent(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.media.MediaSessionRecord$SessionStub: void setExtras(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.media.MediaSessionRecord$SessionStub: void setMetadata(android.media.MediaMetadata,long,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.media.MediaSessionRecord$SessionStub: void setPlaybackState(android.media.session.PlaybackState)>": [
          "p0"        ],
        "<com.android.server.media.MediaSessionRecord$SessionStub: void setPlaybackToLocal(android.media.AudioAttributes)>": [
          "p0"        ],
        "<com.android.server.media.MediaSessionService$SessionManagerImpl: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>": [
          "p3"        ],
        "<android.view.inputmethod.RemoteInputConnectionImpl: void commitContent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.InputContentInfo,int,android.os.Bundle,com.android.internal.infra.AndroidFuture)>": [
          "p1","p3"        ],
        "<android.view.inputmethod.RemoteInputConnectionImpl: void performPrivateCommand(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.wm.ActivityClientController: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>": [
          "p1"        ],
        "<com.android.server.wm.ActivityClientController: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.wm.ActivityClientController: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>": [
          "p2"        ],
        "<com.android.server.wm.ActivityClientController: boolean navigateUpTo(android.os.IBinder,android.content.Intent,java.lang.String,int,android.content.Intent)>": [
          "p1","p4"        ],
        "<com.android.server.wm.ActivityClientController: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.wm.ActivityClientController: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>": [
          "p1"        ],
        "<android.app.PackageDeleteObserver$1: void onUserActionRequired(android.content.Intent)>": [
          "p0"        ],
        "<android.companion.virtual.VirtualDeviceInternal$IntentInterceptorDelegate: void onIntentIntercepted(android.content.Intent)>": [
          "p0"        ],
        "<android.media.session.MediaSession$CallbackStub: void onCommand(java.lang.String,int,int,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>": [
          "p4"        ],
        "<android.media.session.MediaSession$CallbackStub: void onCustomAction(java.lang.String,int,int,java.lang.String,android.os.Bundle)>": [
          "p4"        ],
        "<android.media.session.MediaSession$CallbackStub: void onMediaButton(java.lang.String,int,int,android.content.Intent,int,android.os.ResultReceiver)>": [
          "p3"        ],
        "<android.media.session.MediaSession$CallbackStub: void onMediaButtonFromController(java.lang.String,int,int,android.content.Intent)>": [
          "p3"        ],
        "<android.media.session.MediaSession$CallbackStub: void onPlayFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>": [
          "p4"        ],
        "<android.media.session.MediaSession$CallbackStub: void onPlayFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>": [
          "p4"        ],
        "<android.media.session.MediaSession$CallbackStub: void onPlayFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>": [
          "p4"        ],
        "<android.media.session.MediaSession$CallbackStub: void onPrepareFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>": [
          "p4"        ],
        "<android.media.session.MediaSession$CallbackStub: void onPrepareFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>": [
          "p4"        ],
        "<android.media.session.MediaSession$CallbackStub: void onPrepareFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>": [
          "p4"        ],
        "<com.android.server.pm.UserManagerService: void setApplicationRestrictions(java.lang.String,android.os.Bundle,int)>": [
          "p1"        ],
        "<com.android.server.pm.UserManagerService: void setDefaultGuestRestrictions(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>": [
          "p3"        ],
        "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int,boolean)>": [
          "p4"        ],
        "<com.android.server.wallpaper.WallpaperManagerService: void notifyGoingToSleep(int,int,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.wallpaper.WallpaperManagerService: void notifyWakingUp(int,int,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>": [
          "p4"        ],
        "<com.android.server.notification.NotificationManagerService$11: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>": [
          "p1"        ],
        "<com.android.server.notification.NotificationManagerService$11: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>": [
          "p1"        ],
        "<com.android.server.notification.NotificationManagerService$11: void createConversationNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel,java.lang.String)>": [
          "p2"        ],
        "<com.android.server.notification.NotificationManagerService$11: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>": [
          "p4"        ],
        "<com.android.server.notification.NotificationManagerService$11: boolean matchesCallFilter(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.notification.NotificationManagerService$11: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>": [
          "p2"        ],
        "<com.android.server.notification.NotificationManagerService$11: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>": [
          "p3"        ],
        "<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int,int,android.os.Bundle)>": [
          "p3"        ],
        "<com.android.server.wm.WindowManagerService: android.content.res.Configuration attachWindowContextToDisplayArea(android.os.IBinder,int,int,android.os.Bundle)>": [
          "p3"        ],
        "<com.android.server.wm.WindowManagerService: void lockNow(android.os.Bundle)>": [
          "p0"        ],
        "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onActionClicked(java.lang.String,android.app.Notification$Action,int)>": [
          "p1"        ],
        "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationChannelModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)>": [
          "p2"        ],
        "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationEnqueuedWithChannel(android.service.notification.IStatusBarNotificationHolder,android.app.NotificationChannel,android.service.notification.NotificationRankingUpdate)>": [
          "p1"        ],
        "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationFeedbackReceived(java.lang.String,android.service.notification.NotificationRankingUpdate,android.os.Bundle)>": [
          "p2"        ],
        "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDestroy(android.content.Intent)>": [
          "p0"        ],
        "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,long,int)>": [
          "p3"        ],
        "<com.android.server.devicepolicy.DevicePolicyManagerService: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>": [
          "p2"        ],
        "<com.android.server.devicepolicy.DevicePolicyManagerService: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p3"        ],
        "<com.android.server.devicepolicy.DevicePolicyManagerService: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>": [
          "p4"        ],
        "<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>": [
          "p4"        ],
        "<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,long)>": [
          "p2"        ],
        "<com.android.server.appwidget.AppWidgetServiceImpl: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>": [
          "p2"        ],
        "<com.android.server.appwidget.AppWidgetServiceImpl: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>": [
          "p2"        ],
        "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>": [
          "p2"        ],
        "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>": [
          "p1"        ],
        "<android.appwidget.AppWidgetHost$Callbacks: void updateAppWidget(int,android.widget.RemoteViews)>": [
          "p1"        ],
        "<android.accounts.AbstractAccountAuthenticator$Transport: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>": [
          "p4"        ],
        "<android.accounts.AbstractAccountAuthenticator$Transport: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>": [
          "p2"        ],
        "<android.accounts.AbstractAccountAuthenticator$Transport: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>": [
          "p2"        ],
        "<android.accounts.AbstractAccountAuthenticator$Transport: void finishSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<android.accounts.AbstractAccountAuthenticator$Transport: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>": [
          "p3"        ],
        "<android.accounts.AbstractAccountAuthenticator$Transport: void startAddAccountSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>": [
          "p4"        ],
        "<android.accounts.AbstractAccountAuthenticator$Transport: void startUpdateCredentialsSession(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>": [
          "p3"        ],
        "<android.accounts.AbstractAccountAuthenticator$Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>": [
          "p3"        ],
        "<com.android.server.accounts.AccountManagerService: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>": [
          "p5"        ],
        "<com.android.server.accounts.AccountManagerService: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>": [
          "p5"        ],
        "<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>": [
          "p2"        ],
        "<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map,java.lang.String)>": [
          "p2"        ],
        "<com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>": [
          "p2"        ],
        "<com.android.server.accounts.AccountManagerService: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>": [
          "p1","p3"        ],
        "<com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>": [
          "p5"        ],
        "<com.android.server.accounts.AccountManagerService: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>": [
          "p5"        ],
        "<com.android.server.accounts.AccountManagerService: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>": [
          "p4"        ],
        "<com.android.server.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>": [
          "p4"        ],
        "<android.os.StrictMode$UnsafeIntentStrictModeCallback: void onImplicitIntentMatchedInternalComponent(android.content.Intent)>": [
          "p0"        ],
        "<com.android.server.backup.BackupManagerService: void updateTransportAttributesForUser(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>": [
          "p3","p5"        ],
        "<android.app.backup.BackupManagerMonitorWrapper: void onEvent(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int enqueue(java.lang.String,android.app.job.JobInfo,android.app.job.JobWorkItem)>": [
          "p1","p2"        ],
        "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int schedule(java.lang.String,android.app.job.JobInfo)>": [
          "p1"        ],
        "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int scheduleAsPackage(java.lang.String,android.app.job.JobInfo,java.lang.String,int,java.lang.String)>": [
          "p1"        ],
        "<com.android.server.media.MediaRouterService: void deselectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>": [
          "p3"        ],
        "<com.android.server.media.MediaRouterService: void deselectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>": [
          "p2"        ],
        "<com.android.server.media.MediaRouterService: void requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>": [
          "p2","p3"        ],
        "<com.android.server.media.MediaRouterService: void requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info,android.os.Bundle)>": [
          "p3","p4","p5"        ],
        "<com.android.server.media.MediaRouterService: void selectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>": [
          "p3"        ],
        "<com.android.server.media.MediaRouterService: void selectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>": [
          "p2"        ],
        "<com.android.server.media.MediaRouterService: void setDiscoveryRequestWithRouter2(android.media.IMediaRouter2,android.media.RouteDiscoveryPreference)>": [
          "p1"        ],
        "<com.android.server.media.MediaRouterService: void setRouteVolumeWithManager(android.media.IMediaRouter2Manager,int,android.media.MediaRoute2Info,int)>": [
          "p2"        ],
        "<com.android.server.media.MediaRouterService: void setRouteVolumeWithRouter2(android.media.IMediaRouter2,android.media.MediaRoute2Info,int)>": [
          "p1"        ],
        "<com.android.server.media.MediaRouterService: void transferToRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>": [
          "p3"        ],
        "<com.android.server.media.MediaRouterService: void transferToRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>": [
          "p2"        ],
        "<android.media.MediaRouter2Manager$Client: void notifyDiscoveryPreferenceChanged(java.lang.String,android.media.RouteDiscoveryPreference)>": [
          "p1"        ],
        "<android.media.MediaRouter2Manager$Client: void notifySessionCreated(int,android.media.RoutingSessionInfo)>": [
          "p1"        ],
        "<android.media.MediaRouter2Manager$Client: void notifySessionReleased(android.media.RoutingSessionInfo)>": [
          "p0"        ],
        "<android.media.MediaRouter2Manager$Client: void notifySessionUpdated(android.media.RoutingSessionInfo)>": [
          "p0"        ],
        "<android.media.MediaRouter2$MediaRouter2Stub: void notifyRouterRegistered(java.util.List,android.media.RoutingSessionInfo)>": [
          "p1"        ],
        "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionCreated(int,android.media.RoutingSessionInfo)>": [
          "p1"        ],
        "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionInfoChanged(android.media.RoutingSessionInfo)>": [
          "p0"        ],
        "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionReleased(android.media.RoutingSessionInfo)>": [
          "p0"        ],
        "<android.media.MediaRouter2$MediaRouter2Stub: void requestCreateSessionByManager(long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>": [
          "p1","p2"        ],
        "<com.android.server.statusbar.StatusBarManagerService: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>": [
          "p2"        ],
        "<com.android.server.statusbar.StatusBarManagerService: void onNotificationFeedbackReceived(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.statusbar.StatusBarManagerService: void updateMediaTapToTransferReceiverDisplay(int,android.media.MediaRoute2Info,android.graphics.drawable.Icon,java.lang.CharSequence)>": [
          "p1"        ],
        "<com.android.server.statusbar.StatusBarManagerService: void updateMediaTapToTransferSenderDisplay(int,android.media.MediaRoute2Info,com.android.internal.statusbar.IUndoMediaTransferCallback)>": [
          "p1"        ],
        "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void createSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId,android.os.IBinder)>": [
          "p0"        ],
        "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void notifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>": [
          "p1"        ],
        "<com.android.server.searchui.SearchUiManagerService$SearchUiManagerStub: void query(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>": [
          "p1"        ],
        "<com.android.server.smartspace.SmartspaceManagerService$SmartspaceManagerStub: void createSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId,android.os.IBinder)>": [
          "p0"        ],
        "<com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void createPredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId,android.os.IBinder)>": [
          "p0"        ],
        "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>": [
          "p1"        ],
        "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void notifyInteraction(int,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void provideContextBitmap(int,android.graphics.Bitmap,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void provideContextImage(int,int,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>": [
          "p1"        ],
        "<com.android.server.pm.CrossProfileAppsServiceImpl: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean,android.os.IBinder,android.os.Bundle)>": [
          "p7"        ],
        "<com.android.server.pm.CrossProfileAppsServiceImpl: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>": [
          "p3","p6"        ],
        "<com.android.server.timedetector.TimeDetectorService: boolean updateConfiguration(android.app.time.TimeConfiguration)>": [
          "p0"        ],
        "<com.android.server.timezonedetector.TimeZoneDetectorService: boolean updateConfiguration(android.app.time.TimeZoneConfiguration)>": [
          "p0"        ],
        "<android.permission.PermissionControllerService$1: void revokeRuntimePermissions(android.os.Bundle,boolean,int,java.lang.String,com.android.internal.infra.AndroidFuture)>": [
          "p0"        ],
        "<com.android.server.security.AttestationVerificationManagerService$1: void verifyAttestation(android.security.attestationverification.AttestationProfile,int,android.os.Bundle,byte[],com.android.internal.infra.AndroidFuture)>": [
          "p2"        ],
        "<com.android.server.security.AttestationVerificationManagerService$1: void verifyToken(android.security.attestationverification.VerificationToken,android.os.ParcelDuration,com.android.internal.infra.AndroidFuture)>": [
          "p0"        ],
        "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportNetworkEvent(java.lang.String,android.media.metrics.NetworkEvent,int)>": [
          "p1"        ],
        "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportPlaybackErrorEvent(java.lang.String,android.media.metrics.PlaybackErrorEvent,int)>": [
          "p1"        ],
        "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportPlaybackMetrics(java.lang.String,android.media.metrics.PlaybackMetrics,int)>": [
          "p1"        ],
        "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportPlaybackStateEvent(java.lang.String,android.media.metrics.PlaybackStateEvent,int)>": [
          "p1"        ],
        "<com.android.server.media.metrics.MediaMetricsManagerService$BinderService: void reportTrackChangeEvent(java.lang.String,android.media.metrics.TrackChangeEvent,int)>": [
          "p1"        ],
        "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void connectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>": [
          "p0"        ],
        "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void connectKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>": [
          "p0"        ],
        "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void disconnectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>": [
          "p0"        ],
        "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void forgetKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>": [
          "p0"        ],
        "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onHotspotNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus)>": [
          "p0"        ],
        "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onKnownNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus)>": [
          "p0"        ],
        "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onSharedConnectivitySettingsChanged(android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState)>": [
          "p0"        ],
        "<com.android.server.BinaryTransparencyService$BinaryTransparencyServiceImpl: java.util.List collectAllSilentInstalledMbaInfo(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.BinaryTransparencyService$BinaryTransparencyServiceImpl: java.util.List collectAllUpdatedPreloadInfo(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.input.InputManagerService: java.lang.String getKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>": [
          "p2"        ],
        "<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayoutListForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>": [
          "p2"        ],
        "<com.android.server.input.InputManagerService: void setKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,int,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype,java.lang.String)>": [
          "p2"        ],
        "<com.android.server.location.LocationManagerService: void injectLocation(android.location.Location)>": [
          "p0"        ],
        "<com.android.server.location.LocationManagerService: void sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.location.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>": [
          "p1"        ],
        "<android.location.LocationManager$GetCurrentLocationTransport: void onLocation(android.location.Location)>": [
          "p0"        ],
        "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.usb.UsbService: void getDeviceList(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.app.PendingIntent getShortcutIntent(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle,android.os.UserHandle)>": [
          "p3"        ],
        "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>": [
          "p5"        ],
        "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>": [
          "p5"        ],
        "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>": [
          "p5"        ],
        "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean startShortcut(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,int)>": [
          "p5"        ],
        "<android.content.pm.LauncherApps$1: void onPackagesSuspended(android.os.UserHandle,java.lang.String[],android.os.Bundle)>": [
          "p2"        ],
        "<android.print.PrintManager$PrintDocumentAdapterDelegate: void layout(android.print.PrintAttributes,android.print.PrintAttributes,android.print.ILayoutResultCallback,android.os.Bundle,int)>": [
          "p3"        ],
        "<android.media.tv.interactive.TvInteractiveAppManager$1: void onAdRequest(android.media.tv.AdRequest,int)>": [
          "p0"        ],
        "<android.media.tv.interactive.TvInteractiveAppManager$1: void onCommandRequest(java.lang.String,android.os.Bundle,int)>": [
          "p1"        ],
        "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle,int)>": [
          "p4"        ],
        "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle,int)>": [
          "p6"        ],
        "<android.media.tv.interactive.TvInteractiveAppManager$1: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle,int)>": [
          "p1"        ],
        "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void createBiInteractiveApp(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>": [
          "p2"        ],
        "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyError(android.os.IBinder,java.lang.String,android.os.Bundle,int)>": [
          "p2"        ],
        "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void notifyTvMessage(android.os.IBinder,int,android.os.Bundle,int)>": [
          "p2"        ],
        "<com.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService: void sendAppLinkCommand(java.lang.String,android.os.Bundle,int)>": [
          "p1"        ],
        "<android.media.tv.interactive.TvInteractiveAppManager$2: void onTvInteractiveAppServiceInfoUpdated(android.media.tv.interactive.TvInteractiveAppServiceInfo)>": [
          "p0"        ],
        "<com.android.server.tv.TvInputManagerService$BinderService: android.media.tv.ITvInputHardware acquireTvInputHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int,java.lang.String,int)>": [
          "p2"        ],
        "<com.android.server.tv.TvInputManagerService$BinderService: void notifyTvMessage(android.os.IBinder,int,android.os.Bundle,int)>": [
          "p2"        ],
        "<com.android.server.tv.TvInputManagerService$BinderService: void pauseRecording(android.os.IBinder,android.os.Bundle,int)>": [
          "p1"        ],
        "<com.android.server.tv.TvInputManagerService$BinderService: void requestAd(android.os.IBinder,android.media.tv.AdRequest,int)>": [
          "p1"        ],
        "<com.android.server.tv.TvInputManagerService$BinderService: void resumeRecording(android.os.IBinder,android.os.Bundle,int)>": [
          "p1"        ],
        "<com.android.server.tv.TvInputManagerService$BinderService: void sendAppPrivateCommand(android.os.IBinder,java.lang.String,android.os.Bundle,int)>": [
          "p2"        ],
        "<com.android.server.tv.TvInputManagerService$BinderService: void sendTvInputNotifyIntent(android.content.Intent,int)>": [
          "p0"        ],
        "<com.android.server.tv.TvInputManagerService$BinderService: void startRecording(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>": [
          "p2"        ],
        "<com.android.server.tv.TvInputManagerService$BinderService: void tune(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>": [
          "p2"        ],
        "<com.android.server.tv.TvInputManagerService$BinderService: void updateTvInputInfo(android.media.tv.TvInputInfo,int)>": [
          "p0"        ],
        "<android.media.tv.TvInputManager$1: void onSessionEvent(java.lang.String,android.os.Bundle,int)>": [
          "p1"        ],
        "<android.media.tv.TvInputManager$1: void onTvMessage(int,android.os.Bundle,int)>": [
          "p1"        ],
        "<android.media.tv.TvInputManager$2: void onTvInputInfoUpdated(android.media.tv.TvInputInfo)>": [
          "p0"        ],
        "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)>": [
          "p0"        ],
        "<com.android.server.midi.MidiService: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>": [
          "p1"        ],
        "<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int,int)>": [
          "p5"        ],
        "<android.media.midi.MidiDeviceServer$1: void setDeviceInfo(android.media.midi.MidiDeviceInfo)>": [
          "p0"        ],
        "<android.media.midi.MidiManager$DeviceListener: void onDeviceAdded(android.media.midi.MidiDeviceInfo)>": [
          "p0"        ],
        "<android.media.midi.MidiManager$DeviceListener: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)>": [
          "p0"        ],
        "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerSessionStub: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>": [
          "p1"        ],
        "<com.android.server.om.OverlayManagerService$1: void commit(android.content.om.OverlayManagerTransaction)>": [
          "p0"        ],
        "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal clearCredentialState(android.credentials.ClearCredentialStateRequest,android.credentials.IClearCredentialStateCallback,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal executeCreateCredential(android.credentials.CreateCredentialRequest,android.credentials.ICreateCredentialCallback,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal executeGetCredential(android.credentials.GetCredentialRequest,android.credentials.IGetCredentialCallback,java.lang.String)>": [
          "p0"        ],
        "<com.android.server.credentials.CredentialManagerService$CredentialManagerServiceStub: android.os.ICancellationSignal executePrepareGetCredential(android.credentials.GetCredentialRequest,android.credentials.IPrepareGetCredentialCallback,android.credentials.IGetCredentialCallback,java.lang.String)>": [
          "p0"        ],
        "<android.credentials.CredentialManager$CreateCredentialTransport: void onResponse(android.credentials.CreateCredentialResponse)>": [
          "p0"        ],
        "<android.app.backup.BackupTransport$TransportImpl: void clearBackupData(android.content.pm.PackageInfo,com.android.internal.backup.ITransportStatusCallback)>": [
          "p0"        ],
        "<android.app.backup.BackupTransport$TransportImpl: void isAppEligibleForBackup(android.content.pm.PackageInfo,boolean,com.android.internal.infra.AndroidFuture)>": [
          "p0"        ],
        "<android.app.backup.BackupTransport$TransportImpl: void performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>": [
          "p0"        ],
        "<android.app.backup.BackupTransport$TransportImpl: void performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>": [
          "p0"        ],
        "<com.android.server.job.JobServiceContext$JobCallback: void setNotification(int,int,android.app.Notification,int)>": [
          "p2"        ],
        "<com.android.server.job.JobServiceContext$JobCallback: void updateEstimatedNetworkBytes(int,android.app.job.JobWorkItem,long,long)>": [
          "p1"        ],
        "<com.android.server.job.JobServiceContext$JobCallback: void updateTransferredNetworkBytes(int,android.app.job.JobWorkItem,long,long)>": [
          "p1"        ],
        "<android.app.job.JobServiceEngine$JobInterface: void getTransferredDownloadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>": [
          "p0","p1"        ],
        "<android.app.job.JobServiceEngine$JobInterface: void getTransferredUploadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>": [
          "p0","p1"        ],
        "<android.app.job.JobServiceEngine$JobInterface: void onNetworkChanged(android.app.job.JobParameters)>": [
          "p0"        ],
        "<android.app.job.JobServiceEngine$JobInterface: void startJob(android.app.job.JobParameters)>": [
          "p0"        ],
        "<android.app.job.JobServiceEngine$JobInterface: void stopJob(android.app.job.JobParameters)>": [
          "p0"        ],
        "<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>": [
          "p3"        ],
        "<android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsCallSession createCallSession(android.telephony.ims.ImsCallProfile)>": [
          "p0"        ],
        "<android.telephony.ims.feature.MmTelFeature$1: void setUiTtyMode(int,android.os.Message)>": [
          "p1"        ],
        "<android.telephony.ims.feature.MmTelFeature$Listener: android.telephony.ims.aidl.IImsCallSessionListener onIncomingCall(com.android.ims.internal.IImsCallSession,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<android.telephony.ims.feature.MmTelFeature$Listener: void onRejectedCall(android.telephony.ims.ImsCallProfile,android.telephony.ims.ImsReasonInfo)>": [
          "p0"        ],
        "<android.telephony.ims.stub.ImsUtImplBase$1: int transact(android.os.Bundle)>": [
          "p0"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHeld(android.telephony.ims.ImsCallProfile)>": [
          "p0"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHoldReceived(android.telephony.ims.ImsCallProfile)>": [
          "p0"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiated(android.telephony.ims.ImsCallProfile)>": [
          "p0"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiating(android.telephony.ims.ImsCallProfile)>": [
          "p0"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumeReceived(android.telephony.ims.ImsCallProfile)>": [
          "p0"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumed(android.telephony.ims.ImsCallProfile)>": [
          "p0"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallProfile)>": [
          "p0"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdateReceived(android.telephony.ims.ImsCallProfile)>": [
          "p0"        ],
        "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdated(android.telephony.ims.ImsCallProfile)>": [
          "p0"        ],
        "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)>": [
          "p2"        ],
        "<android.inputmethodservice.IInputMethodWrapper: void onCreateInlineSuggestionsRequest(com.android.internal.inputmethod.InlineSuggestionsRequestInfo,com.android.internal.inputmethod.IInlineSuggestionsRequestCallback)>": [
          "p0"        ],
        "<android.speech.tts.TextToSpeechService$1: int playAudio(android.os.IBinder,android.net.Uri,int,android.os.Bundle,java.lang.String)>": [
          "p3"        ],
        "<android.speech.tts.TextToSpeechService$1: int speak(android.os.IBinder,java.lang.CharSequence,int,android.os.Bundle,java.lang.String)>": [
          "p3"        ],
        "<android.speech.tts.TextToSpeechService$1: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.CharSequence,android.os.ParcelFileDescriptor,android.os.Bundle,java.lang.String)>": [
          "p3"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p2"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p2"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHeld(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHoldReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p2"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumeReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttModifyRequestReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdateReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsCallSession createCallSession(int,android.telephony.ims.ImsCallProfile)>": [
          "p1"        ],
        "<android.telephony.ims.compat.feature.MMTelFeature$1: void setUiTTYMode(int,android.os.Message)>": [
          "p1"        ],
        "<android.service.media.MediaBrowserService$ServiceBinder: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>": [
          "p2"        ],
        "<android.service.media.MediaBrowserService$ServiceBinder: void connect(java.lang.String,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>": [
          "p1"        ],
        "<android.media.browse.MediaBrowser$ServiceCallbacks: void onConnect(java.lang.String,android.media.session.MediaSession$Token,android.os.Bundle)>": [
          "p2"        ],
        "<android.media.browse.MediaBrowser$ServiceCallbacks: void onLoadChildren(java.lang.String,android.content.pm.ParceledListSlice,android.os.Bundle)>": [
          "p2"        ],
        "<com.android.server.print.RemotePrintSpooler$PrintSpoolerClient: void onPrintJobQueued(android.print.PrintJobInfo)>": [
          "p0"        ],
        "<com.android.server.print.RemotePrintSpooler$PrintSpoolerClient: void onPrintJobStateChanged(android.print.PrintJobInfo)>": [
          "p0"        ],
        "<android.printservice.PrintService$1: void onPrintJobQueued(android.print.PrintJobInfo)>": [
          "p0"        ],
        "<android.printservice.PrintService$1: void requestCancelPrintJob(android.print.PrintJobInfo)>": [
          "p0"        ],
        "<android.service.autofill.AutofillFieldClassificationService$AutofillFieldClassificationServiceWrapper: void calculateScores(android.os.RemoteCallback,java.util.List,java.lang.String[],java.lang.String[],java.lang.String,android.os.Bundle,java.util.Map,java.util.Map)>": [
          "p5"        ],
        "<android.service.autofill.AutofillService$1: void onFillRequest(android.service.autofill.FillRequest,android.service.autofill.IFillCallback)>": [
          "p0"        ],
        "<android.service.autofill.AutofillService$1: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.ISaveCallback)>": [
          "p0"        ],
        "<com.android.server.autofill.RemoteAugmentedAutofillService$1$1: void onSuccess(java.util.List,android.os.Bundle,boolean)>": [
          "p1"        ],
        "<android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onFillRequest(int,android.os.IBinder,int,android.content.ComponentName,android.view.autofill.AutofillId,android.view.autofill.AutofillValue,long,android.view.inputmethod.InlineSuggestionsRequest,android.service.autofill.augmented.IFillCallback)>": [
          "p7"        ],
        "<android.service.contentcapture.ContentCaptureService$1: void onActivitySnapshot(int,android.service.contentcapture.SnapshotData)>": [
          "p1"        ],
        "<android.service.contentcapture.ContentCaptureService$1: void onSessionStarted(android.view.contentcapture.ContentCaptureContext,int,int,com.android.internal.os.IResultReceiver,int)>": [
          "p0"        ],
        "<android.service.contentsuggestions.ContentSuggestionsService$1: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>": [
          "p0"        ],
        "<android.service.contentsuggestions.ContentSuggestionsService$1: void notifyInteraction(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<android.service.contentsuggestions.ContentSuggestionsService$1: void provideContextImage(int,android.hardware.HardwareBuffer,int,android.os.Bundle)>": [
          "p3"        ],
        "<android.service.contentsuggestions.ContentSuggestionsService$1: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>": [
          "p0"        ],
        "<android.service.controls.ControlsProviderService$1: void action(java.lang.String,android.service.controls.actions.ControlActionWrapper,android.service.controls.IControlsActionCallback)>": [
          "p1"        ],
        "<android.service.credentials.CredentialProviderService$1: void onBeginCreateCredential(android.service.credentials.BeginCreateCredentialRequest,android.service.credentials.IBeginCreateCredentialCallback)>": [
          "p0"        ],
        "<android.service.credentials.CredentialProviderService$1: void onClearCredentialState(android.service.credentials.ClearCredentialStateRequest,android.service.credentials.IClearCredentialStateCallback)>": [
          "p0"        ],
        "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void downloadSubscription(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.os.Bundle,android.service.euicc.IDownloadSubscriptionCallback)>": [
          "p5"        ],
        "<android.service.search.SearchUiService$1: void onCreateSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId)>": [
          "p0"        ],
        "<android.service.search.SearchUiService$1: void onNotifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>": [
          "p1"        ],
        "<android.service.search.SearchUiService$1: void onQuery(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>": [
          "p1"        ],
        "<android.service.smartspace.SmartspaceService$1: void onCreateSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId)>": [
          "p0"        ],
        "<android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder: void getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int,com.android.internal.textservice.ISpellCheckerServiceCallback)>": [
          "p2"        ],
        "<android.service.voice.VoiceInteractionService$1: void prepareToShowSession(android.os.Bundle,int)>": [
          "p0"        ],
        "<android.service.voice.VoiceInteractionService$1: void showSessionFailed(android.os.Bundle)>": [
          "p0"        ],
        "<android.service.voice.VoiceInteractionSessionService$1: void newSession(android.os.IBinder,android.os.Bundle,int)>": [
          "p1"        ],
        "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)>": [
          "p4"        ],
        "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void initializeDiagnosticCall(android.telecom.ParcelableCall)>": [
          "p0"        ],
        "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void updateCall(android.telecom.ParcelableCall)>": [
          "p0"        ],
        "<android.telecom.CallScreeningService$CallScreeningBinder: void screenCall(com.android.internal.telecom.ICallScreeningAdapter,android.telecom.ParcelableCall)>": [
          "p1"        ],
        "<android.telecom.CallStreamingService$CallStreamingServiceBinder: void onCallStreamingStarted(android.telecom.StreamingCall)>": [
          "p0"        ],
        "<android.telecom.ConnectionServiceAdapterServant$2: void addConferenceCall(java.lang.String,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>": [
          "p1"        ],
        "<android.telecom.ConnectionServiceAdapterServant$2: void addExistingConnection(java.lang.String,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>": [
          "p1"        ],
        "<android.telecom.ConnectionServiceAdapterServant$2: void handleCreateConferenceComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>": [
          "p2"        ],
        "<android.telecom.ConnectionServiceAdapterServant$2: void handleCreateConnectionComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>": [
          "p2"        ],
        "<android.telecom.ConnectionServiceAdapterServant$2: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>": [
          "p2"        ],
        "<android.telecom.ConnectionServiceAdapterServant$2: void putExtras(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>": [
          "p1"        ],
        "<android.telecom.ConnectionService$1: void onExtrasChanged(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>": [
          "p1"        ],
        "<android.telecom.ConnectionService$1: void sendCallEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>": [
          "p2"        ],
        "<android.telecom.InCallService$InCallServiceBinder: void addCall(android.telecom.ParcelableCall)>": [
          "p0"        ],
        "<android.telecom.InCallService$InCallServiceBinder: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p2"        ],
        "<android.telecom.InCallService$InCallServiceBinder: void updateCall(android.telecom.ParcelableCall)>": [
          "p0"        ],
        "<com.android.server.MmsServiceBroker$BinderService: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long,java.lang.String)>": [
          "p4"        ],
        "<com.android.server.MmsServiceBroker$BinderService: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long,java.lang.String)>": [
          "p4"        ],
        "<com.android.server.MmsServiceBroker$BinderService: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>": [
          "p3"        ],
        "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceTransition(int,int,android.location.Location,long,int)>": [
          "p2"        ],
        "<android.location.provider.LocationProviderBase$Service: void sendExtraCommand(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.location.provider.proxy.ProxyLocationProvider$Proxy: void onReportLocation(android.location.Location)>": [
          "p0"        ],
        "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void requestCreateSession(long,java.lang.String,java.lang.String,android.os.Bundle)>": [
          "p3"        ],
        "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void updateDiscoveryPreference(android.media.RouteDiscoveryPreference)>": [
          "p0"        ],
        "<com.android.server.media.MediaRoute2ProviderServiceProxy$ServiceCallbackStub: void notifySessionCreated(long,android.media.RoutingSessionInfo)>": [
          "p1"        ],
        "<com.android.server.media.MediaRoute2ProviderServiceProxy$ServiceCallbackStub: void notifySessionReleased(android.media.RoutingSessionInfo)>": [
          "p0"        ],
        "<android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>": [
          "p0","p1"        ],
        "<com.android.server.musicrecognition.MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>": [
          "p0","p1"        ],
        "<android.media.soundtrigger.SoundTriggerDetectionService$1: void setClient(android.os.ParcelUuid,android.os.Bundle,android.media.soundtrigger.ISoundTriggerDetectionServiceClient)>": [
          "p1"        ],
        "<com.android.server.tv.TvInputManagerService$SessionCallback: void onSessionEvent(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.tv.TvInputManagerService$SessionCallback: void onTvMessage(int,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.tv.TvInputManagerService$ServiceCallback: void addHardwareInput(int,android.media.tv.TvInputInfo)>": [
          "p1"        ],
        "<com.android.server.tv.TvInputManagerService$ServiceCallback: void addHdmiInput(int,android.media.tv.TvInputInfo)>": [
          "p1"        ],
        "<android.media.tv.ITvInputSessionWrapper: void appPrivateCommand(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<android.media.tv.ITvInputSessionWrapper: void notifyTvMessage(int,android.os.Bundle)>": [
          "p1"        ],
        "<android.media.tv.ITvInputSessionWrapper: void pauseRecording(android.os.Bundle)>": [
          "p0"        ],
        "<android.media.tv.ITvInputSessionWrapper: void requestAd(android.media.tv.AdRequest)>": [
          "p0"        ],
        "<android.media.tv.ITvInputSessionWrapper: void resumeRecording(android.os.Bundle)>": [
          "p0"        ],
        "<android.media.tv.ITvInputSessionWrapper: void startRecording(android.net.Uri,android.os.Bundle)>": [
          "p1"        ],
        "<android.media.tv.ITvInputSessionWrapper: void tune(android.net.Uri,android.os.Bundle)>": [
          "p1"        ],
        "<android.media.tv.interactive.TvInteractiveAppService$1: void sendAppLinkCommand(android.os.Bundle)>": [
          "p0"        ],
        "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onAdRequest(android.media.tv.AdRequest)>": [
          "p0"        ],
        "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onCommandRequest(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle)>": [
          "p4"        ],
        "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle)>": [
          "p6"        ],
        "<com.android.server.tv.interactive.TvInteractiveAppManagerService$SessionCallback: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void createBiInteractiveApp(android.net.Uri,android.os.Bundle)>": [
          "p1"        ],
        "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyError(java.lang.String,android.os.Bundle)>": [
          "p1"        ],
        "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTvMessage(int,android.os.Bundle)>": [
          "p1"        ],
}
    },
    "sink": {      "<android.view.IWindowSession: android.os.IBinder performDrag(android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.view.IWindowSession: int relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,int,int,android.window.ClientWindowFrames,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl$Array,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IApplicationThread: void instrumentWithoutRestart(android.content.ComponentName,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,android.content.pm.ApplicationInfo)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean,int,int,int,java.lang.String)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startAbortVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startCommand(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,java.lang.String,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startCompleteVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startConfirmation(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startPickOption(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[],android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.view.accessibility.IAccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: int abandonAudioFocusForTest(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: void addOnDevicesForAttributesChangedListener(android.media.AudioAttributes,android.media.IDevicesForAttributesCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: int requestAudioFocusForTest(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: boolean sendFocusLoss(android.media.AudioFocusInfo,android.media.audiopolicy.IAudioPolicyCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IAudioService: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accessibilityservice.IAccessibilityServiceClient: void startInput(com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,android.view.inputmethod.EditorInfo,boolean)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractorCallback: void deliverAbortVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractorCallback: void deliverCommandResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractorCallback: void deliverCompleteVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractorCallback: void deliverConfirmationResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractorCallback: void deliverPickOptionResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: void addInstrumentationResults(android.app.IApplicationThread,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,long,java.lang.String,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: int bindServiceInstance(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,long,java.lang.String,java.lang.String,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],java.lang.String[],java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: int sendIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.app.IVoiceInteractionManagerService: boolean showSessionForActiveService(android.os.Bundle,int,java.lang.String,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.inputmethod.IInputMethodSession: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.view.IInputMethodManager: com.android.internal.inputmethod.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.inputmethod.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int,int,android.window.ImeOnBackInvokedDispatcher)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.inputmethod.IAccessibilityInputMethodSession: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,boolean,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: int startActivityFromGameSession(android.app.IApplicationThread,java.lang.String,java.lang.String,int,int,android.content.Intent,int,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: void startRecentsActivity(android.content.Intent,long,android.view.IRecentsAnimationRunner)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IActivityTaskManager: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.voice.IVoiceInteractionSession: void show(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.textservice.ITextServicesManager: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.session.ISessionManager: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int,boolean)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.INotificationManager: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.INotificationManager: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.INotificationManager: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.notification.INotificationListener: void onNotificationEnqueuedWithChannel(android.service.notification.IStatusBarNotificationHolder,android.app.NotificationChannel,android.service.notification.NotificationRankingUpdate)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.admin.IDevicePolicyManager: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,long,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.appwidget.IAppWidgetService: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,long)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountAuthenticator: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountAuthenticator: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountAuthenticator: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountAuthenticator: void finishSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountAuthenticator: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountAuthenticator: void startAddAccountSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountAuthenticator: void startUpdateCredentialsSession(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountAuthenticator: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountManager: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountManager: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountManager: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountManager: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountManager: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountManager: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountManager: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.accounts.IAccountManager: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void deselectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void deselectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void selectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void selectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void setDiscoveryRequestWithRouter2(android.media.IMediaRouter2,android.media.RouteDiscoveryPreference)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void setRouteVolumeWithManager(android.media.IMediaRouter2Manager,int,android.media.MediaRoute2Info,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void setRouteVolumeWithRouter2(android.media.IMediaRouter2,android.media.MediaRoute2Info,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void transferToRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.IMediaRouterService: void transferToRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.statusbar.IStatusBarService: void updateMediaTapToTransferSenderDisplay(int,android.media.MediaRoute2Info,com.android.internal.statusbar.IUndoMediaTransferCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.search.ISearchUiManager: void query(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.contentsuggestions.IContentSuggestionsManager: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.app.contentsuggestions.IContentSuggestionsManager: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.content.pm.ICrossProfileApps: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean,android.os.IBinder,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.content.pm.ICrossProfileApps: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.content.pm.ILauncherApps: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.content.pm.ILauncherApps: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.content.pm.ILauncherApps: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.print.IPrintDocumentAdapter: void layout(android.print.PrintAttributes,android.print.PrintAttributes,android.print.ILayoutResultCallback,android.os.Bundle,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.tv.ITvInputManager: android.media.tv.ITvInputHardware acquireTvInputHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int,java.lang.String,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.midi.IMidiManager: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.midi.IMidiManager: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.credentials.ICredentialManager: android.os.ICancellationSignal clearCredentialState(android.credentials.ClearCredentialStateRequest,android.credentials.IClearCredentialStateCallback,java.lang.String)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.credentials.ICredentialManager: android.os.ICancellationSignal executeCreateCredential(android.credentials.CreateCredentialRequest,android.credentials.ICreateCredentialCallback,java.lang.String)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.credentials.ICredentialManager: android.os.ICancellationSignal executeGetCredential(android.credentials.GetCredentialRequest,android.credentials.IGetCredentialCallback,java.lang.String)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.credentials.ICredentialManager: android.os.ICancellationSignal executePrepareGetCredential(android.credentials.GetCredentialRequest,android.credentials.IPrepareGetCredentialCallback,android.credentials.IGetCredentialCallback,java.lang.String)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.backup.IBackupTransport: void clearBackupData(android.content.pm.PackageInfo,com.android.internal.backup.ITransportStatusCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.backup.IBackupTransport: void performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.backup.IBackupTransport: void performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.telephony.ims.aidl.IImsMmTelListener: android.telephony.ims.aidl.IImsCallSessionListener onIncomingCall(com.android.ims.internal.IImsCallSession,java.lang.String,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsUtListener: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.inputmethod.IInputMethod: void onCreateInlineSuggestionsRequest(com.android.internal.inputmethod.InlineSuggestionsRequestInfo,com.android.internal.inputmethod.IInlineSuggestionsRequestCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionHeld(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionHoldReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionResumeReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionResumed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionRttModifyRequestReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionUpdateReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.ims.internal.IImsCallSessionListener: void callSessionUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.media.IMediaBrowserService: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.media.IMediaBrowserService: void connect(java.lang.String,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.autofill.IAutoFillService: void onFillRequest(android.service.autofill.FillRequest,android.service.autofill.IFillCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.autofill.IAutoFillService: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.ISaveCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.autofill.augmented.IAugmentedAutofillService: void onFillRequest(int,android.os.IBinder,int,android.content.ComponentName,android.view.autofill.AutofillId,android.view.autofill.AutofillValue,long,android.view.inputmethod.InlineSuggestionsRequest,android.service.autofill.augmented.IFillCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.contentcapture.IContentCaptureService: void onSessionStarted(android.view.contentcapture.ContentCaptureContext,int,int,com.android.internal.os.IResultReceiver,int)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.contentsuggestions.IContentSuggestionsService: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.contentsuggestions.IContentSuggestionsService: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.controls.IControlsProvider: void action(java.lang.String,android.service.controls.actions.ControlActionWrapper,android.service.controls.IControlsActionCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.credentials.ICredentialProviderService: void onBeginCreateCredential(android.service.credentials.BeginCreateCredentialRequest,android.service.credentials.IBeginCreateCredentialCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.credentials.ICredentialProviderService: void onClearCredentialState(android.service.credentials.ClearCredentialStateRequest,android.service.credentials.IClearCredentialStateCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.euicc.IEuiccService: void downloadSubscription(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.os.Bundle,android.service.euicc.IDownloadSubscriptionCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.service.search.ISearchUiService: void onQuery(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.textservice.ISpellCheckerService: void getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int,com.android.internal.textservice.ISpellCheckerServiceCallback)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<com.android.internal.telecom.ICallScreeningService: void screenCall(com.android.internal.telecom.ICallScreeningAdapter,android.telecom.ParcelableCall)>": {
        "TaintCheck": [
          "p*"
        ]
      },
      "<android.media.soundtrigger.ISoundTriggerDetectionService: void setClient(android.os.ParcelUuid,android.os.Bundle,android.media.soundtrigger.ISoundTriggerDetectionServiceClient)>": {
        "TaintCheck": [
          "p*"
        ]
      }
},
   // "mustTainted": {
   //   "<android.os.Bundle: void remove(java.lang.String)>": {
   //     "TaintCheck": [
   //       "@this"
   //     ]
   //   }
   // }
  }
}
