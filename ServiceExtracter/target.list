<android.view.accessibility.IAccessibilityInteractionConnectionCallback: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)> / <android.view.accessibility.AccessibilityInteractionClient: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)>
<android.os.IMessenger: void send(android.os.Message)> / <android.os.Handler$MessengerImpl: void send(android.os.Message)>
<android.app.IApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)> / <android.app.ActivityThread$ApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)>
<android.app.IApplicationThread: void instrumentWithoutRestart(android.content.ComponentName,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,android.content.pm.ApplicationInfo)> / <android.app.ActivityThread$ApplicationThread: void instrumentWithoutRestart(android.content.ComponentName,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,android.content.pm.ApplicationInfo)>
<android.app.IApplicationThread: void notifyContentProviderPublishStatus(android.app.ContentProviderHolder,java.lang.String,int,boolean)> / <android.app.ActivityThread$ApplicationThread: void notifyContentProviderPublishStatus(android.app.ContentProviderHolder,java.lang.String,int,boolean)>
<android.app.IApplicationThread: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,android.os.RemoteCallback,android.os.RemoteCallback)> / <android.app.ActivityThread$ApplicationThread: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,android.os.RemoteCallback,android.os.RemoteCallback)>
<android.app.IApplicationThread: void scheduleApplicationInfoChanged(android.content.pm.ApplicationInfo)> / <android.app.ActivityThread$ApplicationThread: void scheduleApplicationInfoChanged(android.content.pm.ApplicationInfo)>
<android.app.IApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean,int,long)> / <android.app.ActivityThread$ApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean,int,long)>
<android.app.IApplicationThread: void scheduleCrash(java.lang.String,int,android.os.Bundle)> / <android.app.ActivityThread$ApplicationThread: void scheduleCrash(java.lang.String,int,android.os.Bundle)>
<android.app.IApplicationThread: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,int,int,int)> / <android.app.ActivityThread$ApplicationThread: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,int,int,int)>
<android.app.IApplicationThread: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo,int)> / <android.app.ActivityThread$ApplicationThread: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo,int)>
<android.app.IApplicationThread: void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo,int)> / <android.app.ActivityThread$ApplicationThread: void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo,int)>
<android.app.IApplicationThread: void scheduleInstallProvider(android.content.pm.ProviderInfo)> / <android.app.ActivityThread$ApplicationThread: void scheduleInstallProvider(android.content.pm.ProviderInfo)>
<android.app.IApplicationThread: void scheduleOnNewActivityOptions(android.os.IBinder,android.os.Bundle)> / <android.app.ActivityThread$ApplicationThread: void scheduleOnNewActivityOptions(android.os.IBinder,android.os.Bundle)>
<android.app.IApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,boolean,int,int,int,java.lang.String)> / <android.app.ActivityThread$ApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,boolean,int,int,int,java.lang.String)>
<android.app.IApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean,int,int,int,java.lang.String)> / <android.app.ActivityThread$ApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean,int,int,int,java.lang.String)>
<android.app.IApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)> / <android.app.ActivityThread$ApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>
<android.app.IApplicationThread: void setCoreSettings(android.os.Bundle)> / <android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)>
<android.view.autofill.IAutoFillManagerClient: void authenticate(int,int,android.content.IntentSender,android.content.Intent,boolean)> / <android.view.autofill.AutofillManager$AutofillManagerClient: void authenticate(int,int,android.content.IntentSender,android.content.Intent,boolean)>
<android.view.autofill.IAutoFillManagerClient: void autofillContent(int,android.view.autofill.AutofillId,android.content.ClipData)> / <android.view.autofill.AutofillManager$AutofillManagerClient: void autofillContent(int,android.view.autofill.AutofillId,android.content.ClipData)>
<android.view.autofill.IAutoFillManagerClient: void startIntentSender(android.content.IntentSender,android.content.Intent)> / <android.view.autofill.AutofillManager$AutofillManagerClient: void startIntentSender(android.content.IntentSender,android.content.Intent)>
<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startAbortVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)> / <android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startAbortVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>
<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startCommand(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,java.lang.String,android.os.Bundle)> / <android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startCommand(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,java.lang.String,android.os.Bundle)>
<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startCompleteVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)> / <android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startCompleteVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>
<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startConfirmation(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)> / <android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startConfirmation(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>
<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startPickOption(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)> / <android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startPickOption(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>
<android.content.IIntentSender: void send(int,android.content.Intent,java.lang.String,android.os.IBinder,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)> / <android.content.pm.PackageInstaller$1: void send(int,android.content.Intent,java.lang.String,android.os.IBinder,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[],android.os.Bundle)> / <android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[],android.os.Bundle)>
<android.view.accessibility.IAccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)> / <android.view.ViewRootImpl$AccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)>
<android.accessibilityservice.IAccessibilityServiceClient: void startInput(com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,android.view.inputmethod.EditorInfo,boolean)> / <android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void startInput(com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,android.view.inputmethod.EditorInfo,boolean)>
<com.android.internal.app.IVoiceInteractorCallback: void deliverAbortVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)> / <android.app.VoiceInteractor$2: void deliverAbortVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>
<com.android.internal.app.IVoiceInteractorCallback: void deliverCommandResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)> / <android.app.VoiceInteractor$2: void deliverCommandResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>
<com.android.internal.app.IVoiceInteractorCallback: void deliverCompleteVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)> / <android.app.VoiceInteractor$2: void deliverCompleteVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>
<com.android.internal.app.IVoiceInteractorCallback: void deliverConfirmationResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)> / <android.app.VoiceInteractor$2: void deliverConfirmationResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>
<com.android.internal.app.IVoiceInteractorCallback: void deliverPickOptionResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)> / <android.app.VoiceInteractor$2: void deliverPickOptionResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>
<android.media.session.ISessionControllerCallback: void onEvent(java.lang.String,android.os.Bundle)> / <android.media.session.MediaController$CallbackStub: void onEvent(java.lang.String,android.os.Bundle)>
<android.media.session.ISessionControllerCallback: void onExtrasChanged(android.os.Bundle)> / <android.media.session.MediaController$CallbackStub: void onExtrasChanged(android.os.Bundle)>
<android.media.session.ISessionControllerCallback: void onMetadataChanged(android.media.MediaMetadata)> / <android.media.session.MediaController$CallbackStub: void onMetadataChanged(android.media.MediaMetadata)>
<android.media.session.ISessionControllerCallback: void onPlaybackStateChanged(android.media.session.PlaybackState)> / <android.media.session.MediaController$CallbackStub: void onPlaybackStateChanged(android.media.session.PlaybackState)>
<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusAbandon(android.media.AudioFocusInfo)> / <android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusAbandon(android.media.AudioFocusInfo)>
<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusGrant(android.media.AudioFocusInfo,int)> / <android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusGrant(android.media.AudioFocusInfo,int)>
<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusLoss(android.media.AudioFocusInfo,boolean)> / <android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusLoss(android.media.AudioFocusInfo,boolean)>
<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusRequest(android.media.AudioFocusInfo,int)> / <android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusRequest(android.media.AudioFocusInfo,int)>
<android.media.IDevicesForAttributesCallback: void onDevicesForAttributesChanged(android.media.AudioAttributes,boolean,java.util.List)> / <android.media.AudioManager$IDevicesForAttributesCallbackStub: void onDevicesForAttributesChanged(android.media.AudioAttributes,boolean,java.util.List)>
<android.media.IAudioDeviceVolumeDispatcher: void dispatchDeviceVolumeAdjusted(android.media.AudioDeviceAttributes,android.media.VolumeInfo,int,int)> / <android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub: void dispatchDeviceVolumeAdjusted(android.media.AudioDeviceAttributes,android.media.VolumeInfo,int,int)>
<android.media.IAudioDeviceVolumeDispatcher: void dispatchDeviceVolumeChanged(android.media.AudioDeviceAttributes,android.media.VolumeInfo)> / <android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub: void dispatchDeviceVolumeChanged(android.media.AudioDeviceAttributes,android.media.VolumeInfo)>
<android.media.IPreferredMixerAttributesDispatcher: void dispatchPrefMixerAttributesChanged(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)> / <android.media.AudioManager$PreferredMixerAttributesDispatcherStub: void dispatchPrefMixerAttributesChanged(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>
<com.android.internal.inputmethod.IInputMethodSession: void appPrivateCommand(java.lang.String,android.os.Bundle)> / <android.inputmethodservice.IInputMethodSessionWrapper: void appPrivateCommand(java.lang.String,android.os.Bundle)>
<com.android.internal.inputmethod.IInputMethodSession: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,int)> / <android.inputmethodservice.IInputMethodSessionWrapper: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,int)>
<com.android.internal.inputmethod.IAccessibilityInputMethodSession: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int)> / <android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int)>
<android.service.voice.IVoiceInteractionSession: void handleAssist(int,android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)> / <android.service.voice.VoiceInteractionSession$2: void handleAssist(int,android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)>
<android.service.voice.IVoiceInteractionSession: void show(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback)> / <android.service.voice.VoiceInteractionSession$2: void show(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback)>
<android.service.voice.IVoiceInteractionSession: void taskFinished(android.content.Intent,int)> / <android.service.voice.VoiceInteractionSession$2: void taskFinished(android.content.Intent,int)>
<android.service.voice.IVoiceInteractionSession: void taskStarted(android.content.Intent,int)> / <android.service.voice.VoiceInteractionSession$2: void taskStarted(android.content.Intent,int)>
<com.android.internal.inputmethod.IRemoteInputConnection: void commitContent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.InputContentInfo,int,android.os.Bundle,com.android.internal.infra.AndroidFuture)> / <android.view.inputmethod.RemoteInputConnectionImpl: void commitContent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.InputContentInfo,int,android.os.Bundle,com.android.internal.infra.AndroidFuture)>
<com.android.internal.inputmethod.IRemoteInputConnection: void performPrivateCommand(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.String,android.os.Bundle)> / <android.view.inputmethod.RemoteInputConnectionImpl: void performPrivateCommand(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.String,android.os.Bundle)>
<android.content.pm.IPackageDeleteObserver2: void onUserActionRequired(android.content.Intent)> / <android.app.PackageDeleteObserver$1: void onUserActionRequired(android.content.Intent)>
<android.content.pm.IPackageMoveObserver: void onCreated(int,android.os.Bundle)> / <android.app.ApplicationPackageManager$MoveCallbackDelegate: void onCreated(int,android.os.Bundle)>
<android.companion.virtual.IVirtualDeviceIntentInterceptor: void onIntentIntercepted(android.content.Intent)> / <android.companion.virtual.VirtualDeviceInternal$IntentInterceptorDelegate: void onIntentIntercepted(android.content.Intent)>
<android.media.session.ISessionCallback: void onCommand(java.lang.String,int,int,java.lang.String,android.os.Bundle,android.os.ResultReceiver)> / <android.media.session.MediaSession$CallbackStub: void onCommand(java.lang.String,int,int,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>
<android.media.session.ISessionCallback: void onCustomAction(java.lang.String,int,int,java.lang.String,android.os.Bundle)> / <android.media.session.MediaSession$CallbackStub: void onCustomAction(java.lang.String,int,int,java.lang.String,android.os.Bundle)>
<android.media.session.ISessionCallback: void onMediaButton(java.lang.String,int,int,android.content.Intent,int,android.os.ResultReceiver)> / <android.media.session.MediaSession$CallbackStub: void onMediaButton(java.lang.String,int,int,android.content.Intent,int,android.os.ResultReceiver)>
<android.media.session.ISessionCallback: void onMediaButtonFromController(java.lang.String,int,int,android.content.Intent)> / <android.media.session.MediaSession$CallbackStub: void onMediaButtonFromController(java.lang.String,int,int,android.content.Intent)>
<android.media.session.ISessionCallback: void onPlayFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)> / <android.media.session.MediaSession$CallbackStub: void onPlayFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>
<android.media.session.ISessionCallback: void onPlayFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)> / <android.media.session.MediaSession$CallbackStub: void onPlayFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>
<android.media.session.ISessionCallback: void onPlayFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)> / <android.media.session.MediaSession$CallbackStub: void onPlayFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>
<android.media.session.ISessionCallback: void onPrepareFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)> / <android.media.session.MediaSession$CallbackStub: void onPrepareFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>
<android.media.session.ISessionCallback: void onPrepareFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)> / <android.media.session.MediaSession$CallbackStub: void onPrepareFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>
<android.media.session.ISessionCallback: void onPrepareFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)> / <android.media.session.MediaSession$CallbackStub: void onPrepareFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>
<android.service.notification.INotificationListener: void onActionClicked(java.lang.String,android.app.Notification$Action,int)> / <android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onActionClicked(java.lang.String,android.app.Notification$Action,int)>
<android.service.notification.INotificationListener: void onNotificationChannelModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)> / <android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationChannelModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)>
<android.service.notification.INotificationListener: void onNotificationEnqueuedWithChannel(android.service.notification.IStatusBarNotificationHolder,android.app.NotificationChannel,android.service.notification.NotificationRankingUpdate)> / <android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationEnqueuedWithChannel(android.service.notification.IStatusBarNotificationHolder,android.app.NotificationChannel,android.service.notification.NotificationRankingUpdate)>
<android.service.notification.INotificationListener: void onNotificationFeedbackReceived(java.lang.String,android.service.notification.NotificationRankingUpdate,android.os.Bundle)> / <android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationFeedbackReceived(java.lang.String,android.service.notification.NotificationRankingUpdate,android.os.Bundle)>
<com.android.internal.widget.IRemoteViewsFactory: void onDestroy(android.content.Intent)> / <android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDestroy(android.content.Intent)>
<com.android.internal.appwidget.IAppWidgetHost: void updateAppWidget(int,android.widget.RemoteViews)> / <android.appwidget.AppWidgetHost$Callbacks: void updateAppWidget(int,android.widget.RemoteViews)>
<android.accounts.IAccountAuthenticator: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> / <android.accounts.AbstractAccountAuthenticator$Transport: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.accounts.IAccountAuthenticator: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> / <android.accounts.AbstractAccountAuthenticator$Transport: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>
<android.accounts.IAccountAuthenticator: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> / <android.accounts.AbstractAccountAuthenticator$Transport: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>
<android.accounts.IAccountAuthenticator: void finishSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,android.os.Bundle)> / <android.accounts.AbstractAccountAuthenticator$Transport: void finishSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,android.os.Bundle)>
<android.accounts.IAccountAuthenticator: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> / <android.accounts.AbstractAccountAuthenticator$Transport: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.IAccountAuthenticator: void startAddAccountSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> / <android.accounts.AbstractAccountAuthenticator$Transport: void startAddAccountSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.accounts.IAccountAuthenticator: void startUpdateCredentialsSession(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> / <android.accounts.AbstractAccountAuthenticator$Transport: void startUpdateCredentialsSession(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.IAccountAuthenticator: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> / <android.accounts.AbstractAccountAuthenticator$Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.app.IUnsafeIntentStrictModeCallback: void onImplicitIntentMatchedInternalComponent(android.content.Intent)> / <android.os.StrictMode$UnsafeIntentStrictModeCallback: void onImplicitIntentMatchedInternalComponent(android.content.Intent)>
<android.app.backup.IBackupManagerMonitor: void onEvent(android.os.Bundle)> / <android.app.backup.BackupManagerMonitorWrapper: void onEvent(android.os.Bundle)>
<android.media.IMediaRouter2Manager: void notifyDiscoveryPreferenceChanged(java.lang.String,android.media.RouteDiscoveryPreference)> / <android.media.MediaRouter2Manager$Client: void notifyDiscoveryPreferenceChanged(java.lang.String,android.media.RouteDiscoveryPreference)>
<android.media.IMediaRouter2Manager: void notifySessionCreated(int,android.media.RoutingSessionInfo)> / <android.media.MediaRouter2Manager$Client: void notifySessionCreated(int,android.media.RoutingSessionInfo)>
<android.media.IMediaRouter2Manager: void notifySessionReleased(android.media.RoutingSessionInfo)> / <android.media.MediaRouter2Manager$Client: void notifySessionReleased(android.media.RoutingSessionInfo)>
<android.media.IMediaRouter2Manager: void notifySessionUpdated(android.media.RoutingSessionInfo)> / <android.media.MediaRouter2Manager$Client: void notifySessionUpdated(android.media.RoutingSessionInfo)>
<android.media.IMediaRouter2: void notifyRouterRegistered(java.util.List,android.media.RoutingSessionInfo)> / <android.media.MediaRouter2$MediaRouter2Stub: void notifyRouterRegistered(java.util.List,android.media.RoutingSessionInfo)>
<android.media.IMediaRouter2: void notifySessionCreated(int,android.media.RoutingSessionInfo)> / <android.media.MediaRouter2$MediaRouter2Stub: void notifySessionCreated(int,android.media.RoutingSessionInfo)>
<android.media.IMediaRouter2: void notifySessionInfoChanged(android.media.RoutingSessionInfo)> / <android.media.MediaRouter2$MediaRouter2Stub: void notifySessionInfoChanged(android.media.RoutingSessionInfo)>
<android.media.IMediaRouter2: void notifySessionReleased(android.media.RoutingSessionInfo)> / <android.media.MediaRouter2$MediaRouter2Stub: void notifySessionReleased(android.media.RoutingSessionInfo)>
<android.media.IMediaRouter2: void requestCreateSessionByManager(long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)> / <android.media.MediaRouter2$MediaRouter2Stub: void requestCreateSessionByManager(long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>
<android.content.pm.IPackageInstallObserver2: void onPackageInstalled(java.lang.String,int,java.lang.String,android.os.Bundle)> / <android.app.PackageInstallObserver$1: void onPackageInstalled(java.lang.String,int,java.lang.String,android.os.Bundle)>
<android.content.pm.IPackageInstallObserver2: void onUserActionRequired(android.content.Intent)> / <android.app.PackageInstallObserver$1: void onUserActionRequired(android.content.Intent)>
<android.permission.IPermissionController: void revokeRuntimePermissions(android.os.Bundle,boolean,int,java.lang.String,com.android.internal.infra.AndroidFuture)> / <android.permission.PermissionControllerService$1: void revokeRuntimePermissions(android.os.Bundle,boolean,int,java.lang.String,com.android.internal.infra.AndroidFuture)>
<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void connectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)> / <android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void connectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>
<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void connectKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)> / <android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void connectKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>
<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void disconnectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)> / <android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void disconnectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>
<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void forgetKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)> / <android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void forgetKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>
<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onHotspotNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus)> / <android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onHotspotNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus)>
<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onKnownNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus)> / <android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onKnownNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus)>
<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onSharedConnectivitySettingsChanged(android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState)> / <android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onSharedConnectivitySettingsChanged(android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState)>
<android.location.ILocationCallback: void onLocation(android.location.Location)> / <android.location.LocationManager$GetCurrentLocationTransport: void onLocation(android.location.Location)>
<com.android.internal.telecom.ICallEventCallback: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)> / <com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.pm.IOnAppsChangedListener: void onPackagesSuspended(android.os.UserHandle,java.lang.String[],android.os.Bundle)> / <android.content.pm.LauncherApps$1: void onPackagesSuspended(android.os.UserHandle,java.lang.String[],android.os.Bundle)>
<android.print.IPrintDocumentAdapter: void layout(android.print.PrintAttributes,android.print.PrintAttributes,android.print.ILayoutResultCallback,android.os.Bundle,int)> / <android.print.PrintManager$PrintDocumentAdapterDelegate: void layout(android.print.PrintAttributes,android.print.PrintAttributes,android.print.ILayoutResultCallback,android.os.Bundle,int)>
<android.media.tv.interactive.ITvInteractiveAppClient: void onAdRequest(android.media.tv.AdRequest,int)> / <android.media.tv.interactive.TvInteractiveAppManager$1: void onAdRequest(android.media.tv.AdRequest,int)>
<android.media.tv.interactive.ITvInteractiveAppClient: void onCommandRequest(java.lang.String,android.os.Bundle,int)> / <android.media.tv.interactive.TvInteractiveAppManager$1: void onCommandRequest(java.lang.String,android.os.Bundle,int)>
<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle,int)> / <android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle,int)>
<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle,int)> / <android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle,int)>
<android.media.tv.interactive.ITvInteractiveAppClient: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle,int)> / <android.media.tv.interactive.TvInteractiveAppManager$1: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle,int)>
<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onTvInteractiveAppServiceInfoUpdated(android.media.tv.interactive.TvInteractiveAppServiceInfo)> / <android.media.tv.interactive.TvInteractiveAppManager$2: void onTvInteractiveAppServiceInfoUpdated(android.media.tv.interactive.TvInteractiveAppServiceInfo)>
<android.media.tv.ITvInputClient: void onSessionEvent(java.lang.String,android.os.Bundle,int)> / <android.media.tv.TvInputManager$1: void onSessionEvent(java.lang.String,android.os.Bundle,int)>
<android.media.tv.ITvInputClient: void onTvMessage(int,android.os.Bundle,int)> / <android.media.tv.TvInputManager$1: void onTvMessage(int,android.os.Bundle,int)>
<android.media.tv.ITvInputManagerCallback: void onTvInputInfoUpdated(android.media.tv.TvInputInfo)> / <android.media.tv.TvInputManager$2: void onTvInputInfoUpdated(android.media.tv.TvInputInfo)>
<android.media.midi.IMidiDeviceServer: void setDeviceInfo(android.media.midi.MidiDeviceInfo)> / <android.media.midi.MidiDeviceServer$1: void setDeviceInfo(android.media.midi.MidiDeviceInfo)>
<android.media.midi.IMidiDeviceListener: void onDeviceAdded(android.media.midi.MidiDeviceInfo)> / <android.media.midi.MidiManager$DeviceListener: void onDeviceAdded(android.media.midi.MidiDeviceInfo)>
<android.media.midi.IMidiDeviceListener: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)> / <android.media.midi.MidiManager$DeviceListener: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)>
<android.credentials.ICreateCredentialCallback: void onResponse(android.credentials.CreateCredentialResponse)> / <android.credentials.CredentialManager$CreateCredentialTransport: void onResponse(android.credentials.CreateCredentialResponse)>
<com.android.internal.backup.IBackupTransport: void clearBackupData(android.content.pm.PackageInfo,com.android.internal.backup.ITransportStatusCallback)> / <android.app.backup.BackupTransport$TransportImpl: void clearBackupData(android.content.pm.PackageInfo,com.android.internal.backup.ITransportStatusCallback)>
<com.android.internal.backup.IBackupTransport: void isAppEligibleForBackup(android.content.pm.PackageInfo,boolean,com.android.internal.infra.AndroidFuture)> / <android.app.backup.BackupTransport$TransportImpl: void isAppEligibleForBackup(android.content.pm.PackageInfo,boolean,com.android.internal.infra.AndroidFuture)>
<com.android.internal.backup.IBackupTransport: void performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)> / <android.app.backup.BackupTransport$TransportImpl: void performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>
<com.android.internal.backup.IBackupTransport: void performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)> / <android.app.backup.BackupTransport$TransportImpl: void performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>
<android.app.job.IJobService: void getTransferredDownloadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)> / <android.app.job.JobServiceEngine$JobInterface: void getTransferredDownloadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>
<android.app.job.IJobService: void getTransferredUploadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)> / <android.app.job.JobServiceEngine$JobInterface: void getTransferredUploadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>
<android.app.job.IJobService: void onNetworkChanged(android.app.job.JobParameters)> / <android.app.job.JobServiceEngine$JobInterface: void onNetworkChanged(android.app.job.JobParameters)>
<android.app.job.IJobService: void startJob(android.app.job.JobParameters)> / <android.app.job.JobServiceEngine$JobInterface: void startJob(android.app.job.JobParameters)>
<android.app.job.IJobService: void stopJob(android.app.job.JobParameters)> / <android.app.job.JobServiceEngine$JobInterface: void stopJob(android.app.job.JobParameters)>
<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> / <android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>
<android.telephony.ims.aidl.IImsMmTelFeature: com.android.ims.internal.IImsCallSession createCallSession(android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsCallSession createCallSession(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsMmTelFeature: void setUiTtyMode(int,android.os.Message)> / <android.telephony.ims.feature.MmTelFeature$1: void setUiTtyMode(int,android.os.Message)>
<android.telephony.ims.aidl.IImsMmTelListener: android.telephony.ims.aidl.IImsCallSessionListener onIncomingCall(com.android.ims.internal.IImsCallSession,java.lang.String,android.os.Bundle)> / <android.telephony.ims.feature.MmTelFeature$Listener: android.telephony.ims.aidl.IImsCallSessionListener onIncomingCall(com.android.ims.internal.IImsCallSession,java.lang.String,android.os.Bundle)>
<android.telephony.ims.aidl.IImsMmTelListener: void onRejectedCall(android.telephony.ims.ImsCallProfile,android.telephony.ims.ImsReasonInfo)> / <android.telephony.ims.feature.MmTelFeature$Listener: void onRejectedCall(android.telephony.ims.ImsCallProfile,android.telephony.ims.ImsReasonInfo)>
<com.android.ims.internal.IImsUt: int transact(android.os.Bundle)> / <android.telephony.ims.stub.ImsUtImplBase$1: int transact(android.os.Bundle)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHeld(android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHeld(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHoldReceived(android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHoldReceived(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiated(android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiated(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiating(android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiating(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumeReceived(android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumeReceived(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumed(android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumed(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdateReceived(android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdateReceived(android.telephony.ims.ImsCallProfile)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdated(android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdated(android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsUtListener: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)> / <android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)>
<com.android.internal.inputmethod.IInputMethod: void onCreateInlineSuggestionsRequest(com.android.internal.inputmethod.InlineSuggestionsRequestInfo,com.android.internal.inputmethod.IInlineSuggestionsRequestCallback)> / <android.inputmethodservice.IInputMethodWrapper: void onCreateInlineSuggestionsRequest(com.android.internal.inputmethod.InlineSuggestionsRequestInfo,com.android.internal.inputmethod.IInlineSuggestionsRequestCallback)>
<android.service.textclassifier.ITextClassifierCallback: void onSuccess(android.os.Bundle)> / <android.view.textclassifier.SystemTextClassifier$BlockingCallback: void onSuccess(android.os.Bundle)>
<android.service.textclassifier.ITextClassifierService: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)> / <android.service.textclassifier.TextClassifierService$1: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.service.textclassifier.ITextClassifierService: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)> / <android.service.textclassifier.TextClassifierService$1: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.service.textclassifier.ITextClassifierService: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)> / <android.service.textclassifier.TextClassifierService$1: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.service.textclassifier.ITextClassifierService: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)> / <android.service.textclassifier.TextClassifierService$1: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.service.textclassifier.ITextClassifierService: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)> / <android.service.textclassifier.TextClassifierService$1: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.speech.tts.ITextToSpeechService: int playAudio(android.os.IBinder,android.net.Uri,int,android.os.Bundle,java.lang.String)> / <android.speech.tts.TextToSpeechService$1: int playAudio(android.os.IBinder,android.net.Uri,int,android.os.Bundle,java.lang.String)>
<android.speech.tts.ITextToSpeechService: int speak(android.os.IBinder,java.lang.CharSequence,int,android.os.Bundle,java.lang.String)> / <android.speech.tts.TextToSpeechService$1: int speak(android.os.IBinder,java.lang.CharSequence,int,android.os.Bundle,java.lang.String)>
<android.speech.tts.ITextToSpeechService: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.CharSequence,android.os.ParcelFileDescriptor,android.os.Bundle,java.lang.String)> / <android.speech.tts.TextToSpeechService$1: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.CharSequence,android.os.ParcelFileDescriptor,android.os.Bundle,java.lang.String)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionHeld(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHeld(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionHoldReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHoldReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionResumeReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumeReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionResumed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionRttModifyRequestReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttModifyRequestReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionUpdateReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdateReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsCallSessionListener: void callSessionUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsCallSession createCallSession(int,android.telephony.ims.ImsCallProfile)> / <android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsCallSession createCallSession(int,android.telephony.ims.ImsCallProfile)>
<com.android.ims.internal.IImsMMTelFeature: void setUiTTYMode(int,android.os.Message)> / <android.telephony.ims.compat.feature.MMTelFeature$1: void setUiTTYMode(int,android.os.Message)>
<android.service.media.IMediaBrowserService: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)> / <android.service.media.MediaBrowserService$ServiceBinder: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>
<android.service.media.IMediaBrowserService: void connect(java.lang.String,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)> / <android.service.media.MediaBrowserService$ServiceBinder: void connect(java.lang.String,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>
<android.service.media.IMediaBrowserServiceCallbacks: void onConnect(java.lang.String,android.media.session.MediaSession$Token,android.os.Bundle)> / <android.media.browse.MediaBrowser$ServiceCallbacks: void onConnect(java.lang.String,android.media.session.MediaSession$Token,android.os.Bundle)>
<android.service.media.IMediaBrowserServiceCallbacks: void onLoadChildren(java.lang.String,android.content.pm.ParceledListSlice,android.os.Bundle)> / <android.media.browse.MediaBrowser$ServiceCallbacks: void onLoadChildren(java.lang.String,android.content.pm.ParceledListSlice,android.os.Bundle)>
<android.printservice.IPrintService: void onPrintJobQueued(android.print.PrintJobInfo)> / <android.printservice.PrintService$1: void onPrintJobQueued(android.print.PrintJobInfo)>
<android.printservice.IPrintService: void requestCancelPrintJob(android.print.PrintJobInfo)> / <android.printservice.PrintService$1: void requestCancelPrintJob(android.print.PrintJobInfo)>
<android.service.appprediction.IPredictionService: void onCreatePredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId)> / <android.service.appprediction.AppPredictionService$1: void onCreatePredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId)>
<android.service.autofill.IAutofillFieldClassificationService: void calculateScores(android.os.RemoteCallback,java.util.List,java.lang.String[],java.lang.String[],java.lang.String,android.os.Bundle,java.util.Map,java.util.Map)> / <android.service.autofill.AutofillFieldClassificationService$AutofillFieldClassificationServiceWrapper: void calculateScores(android.os.RemoteCallback,java.util.List,java.lang.String[],java.lang.String[],java.lang.String,android.os.Bundle,java.util.Map,java.util.Map)>
<android.service.autofill.IAutoFillService: void onFillRequest(android.service.autofill.FillRequest,android.service.autofill.IFillCallback)> / <android.service.autofill.AutofillService$1: void onFillRequest(android.service.autofill.FillRequest,android.service.autofill.IFillCallback)>
<android.service.autofill.IAutoFillService: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.ISaveCallback)> / <android.service.autofill.AutofillService$1: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.ISaveCallback)>
<android.service.autofill.augmented.IAugmentedAutofillService: void onFillRequest(int,android.os.IBinder,int,android.content.ComponentName,android.view.autofill.AutofillId,android.view.autofill.AutofillValue,long,android.view.inputmethod.InlineSuggestionsRequest,android.service.autofill.augmented.IFillCallback)> / <android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onFillRequest(int,android.os.IBinder,int,android.content.ComponentName,android.view.autofill.AutofillId,android.view.autofill.AutofillValue,long,android.view.inputmethod.InlineSuggestionsRequest,android.service.autofill.augmented.IFillCallback)>
<android.service.contentcapture.IContentCaptureService: void onActivitySnapshot(int,android.service.contentcapture.SnapshotData)> / <android.service.contentcapture.ContentCaptureService$1: void onActivitySnapshot(int,android.service.contentcapture.SnapshotData)>
<android.service.contentcapture.IContentCaptureService: void onSessionStarted(android.view.contentcapture.ContentCaptureContext,int,int,com.android.internal.os.IResultReceiver,int)> / <android.service.contentcapture.ContentCaptureService$1: void onSessionStarted(android.view.contentcapture.ContentCaptureContext,int,int,com.android.internal.os.IResultReceiver,int)>
<android.service.contentsuggestions.IContentSuggestionsService: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)> / <android.service.contentsuggestions.ContentSuggestionsService$1: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
<android.service.contentsuggestions.IContentSuggestionsService: void notifyInteraction(java.lang.String,android.os.Bundle)> / <android.service.contentsuggestions.ContentSuggestionsService$1: void notifyInteraction(java.lang.String,android.os.Bundle)>
<android.service.contentsuggestions.IContentSuggestionsService: void provideContextImage(int,android.hardware.HardwareBuffer,int,android.os.Bundle)> / <android.service.contentsuggestions.ContentSuggestionsService$1: void provideContextImage(int,android.hardware.HardwareBuffer,int,android.os.Bundle)>
<android.service.contentsuggestions.IContentSuggestionsService: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)> / <android.service.contentsuggestions.ContentSuggestionsService$1: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>
<android.service.controls.IControlsProvider: void action(java.lang.String,android.service.controls.actions.ControlActionWrapper,android.service.controls.IControlsActionCallback)> / <android.service.controls.ControlsProviderService$1: void action(java.lang.String,android.service.controls.actions.ControlActionWrapper,android.service.controls.IControlsActionCallback)>
<android.service.credentials.ICredentialProviderService: void onBeginCreateCredential(android.service.credentials.BeginCreateCredentialRequest,android.service.credentials.IBeginCreateCredentialCallback)> / <android.service.credentials.CredentialProviderService$1: void onBeginCreateCredential(android.service.credentials.BeginCreateCredentialRequest,android.service.credentials.IBeginCreateCredentialCallback)>
<android.service.credentials.ICredentialProviderService: void onClearCredentialState(android.service.credentials.ClearCredentialStateRequest,android.service.credentials.IClearCredentialStateCallback)> / <android.service.credentials.CredentialProviderService$1: void onClearCredentialState(android.service.credentials.ClearCredentialStateRequest,android.service.credentials.IClearCredentialStateCallback)>
<android.service.euicc.IEuiccService: void downloadSubscription(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.os.Bundle,android.service.euicc.IDownloadSubscriptionCallback)> / <android.service.euicc.EuiccService$IEuiccServiceWrapper: void downloadSubscription(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.os.Bundle,android.service.euicc.IDownloadSubscriptionCallback)>
<android.service.search.ISearchUiService: void onCreateSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId)> / <android.service.search.SearchUiService$1: void onCreateSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId)>
<android.service.search.ISearchUiService: void onNotifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)> / <android.service.search.SearchUiService$1: void onNotifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>
<android.service.search.ISearchUiService: void onQuery(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)> / <android.service.search.SearchUiService$1: void onQuery(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>
<android.service.smartspace.ISmartspaceService: void onCreateSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId)> / <android.service.smartspace.SmartspaceService$1: void onCreateSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId)>
<com.android.internal.textservice.ISpellCheckerService: void getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int,com.android.internal.textservice.ISpellCheckerServiceCallback)> / <android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder: void getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int,com.android.internal.textservice.ISpellCheckerServiceCallback)>
<android.speech.IRecognitionService: void checkRecognitionSupport(android.content.Intent,android.content.AttributionSource,android.speech.IRecognitionSupportCallback)> / <android.speech.RecognitionService$RecognitionServiceBinder: void checkRecognitionSupport(android.content.Intent,android.content.AttributionSource,android.speech.IRecognitionSupportCallback)>
<android.speech.IRecognitionService: void startListening(android.content.Intent,android.speech.IRecognitionListener,android.content.AttributionSource)> / <android.speech.RecognitionService$RecognitionServiceBinder: void startListening(android.content.Intent,android.speech.IRecognitionListener,android.content.AttributionSource)>
<android.speech.IRecognitionService: void triggerModelDownload(android.content.Intent,android.content.AttributionSource,android.speech.IModelDownloadListener)> / <android.speech.RecognitionService$RecognitionServiceBinder: void triggerModelDownload(android.content.Intent,android.content.AttributionSource,android.speech.IModelDownloadListener)>
<android.speech.IRecognitionListener: void onEvent(int,android.os.Bundle)> / <android.speech.SpeechRecognizer$InternalRecognitionListener: void onEvent(int,android.os.Bundle)>
<android.speech.IRecognitionListener: void onLanguageDetection(android.os.Bundle)> / <android.speech.SpeechRecognizer$InternalRecognitionListener: void onLanguageDetection(android.os.Bundle)>
<android.speech.IRecognitionListener: void onPartialResults(android.os.Bundle)> / <android.speech.SpeechRecognizer$InternalRecognitionListener: void onPartialResults(android.os.Bundle)>
<android.speech.IRecognitionListener: void onReadyForSpeech(android.os.Bundle)> / <android.speech.SpeechRecognizer$InternalRecognitionListener: void onReadyForSpeech(android.os.Bundle)>
<android.speech.IRecognitionListener: void onResults(android.os.Bundle)> / <android.speech.SpeechRecognizer$InternalRecognitionListener: void onResults(android.os.Bundle)>
<android.speech.IRecognitionListener: void onSegmentResults(android.os.Bundle)> / <android.speech.SpeechRecognizer$InternalRecognitionListener: void onSegmentResults(android.os.Bundle)>
<android.service.voice.IVoiceInteractionService: void prepareToShowSession(android.os.Bundle,int)> / <android.service.voice.VoiceInteractionService$1: void prepareToShowSession(android.os.Bundle,int)>
<android.service.voice.IVoiceInteractionService: void showSessionFailed(android.os.Bundle)> / <android.service.voice.VoiceInteractionService$1: void showSessionFailed(android.os.Bundle)>
<android.service.voice.IVoiceInteractionSessionService: void newSession(android.os.IBinder,android.os.Bundle,int)> / <android.service.voice.VoiceInteractionSessionService$1: void newSession(android.os.IBinder,android.os.Bundle,int)>
<android.service.wallpaper.IWallpaperEngine: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)> / <android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)>
<com.android.internal.telecom.ICallDiagnosticService: void initializeDiagnosticCall(android.telecom.ParcelableCall)> / <android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void initializeDiagnosticCall(android.telecom.ParcelableCall)>
<com.android.internal.telecom.ICallDiagnosticService: void updateCall(android.telecom.ParcelableCall)> / <android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void updateCall(android.telecom.ParcelableCall)>
<com.android.internal.telecom.ICallScreeningService: void screenCall(com.android.internal.telecom.ICallScreeningAdapter,android.telecom.ParcelableCall)> / <android.telecom.CallScreeningService$CallScreeningBinder: void screenCall(com.android.internal.telecom.ICallScreeningAdapter,android.telecom.ParcelableCall)>
<com.android.internal.telecom.ICallStreamingService: void onCallStreamingStarted(android.telecom.StreamingCall)> / <android.telecom.CallStreamingService$CallStreamingServiceBinder: void onCallStreamingStarted(android.telecom.StreamingCall)>
<com.android.internal.telecom.IConnectionServiceAdapter: void addConferenceCall(java.lang.String,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)> / <android.telecom.ConnectionServiceAdapterServant$2: void addConferenceCall(java.lang.String,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>
<com.android.internal.telecom.IConnectionServiceAdapter: void addExistingConnection(java.lang.String,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)> / <android.telecom.ConnectionServiceAdapterServant$2: void addExistingConnection(java.lang.String,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>
<com.android.internal.telecom.IConnectionServiceAdapter: void handleCreateConferenceComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)> / <android.telecom.ConnectionServiceAdapterServant$2: void handleCreateConferenceComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>
<com.android.internal.telecom.IConnectionServiceAdapter: void handleCreateConnectionComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)> / <android.telecom.ConnectionServiceAdapterServant$2: void handleCreateConnectionComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>
<com.android.internal.telecom.IConnectionServiceAdapter: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)> / <android.telecom.ConnectionServiceAdapterServant$2: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>
<com.android.internal.telecom.IConnectionServiceAdapter: void putExtras(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)> / <android.telecom.ConnectionServiceAdapterServant$2: void putExtras(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>
<com.android.internal.telecom.IConnectionService: void onExtrasChanged(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)> / <android.telecom.ConnectionService$1: void onExtrasChanged(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>
<com.android.internal.telecom.IConnectionService: void sendCallEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)> / <android.telecom.ConnectionService$1: void sendCallEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>
<com.android.internal.telecom.IInCallService: void addCall(android.telecom.ParcelableCall)> / <android.telecom.InCallService$InCallServiceBinder: void addCall(android.telecom.ParcelableCall)>
<com.android.internal.telecom.IInCallService: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle)> / <android.telecom.InCallService$InCallServiceBinder: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle)>
<com.android.internal.telecom.IInCallService: void updateCall(android.telecom.ParcelableCall)> / <android.telecom.InCallService$InCallServiceBinder: void updateCall(android.telecom.ParcelableCall)>
<android.hardware.location.IGeofenceHardwareCallback: void onGeofenceTransition(int,int,android.location.Location,long,int)> / <android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceTransition(int,int,android.location.Location,long,int)>
<android.location.provider.ILocationProvider: void sendExtraCommand(java.lang.String,android.os.Bundle)> / <android.location.provider.LocationProviderBase$Service: void sendExtraCommand(java.lang.String,android.os.Bundle)>
<android.media.IMediaRoute2ProviderService: void requestCreateSession(long,java.lang.String,java.lang.String,android.os.Bundle)> / <android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void requestCreateSession(long,java.lang.String,java.lang.String,android.os.Bundle)>
<android.media.IMediaRoute2ProviderService: void updateDiscoveryPreference(android.media.RouteDiscoveryPreference)> / <android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void updateDiscoveryPreference(android.media.RouteDiscoveryPreference)>
<android.media.musicrecognition.IMusicRecognitionManagerCallback: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)> / <android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>
<android.media.soundtrigger.ISoundTriggerDetectionService: void setClient(android.os.ParcelUuid,android.os.Bundle,android.media.soundtrigger.ISoundTriggerDetectionServiceClient)> / <android.media.soundtrigger.SoundTriggerDetectionService$1: void setClient(android.os.ParcelUuid,android.os.Bundle,android.media.soundtrigger.ISoundTriggerDetectionServiceClient)>
<android.media.tv.ITvInputSession: void appPrivateCommand(java.lang.String,android.os.Bundle)> / <android.media.tv.ITvInputSessionWrapper: void appPrivateCommand(java.lang.String,android.os.Bundle)>
<android.media.tv.ITvInputSession: void notifyTvMessage(int,android.os.Bundle)> / <android.media.tv.ITvInputSessionWrapper: void notifyTvMessage(int,android.os.Bundle)>
<android.media.tv.ITvInputSession: void pauseRecording(android.os.Bundle)> / <android.media.tv.ITvInputSessionWrapper: void pauseRecording(android.os.Bundle)>
<android.media.tv.ITvInputSession: void requestAd(android.media.tv.AdRequest)> / <android.media.tv.ITvInputSessionWrapper: void requestAd(android.media.tv.AdRequest)>
<android.media.tv.ITvInputSession: void resumeRecording(android.os.Bundle)> / <android.media.tv.ITvInputSessionWrapper: void resumeRecording(android.os.Bundle)>
<android.media.tv.ITvInputSession: void startRecording(android.net.Uri,android.os.Bundle)> / <android.media.tv.ITvInputSessionWrapper: void startRecording(android.net.Uri,android.os.Bundle)>
<android.media.tv.ITvInputSession: void tune(android.net.Uri,android.os.Bundle)> / <android.media.tv.ITvInputSessionWrapper: void tune(android.net.Uri,android.os.Bundle)>
<android.media.tv.interactive.ITvInteractiveAppService: void sendAppLinkCommand(android.os.Bundle)> / <android.media.tv.interactive.TvInteractiveAppService$1: void sendAppLinkCommand(android.os.Bundle)>
<android.media.tv.interactive.ITvInteractiveAppSession: void createBiInteractiveApp(android.net.Uri,android.os.Bundle)> / <android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void createBiInteractiveApp(android.net.Uri,android.os.Bundle)>
<android.media.tv.interactive.ITvInteractiveAppSession: void notifyError(java.lang.String,android.os.Bundle)> / <android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyError(java.lang.String,android.os.Bundle)>
<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTvMessage(int,android.os.Bundle)> / <android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTvMessage(int,android.os.Bundle)>
