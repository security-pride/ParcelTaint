[
  {
    "interfaceName" : "android.view.accessibility.IAccessibilityInteractionConnectionCallback",
    "implementationName" : "android.view.accessibility.AccessibilityInteractionClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnectionCallback: void sendTakeScreenshotOfWindowError(int,int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityInteractionClient: void sendTakeScreenshotOfWindowError(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnectionCallback: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityInteractionClient: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnectionCallback: void setFindAccessibilityNodeInfosResult(java.util.List,int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityInteractionClient: void setFindAccessibilityNodeInfosResult(java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnectionCallback: void setPerformAccessibilityActionResult(boolean,int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityInteractionClient: void setPerformAccessibilityActionResult(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnectionCallback: void setPrefetchAccessibilityNodeInfoResult(java.util.List,int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityInteractionClient: void setPrefetchAccessibilityNodeInfoResult(java.util.List,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IMessenger",
    "implementationName" : "android.os.Handler$MessengerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IMessenger: void send(android.os.Message)>",
        "implementationMethod" : "<android.os.Handler$MessengerImpl: void send(android.os.Message)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.os.IShellCallback",
    "implementationName" : "android.os.ShellCallback$MyShellCallback",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.os.IShellCallback: android.os.ParcelFileDescriptor openFile(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.os.ShellCallback$MyShellCallback: android.os.ParcelFileDescriptor openFile(java.lang.String,java.lang.String,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IApplicationThread",
    "implementationName" : "android.app.ActivityThread$ApplicationThread",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void attachAgent(java.lang.String)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void attachAgent(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void attachStartupAgents(java.lang.String)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void attachStartupAgents(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void clearDnsCache()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void clearDnsCache()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dispatchPackageBroadcast(int,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dispatchPackageBroadcast(int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpActivity(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpActivity(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpCacheInfo(android.os.ParcelFileDescriptor,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpCacheInfo(android.os.ParcelFileDescriptor,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpDbInfo(android.os.ParcelFileDescriptor,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpDbInfo(android.os.ParcelFileDescriptor,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpGfxInfo(android.os.ParcelFileDescriptor,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(android.os.ParcelFileDescriptor,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpHeap(boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpHeap(boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpMemInfo(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpMemInfo(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpMemInfoProto(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpMemInfoProto(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpProvider(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpProvider(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpResources(android.os.ParcelFileDescriptor,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpResources(android.os.ParcelFileDescriptor,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void dumpService(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void dumpService(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void handleTrustStorageUpdate()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void handleTrustStorageUpdate()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void instrumentWithoutRestart(android.content.ComponentName,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,android.content.pm.ApplicationInfo)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void instrumentWithoutRestart(android.content.ComponentName,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,android.content.pm.ApplicationInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void notifyCleartextNetwork(byte[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void notifyCleartextNetwork(byte[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void notifyContentProviderPublishStatus(android.app.ContentProviderHolder,java.lang.String,int,boolean)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void notifyContentProviderPublishStatus(android.app.ContentProviderHolder,java.lang.String,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,android.os.RemoteCallback,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,android.os.RemoteCallback,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void processInBackground()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void processInBackground()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void profilerControl(boolean,android.app.ProfilerInfo,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void profilerControl(boolean,android.app.ProfilerInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void requestAssistContextExtras(android.os.IBinder,android.os.IBinder,int,int,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void requestAssistContextExtras(android.os.IBinder,android.os.IBinder,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void requestDirectActions(android.os.IBinder,com.android.internal.app.IVoiceInteractor,android.os.RemoteCallback,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void requestDirectActions(android.os.IBinder,com.android.internal.app.IVoiceInteractor,android.os.RemoteCallback,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void runIsolatedEntryPoint(java.lang.String,java.lang.String[])>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void runIsolatedEntryPoint(java.lang.String,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleApplicationInfoChanged(android.content.pm.ApplicationInfo)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleApplicationInfoChanged(android.content.pm.ApplicationInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean,int,long)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean,int,long)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleCrash(java.lang.String,int,android.os.Bundle)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleCrash(java.lang.String,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,int,int,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleEnterAnimationComplete(android.os.IBinder)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleEnterAnimationComplete(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleExit()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleExit()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleInstallProvider(android.content.pm.ProviderInfo)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleInstallProvider(android.content.pm.ProviderInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleLocalVoiceInteractionStarted(android.os.IBinder,com.android.internal.app.IVoiceInteractor)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleLocalVoiceInteractionStarted(android.os.IBinder,com.android.internal.app.IVoiceInteractor)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleLowMemory()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleLowMemory()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleOnNewActivityOptions(android.os.IBinder,android.os.Bundle)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleOnNewActivityOptions(android.os.IBinder,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void schedulePing(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void schedulePing(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,boolean,int,int,int,java.lang.String)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,boolean,int,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleReceiverList(java.util.List)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleReceiverList(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean,int,int,int,java.lang.String)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean,int,int,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleServiceArgs(android.os.IBinder,android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleServiceArgs(android.os.IBinder,android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleStopService(android.os.IBinder)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleStopService(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleSuicide()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleSuicide()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleTimeoutService(android.os.IBinder,int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleTimeoutService(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleTransaction(android.app.servertransaction.ClientTransaction)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleTransaction(android.app.servertransaction.ClientTransaction)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleTranslucentConversionComplete(android.os.IBinder,boolean)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleTranslucentConversionComplete(android.os.IBinder,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleTrimMemory(int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleTrimMemory(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void setCoreSettings(android.os.Bundle)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void setNetworkBlockSeq(long)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void setNetworkBlockSeq(long)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void setProcessState(int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void setProcessState(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void setSchedulingGroup(int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void setSchedulingGroup(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void startBinderTracking()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void startBinderTracking()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void unstableProviderDied(android.os.IBinder)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void unstableProviderDied(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void updateHttpProxy()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void updateHttpProxy()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void updateTimePrefs(int)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void updateTimePrefs(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void updateTimeZone()>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void updateTimeZone()>"
      },
      {
        "interfaceMethod" : "<android.app.IApplicationThread: void updateUiTranslationState(android.os.IBinder,int,android.view.translation.TranslationSpec,android.view.translation.TranslationSpec,java.util.List,android.view.translation.UiTranslationSpec)>",
        "implementationMethod" : "<android.app.ActivityThread$ApplicationThread: void updateUiTranslationState(android.os.IBinder,int,android.view.translation.TranslationSpec,android.view.translation.TranslationSpec,java.util.List,android.view.translation.UiTranslationSpec)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IServiceConnection",
    "implementationName" : "android.app.LoadedApk$ServiceDispatcher$InnerConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IServiceConnection: void connected(android.content.ComponentName,android.os.IBinder,boolean)>",
        "implementationMethod" : "<android.app.LoadedApk$ServiceDispatcher$InnerConnection: void connected(android.content.ComponentName,android.os.IBinder,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageDataObserver",
    "implementationName" : "android.app.admin.DevicePolicyManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageDataObserver: void onRemoveCompleted(java.lang.String,boolean)>",
        "implementationMethod" : "<android.app.admin.DevicePolicyManager$1: void onRemoveCompleted(java.lang.String,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.autofill.IAugmentedAutofillManagerClient",
    "implementationName" : "android.view.autofill.AutofillManager$AugmentedAutofillManagerClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: void autofill(int,java.util.List,java.util.List,boolean)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: void autofill(int,java.util.List,java.util.List,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: android.graphics.Rect getViewCoordinates(android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: android.graphics.Rect getViewCoordinates(android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: android.app.assist.AssistStructure$ViewNodeParcelable getViewNodeParcelable(android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: android.app.assist.AssistStructure$ViewNodeParcelable getViewNodeParcelable(android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: boolean requestAutofill(int,android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: boolean requestAutofill(int,android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: void requestHideFillUi(int,android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: void requestHideFillUi(int,android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAugmentedAutofillManagerClient: void requestShowFillUi(int,android.view.autofill.AutofillId,int,int,android.graphics.Rect,android.view.autofill.IAutofillWindowPresenter)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AugmentedAutofillManagerClient: void requestShowFillUi(int,android.view.autofill.AutofillId,int,int,android.graphics.Rect,android.view.autofill.IAutofillWindowPresenter)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.autofill.IAutoFillManagerClient",
    "implementationName" : "android.view.autofill.AutofillManager$AutofillManagerClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void authenticate(int,int,android.content.IntentSender,android.content.Intent,boolean)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void authenticate(int,int,android.content.IntentSender,android.content.Intent,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void autofill(int,java.util.List,java.util.List,boolean)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void autofill(int,java.util.List,java.util.List,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void autofillContent(int,android.view.autofill.AutofillId,android.content.ClipData)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void autofillContent(int,android.view.autofill.AutofillId,android.content.ClipData)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void dispatchUnhandledKey(int,android.view.autofill.AutofillId,android.view.KeyEvent)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void dispatchUnhandledKey(int,android.view.autofill.AutofillId,android.view.KeyEvent)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void getAugmentedAutofillClient(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void getAugmentedAutofillClient(com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void notifyDisableAutofill(long,android.content.ComponentName)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void notifyDisableAutofill(long,android.content.ComponentName)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void notifyFillDialogTriggerIds(java.util.List)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void notifyFillDialogTriggerIds(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void notifyFillUiHidden(int,android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void notifyFillUiHidden(int,android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void notifyFillUiShown(int,android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void notifyFillUiShown(int,android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void notifyNoFillUi(int,android.view.autofill.AutofillId,int)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void notifyNoFillUi(int,android.view.autofill.AutofillId,int)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void requestHideFillUi(int,android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void requestHideFillUi(int,android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void requestShowFillUi(int,android.view.autofill.AutofillId,int,int,android.graphics.Rect,android.view.autofill.IAutofillWindowPresenter)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void requestShowFillUi(int,android.view.autofill.AutofillId,int,int,android.graphics.Rect,android.view.autofill.IAutofillWindowPresenter)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void requestShowSoftInput(android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void requestShowSoftInput(android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void setSaveUiState(int,boolean)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void setSaveUiState(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void setSessionFinished(int,java.util.List)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void setSessionFinished(int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void setState(int)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void setState(int)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void setTrackedViews(int,android.view.autofill.AutofillId[],boolean,boolean,android.view.autofill.AutofillId[],android.view.autofill.AutofillId)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void setTrackedViews(int,android.view.autofill.AutofillId[],boolean,boolean,android.view.autofill.AutofillId[],android.view.autofill.AutofillId)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutoFillManagerClient: void startIntentSender(android.content.IntentSender,android.content.Intent)>",
        "implementationMethod" : "<android.view.autofill.AutofillManager$AutofillManagerClient: void startIntentSender(android.content.IntentSender,android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.autofill.IAutofillWindowPresenter",
    "implementationName" : "android.service.autofill.augmented.FillWindow$FillWindowPresenter",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.autofill.IAutofillWindowPresenter: void hide(android.graphics.Rect)>",
        "implementationMethod" : "<android.service.autofill.augmented.FillWindow$FillWindowPresenter: void hide(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.view.autofill.IAutofillWindowPresenter: void show(android.view.WindowManager$LayoutParams,android.graphics.Rect,boolean,int)>",
        "implementationMethod" : "<android.service.autofill.augmented.FillWindow$FillWindowPresenter: void show(android.view.WindowManager$LayoutParams,android.graphics.Rect,boolean,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.accessibility.IAccessibilityEmbeddedConnection",
    "implementationName" : "android.view.AccessibilityEmbeddedConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityEmbeddedConnection: android.os.IBinder associateEmbeddedHierarchy(android.os.IBinder,int)>",
        "implementationMethod" : "<android.view.AccessibilityEmbeddedConnection: android.os.IBinder associateEmbeddedHierarchy(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityEmbeddedConnection: void disassociateEmbeddedHierarchy()>",
        "implementationMethod" : "<android.view.AccessibilityEmbeddedConnection: void disassociateEmbeddedHierarchy()>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityEmbeddedConnection: void setWindowMatrix(float[])>",
        "implementationMethod" : "<android.view.AccessibilityEmbeddedConnection: void setWindowMatrix(float[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUiAutomationConnection",
    "implementationName" : "android.app.UiAutomationConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void adoptShellPermissionIdentity(int,java.lang.String[])>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void adoptShellPermissionIdentity(int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void clearWindowAnimationFrameStats()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void clearWindowAnimationFrameStats()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: boolean clearWindowContentFrameStats(int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: boolean clearWindowContentFrameStats(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient,int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void disconnect()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void disconnect()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void dropShellPermissionIdentity()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void dropShellPermissionIdentity()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void executeShellCommand(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void executeShellCommand(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void executeShellCommandWithStderr(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void executeShellCommandWithStderr(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: java.util.List getAdoptedShellPermissions()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: java.util.List getAdoptedShellPermissions()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: android.view.WindowContentFrameStats getWindowContentFrameStats(int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: android.view.WindowContentFrameStats getWindowContentFrameStats(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void grantRuntimePermission(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void grantRuntimePermission(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: boolean injectInputEvent(android.view.InputEvent,boolean,boolean)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: boolean injectInputEvent(android.view.InputEvent,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void injectInputEventToInputFilter(android.view.InputEvent)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void injectInputEventToInputFilter(android.view.InputEvent)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: boolean setRotation(int)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: boolean setRotation(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void shutdown()>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void shutdown()>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: void syncInputTransactions(boolean)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: void syncInputTransactions(boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: android.graphics.Bitmap takeScreenshot(android.graphics.Rect)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: android.graphics.Bitmap takeScreenshot(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.app.IUiAutomationConnection: android.graphics.Bitmap takeSurfaceControlScreenshot(android.view.SurfaceControl)>",
        "implementationMethod" : "<android.app.UiAutomationConnection: android.graphics.Bitmap takeSurfaceControlScreenshot(android.view.SurfaceControl)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IVoiceInteractor",
    "implementationName" : "android.service.voice.VoiceInteractionSession$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: void notifyDirectActionsChanged(int,android.os.IBinder)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: void notifyDirectActionsChanged(int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: void setKillCallback(android.os.ICancellationSignal)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: void setKillCallback(android.os.ICancellationSignal)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startAbortVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startAbortVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startCommand(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startCommand(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startCompleteVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startCompleteVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startConfirmation(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startConfirmation(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: com.android.internal.app.IVoiceInteractorRequest startPickOption(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: com.android.internal.app.IVoiceInteractorRequest startPickOption(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractor: boolean[] supportsCommands(java.lang.String,java.lang.String[])>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$1: boolean[] supportsCommands(java.lang.String,java.lang.String[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.IIntentSender",
    "implementationName" : "android.content.pm.PackageInstaller$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.IIntentSender: void send(int,android.content.Intent,java.lang.String,android.os.IBinder,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$1: void send(int,android.content.Intent,java.lang.String,android.os.IBinder,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IWindowFocusObserver",
    "implementationName" : "android.view.WindowId$FocusObserver$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IWindowFocusObserver: void focusGained(android.os.IBinder)>",
        "implementationMethod" : "<android.view.WindowId$FocusObserver$1: void focusGained(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.view.IWindowFocusObserver: void focusLost(android.os.IBinder)>",
        "implementationMethod" : "<android.view.WindowId$FocusObserver$1: void focusLost(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.contentcapture.IContentCaptureDirectManager",
    "implementationName" : "android.service.contentcapture.ContentCaptureService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureDirectManager: void sendEvents(android.content.pm.ParceledListSlice,int,android.content.ContentCaptureOptions)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$2: void sendEvents(android.content.pm.ParceledListSlice,int,android.content.ContentCaptureOptions)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.display.IVirtualDisplayCallback",
    "implementationName" : "android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.display.IVirtualDisplayCallback: void onPaused()>",
        "implementationMethod" : "<android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback: void onPaused()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IVirtualDisplayCallback: void onResumed()>",
        "implementationMethod" : "<android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback: void onResumed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.display.IVirtualDisplayCallback: void onStopped()>",
        "implementationMethod" : "<android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback: void onStopped()>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.IOnBackInvokedCallback",
    "implementationName" : "android.window.WindowOnBackInvokedDispatcher$OnBackInvokedCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.IOnBackInvokedCallback: void onBackCancelled()>",
        "implementationMethod" : "<android.window.WindowOnBackInvokedDispatcher$OnBackInvokedCallbackWrapper: void onBackCancelled()>"
      },
      {
        "interfaceMethod" : "<android.window.IOnBackInvokedCallback: void onBackInvoked()>",
        "implementationMethod" : "<android.window.WindowOnBackInvokedDispatcher$OnBackInvokedCallbackWrapper: void onBackInvoked()>"
      },
      {
        "interfaceMethod" : "<android.window.IOnBackInvokedCallback: void onBackProgressed(android.window.BackMotionEvent)>",
        "implementationMethod" : "<android.window.WindowOnBackInvokedDispatcher$OnBackInvokedCallbackWrapper: void onBackProgressed(android.window.BackMotionEvent)>"
      },
      {
        "interfaceMethod" : "<android.window.IOnBackInvokedCallback: void onBackStarted(android.window.BackMotionEvent)>",
        "implementationMethod" : "<android.window.WindowOnBackInvokedDispatcher$OnBackInvokedCallbackWrapper: void onBackStarted(android.window.BackMotionEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ISurfaceSyncGroup",
    "implementationName" : "android.window.SurfaceSyncGroup$ISurfaceSyncGroupImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ISurfaceSyncGroup: boolean addToSync(android.window.ISurfaceSyncGroup,boolean)>",
        "implementationMethod" : "<android.window.SurfaceSyncGroup$ISurfaceSyncGroupImpl: boolean addToSync(android.window.ISurfaceSyncGroup,boolean)>"
      },
      {
        "interfaceMethod" : "<android.window.ISurfaceSyncGroup: boolean onAddedToSyncGroup(android.os.IBinder,boolean)>",
        "implementationMethod" : "<android.window.SurfaceSyncGroup$ISurfaceSyncGroupImpl: boolean onAddedToSyncGroup(android.os.IBinder,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ISurfaceSyncGroupCompletedListener",
    "implementationName" : "android.window.SurfaceSyncGroup$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ISurfaceSyncGroupCompletedListener: void onSurfaceSyncGroupComplete()>",
        "implementationMethod" : "<android.window.SurfaceSyncGroup$1: void onSurfaceSyncGroupComplete()>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITransactionReadyCallback",
    "implementationName" : "android.window.SurfaceSyncGroup$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITransactionReadyCallback: void onTransactionReady(android.view.SurfaceControl$Transaction)>",
        "implementationMethod" : "<android.window.SurfaceSyncGroup$2: void onTransactionReady(android.view.SurfaceControl$Transaction)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.accessibility.IAccessibilityInteractionConnection",
    "implementationName" : "android.view.ViewRootImpl$AccessibilityInteractionConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void attachAccessibilityOverlayToWindow(android.view.SurfaceControl)>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void attachAccessibilityOverlayToWindow(android.view.SurfaceControl)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void clearAccessibilityFocus()>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void clearAccessibilityFocus()>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[],android.os.Bundle)>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(long,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfosByText(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfosByText(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void findAccessibilityNodeInfosByViewId(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfosByViewId(long,java.lang.String,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void findFocus(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findFocus(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void focusSearch(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void focusSearch(long,int,android.graphics.Region,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long,android.view.MagnificationSpec,float[])>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void notifyOutsideTouch()>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void notifyOutsideTouch()>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void performAccessibilityAction(long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,int,long)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityInteractionConnection: void takeScreenshotOfWindow(int,android.window.ScreenCapture$ScreenCaptureListener,android.view.accessibility.IAccessibilityInteractionConnectionCallback)>",
        "implementationMethod" : "<android.view.ViewRootImpl$AccessibilityInteractionConnection: void takeScreenshotOfWindow(int,android.window.ScreenCapture$ScreenCaptureListener,android.view.accessibility.IAccessibilityInteractionConnectionCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.accessibility.IAccessibilityManagerClient",
    "implementationName" : "android.view.accessibility.AccessibilityManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManagerClient: void notifyServicesStateChanged(long)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityManager$1: void notifyServicesStateChanged(long)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManagerClient: void setFocusAppearance(int,int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityManager$1: void setFocusAppearance(int,int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManagerClient: void setRelevantEventTypes(int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityManager$1: void setRelevantEventTypes(int)>"
      },
      {
        "interfaceMethod" : "<android.view.accessibility.IAccessibilityManagerClient: void setState(int)>",
        "implementationMethod" : "<android.view.accessibility.AccessibilityManager$1: void setState(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IAudioFocusDispatcher",
    "implementationName" : "android.media.AudioManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IAudioFocusDispatcher: void dispatchAudioFocusChange(int,java.lang.String)>",
        "implementationMethod" : "<android.media.AudioManager$1: void dispatchAudioFocusChange(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioFocusDispatcher: void dispatchFocusResultFromExtPolicy(int,java.lang.String)>",
        "implementationMethod" : "<android.media.AudioManager$1: void dispatchFocusResultFromExtPolicy(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IAudioServerStateDispatcher",
    "implementationName" : "android.media.AudioManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IAudioServerStateDispatcher: void dispatchAudioServerStateChange(boolean)>",
        "implementationMethod" : "<android.media.AudioManager$4: void dispatchAudioServerStateChange(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IPlaybackConfigDispatcher",
    "implementationName" : "android.media.AudioManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IPlaybackConfigDispatcher: void dispatchPlaybackConfigChange(java.util.List,boolean)>",
        "implementationMethod" : "<android.media.AudioManager$2: void dispatchPlaybackConfigChange(java.util.List,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.ISyncStatusObserver",
    "implementationName" : "android.content.ContentResolver$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.ISyncStatusObserver: void onStatusChanged(int)>",
        "implementationMethod" : "<android.content.ContentResolver$2: void onStatusChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.database.IContentObserver",
    "implementationName" : "android.database.ContentObserver$Transport",
    "methods" : [
      {
        "interfaceMethod" : "<android.database.IContentObserver: void onChange(boolean,android.net.Uri,int)>",
        "implementationMethod" : "<android.database.ContentObserver$Transport: void onChange(boolean,android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.database.IContentObserver: void onChangeEtc(boolean,android.net.Uri[],int,int)>",
        "implementationMethod" : "<android.database.ContentObserver$Transport: void onChangeEtc(boolean,android.net.Uri[],int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.accessibilityservice.IAccessibilityServiceClient",
    "implementationName" : "android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void bindInput()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void bindInput()>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void clearAccessibilityCache()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void clearAccessibilityCache()>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void createImeSession(com.android.internal.inputmethod.IAccessibilityInputMethodSessionCallback)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void createImeSession(com.android.internal.inputmethod.IAccessibilityInputMethodSessionCallback)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void init(android.accessibilityservice.IAccessibilityServiceConnection,int,android.os.IBinder)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void init(android.accessibilityservice.IAccessibilityServiceConnection,int,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onAccessibilityButtonAvailabilityChanged(boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onAccessibilityButtonAvailabilityChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onAccessibilityButtonClicked(int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onAccessibilityButtonClicked(int)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent,boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent,boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onFingerprintCapturingGesturesChanged(boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onFingerprintCapturingGesturesChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onFingerprintGesture(int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onFingerprintGesture(int)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onGesture(android.accessibilityservice.AccessibilityGestureEvent)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onGesture(android.accessibilityservice.AccessibilityGestureEvent)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onInterrupt()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onInterrupt()>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onKeyEvent(android.view.KeyEvent,int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onKeyEvent(android.view.KeyEvent,int)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onMagnificationChanged(int,android.graphics.Region,android.accessibilityservice.MagnificationConfig)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onMagnificationChanged(int,android.graphics.Region,android.accessibilityservice.MagnificationConfig)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onMotionEvent(android.view.MotionEvent)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onMotionEvent(android.view.MotionEvent)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onPerformGestureResult(int,boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onPerformGestureResult(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onSoftKeyboardShowModeChanged(int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onSoftKeyboardShowModeChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onSystemActionsChanged()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onSystemActionsChanged()>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void onTouchStateChanged(int,int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void onTouchStateChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void setImeSessionEnabled(com.android.internal.inputmethod.IAccessibilityInputMethodSession,boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void setImeSessionEnabled(com.android.internal.inputmethod.IAccessibilityInputMethodSession,boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void startInput(com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,android.view.inputmethod.EditorInfo,boolean)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void startInput(com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,android.view.inputmethod.EditorInfo,boolean)>"
      },
      {
        "interfaceMethod" : "<android.accessibilityservice.IAccessibilityServiceClient: void unbindInput()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void unbindInput()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IVoiceInteractorRequest",
    "implementationName" : "android.service.voice.VoiceInteractionSession$Request$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorRequest: void cancel()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$Request$1: void cancel()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IVoiceInteractorCallback",
    "implementationName" : "android.app.VoiceInteractor$2",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverAbortVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverAbortVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverCancel(com.android.internal.app.IVoiceInteractorRequest)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverCancel(com.android.internal.app.IVoiceInteractorRequest)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverCommandResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverCommandResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverCompleteVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverCompleteVoiceResult(com.android.internal.app.IVoiceInteractorRequest,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverConfirmationResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverConfirmationResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void deliverPickOptionResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void deliverPickOptionResult(com.android.internal.app.IVoiceInteractorRequest,boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.app.IVoiceInteractorCallback: void destroy()>",
        "implementationMethod" : "<android.app.VoiceInteractor$2: void destroy()>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.dex.ISnapshotRuntimeProfileCallback",
    "implementationName" : "android.content.pm.dex.ArtManager$SnapshotRuntimeProfileCallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.dex.ISnapshotRuntimeProfileCallback: void onError(int)>",
        "implementationMethod" : "<android.content.pm.dex.ArtManager$SnapshotRuntimeProfileCallbackDelegate: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.dex.ISnapshotRuntimeProfileCallback: void onSuccess(android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.content.pm.dex.ArtManager$SnapshotRuntimeProfileCallbackDelegate: void onSuccess(android.os.ParcelFileDescriptor)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageInstallerCallback",
    "implementationName" : "android.content.pm.PackageInstaller$SessionCallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerCallback: void onSessionActiveChanged(int,boolean)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$SessionCallbackDelegate: void onSessionActiveChanged(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerCallback: void onSessionBadgingChanged(int)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$SessionCallbackDelegate: void onSessionBadgingChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerCallback: void onSessionCreated(int)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$SessionCallbackDelegate: void onSessionCreated(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerCallback: void onSessionFinished(int,boolean)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$SessionCallbackDelegate: void onSessionFinished(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallerCallback: void onSessionProgressChanged(int,float)>",
        "implementationMethod" : "<android.content.pm.PackageInstaller$SessionCallbackDelegate: void onSessionProgressChanged(int,float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IScrollCaptureConnection",
    "implementationName" : "android.view.ScrollCaptureConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IScrollCaptureConnection: void close()>",
        "implementationMethod" : "<android.view.ScrollCaptureConnection: void close()>"
      },
      {
        "interfaceMethod" : "<android.view.IScrollCaptureConnection: android.os.ICancellationSignal endCapture()>",
        "implementationMethod" : "<android.view.ScrollCaptureConnection: android.os.ICancellationSignal endCapture()>"
      },
      {
        "interfaceMethod" : "<android.view.IScrollCaptureConnection: android.os.ICancellationSignal requestImage(android.graphics.Rect)>",
        "implementationMethod" : "<android.view.ScrollCaptureConnection: android.os.ICancellationSignal requestImage(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.view.IScrollCaptureConnection: android.os.ICancellationSignal startCapture(android.view.Surface,android.view.IScrollCaptureCallbacks)>",
        "implementationMethod" : "<android.view.ScrollCaptureConnection: android.os.ICancellationSignal startCapture(android.view.Surface,android.view.IScrollCaptureCallbacks)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.contentcapture.IContentCaptureOptionsCallback",
    "implementationName" : "android.app.ActivityThread$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.contentcapture.IContentCaptureOptionsCallback: void setContentCaptureOptions(android.content.ContentCaptureOptions)>",
        "implementationMethod" : "<android.app.ActivityThread$2: void setContentCaptureOptions(android.content.ContentCaptureOptions)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.contentcapture.IDataShareWriteAdapter",
    "implementationName" : "android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.contentcapture.IDataShareWriteAdapter: void error(int)>",
        "implementationMethod" : "<android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate: void error(int)>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IDataShareWriteAdapter: void finish()>",
        "implementationMethod" : "<android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate: void finish()>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IDataShareWriteAdapter: void rejected()>",
        "implementationMethod" : "<android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate: void rejected()>"
      },
      {
        "interfaceMethod" : "<android.view.contentcapture.IDataShareWriteAdapter: void write(android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate: void write(android.os.ParcelFileDescriptor)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITaskFpsCallback",
    "implementationName" : "android.view.WindowManagerImpl$OnFpsCallbackListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITaskFpsCallback: void onFpsReported(float)>",
        "implementationMethod" : "<android.view.WindowManagerImpl$OnFpsCallbackListenerProxy: void onFpsReported(float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.ISessionControllerCallback",
    "implementationName" : "android.media.session.MediaController$CallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onEvent(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onEvent(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onExtrasChanged(android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onExtrasChanged(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onMetadataChanged(android.media.MediaMetadata)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onMetadataChanged(android.media.MediaMetadata)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onPlaybackStateChanged(android.media.session.PlaybackState)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onPlaybackStateChanged(android.media.session.PlaybackState)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onQueueChanged(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onQueueChanged(android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onQueueTitleChanged(java.lang.CharSequence)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onQueueTitleChanged(java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onSessionDestroyed()>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onSessionDestroyed()>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionControllerCallback: void onVolumeInfoChanged(android.media.session.MediaController$PlaybackInfo)>",
        "implementationMethod" : "<android.media.session.MediaController$CallbackStub: void onVolumeInfoChanged(android.media.session.MediaController$PlaybackInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.display.IDisplayManagerCallback",
    "implementationName" : "android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.display.IDisplayManagerCallback: void onDisplayEvent(int,int)>",
        "implementationMethod" : "<android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback: void onDisplayEvent(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.ISurfaceControlViewHost",
    "implementationName" : "android.view.SurfaceControlViewHost$ISurfaceControlViewHostImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.ISurfaceControlViewHost: android.window.ISurfaceSyncGroup getSurfaceSyncGroup()>",
        "implementationMethod" : "<android.view.SurfaceControlViewHost$ISurfaceControlViewHostImpl: android.window.ISurfaceSyncGroup getSurfaceSyncGroup()>"
      },
      {
        "interfaceMethod" : "<android.view.ISurfaceControlViewHost: void onConfigurationChanged(android.content.res.Configuration)>",
        "implementationMethod" : "<android.view.SurfaceControlViewHost$ISurfaceControlViewHostImpl: void onConfigurationChanged(android.content.res.Configuration)>"
      },
      {
        "interfaceMethod" : "<android.view.ISurfaceControlViewHost: void onDispatchDetachedFromWindow()>",
        "implementationMethod" : "<android.view.SurfaceControlViewHost$ISurfaceControlViewHostImpl: void onDispatchDetachedFromWindow()>"
      },
      {
        "interfaceMethod" : "<android.view.ISurfaceControlViewHost: void onInsetsChanged(android.view.InsetsState,android.graphics.Rect)>",
        "implementationMethod" : "<android.view.SurfaceControlViewHost$ISurfaceControlViewHostImpl: void onInsetsChanged(android.view.InsetsState,android.graphics.Rect)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.audiopolicy.IAudioPolicyCallback",
    "implementationName" : "android.media.audiopolicy.AudioPolicy$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusAbandon(android.media.AudioFocusInfo)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusAbandon(android.media.AudioFocusInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusGrant(android.media.AudioFocusInfo,int)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusGrant(android.media.AudioFocusInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusLoss(android.media.AudioFocusInfo,boolean)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusLoss(android.media.AudioFocusInfo,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyAudioFocusRequest(android.media.AudioFocusInfo,int)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyAudioFocusRequest(android.media.AudioFocusInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyMixStateUpdate(java.lang.String,int)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyMixStateUpdate(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyUnregistration()>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyUnregistration()>"
      },
      {
        "interfaceMethod" : "<android.media.audiopolicy.IAudioPolicyCallback: void notifyVolumeAdjust(int)>",
        "implementationMethod" : "<android.media.audiopolicy.AudioPolicy$1: void notifyVolumeAdjust(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IDevicesForAttributesCallback",
    "implementationName" : "android.media.AudioManager$IDevicesForAttributesCallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IDevicesForAttributesCallback: void onDevicesForAttributesChanged(android.media.AudioAttributes,boolean,java.util.List)>",
        "implementationMethod" : "<android.media.AudioManager$IDevicesForAttributesCallbackStub: void onDevicesForAttributesChanged(android.media.AudioAttributes,boolean,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ICapturePresetDevicesRoleDispatcher",
    "implementationName" : "android.media.AudioManager$CapturePresetDevicesRoleDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ICapturePresetDevicesRoleDispatcher: void dispatchDevicesRoleChanged(int,int,java.util.List)>",
        "implementationMethod" : "<android.media.AudioManager$CapturePresetDevicesRoleDispatcherStub: void dispatchDevicesRoleChanged(int,int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ICommunicationDeviceDispatcher",
    "implementationName" : "android.media.AudioManager$CommunicationDeviceDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ICommunicationDeviceDispatcher: void dispatchCommunicationDeviceChanged(int)>",
        "implementationMethod" : "<android.media.AudioManager$CommunicationDeviceDispatcherStub: void dispatchCommunicationDeviceChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IDeviceVolumeBehaviorDispatcher",
    "implementationName" : "android.media.AudioDeviceVolumeManager$DeviceVolumeBehaviorDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IDeviceVolumeBehaviorDispatcher: void dispatchDeviceVolumeBehaviorChanged(android.media.AudioDeviceAttributes,int)>",
        "implementationMethod" : "<android.media.AudioDeviceVolumeManager$DeviceVolumeBehaviorDispatcherStub: void dispatchDeviceVolumeBehaviorChanged(android.media.AudioDeviceAttributes,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IAudioDeviceVolumeDispatcher",
    "implementationName" : "android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IAudioDeviceVolumeDispatcher: void dispatchDeviceVolumeAdjusted(android.media.AudioDeviceAttributes,android.media.VolumeInfo,int,int)>",
        "implementationMethod" : "<android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub: void dispatchDeviceVolumeAdjusted(android.media.AudioDeviceAttributes,android.media.VolumeInfo,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IAudioDeviceVolumeDispatcher: void dispatchDeviceVolumeChanged(android.media.AudioDeviceAttributes,android.media.VolumeInfo)>",
        "implementationMethod" : "<android.media.AudioDeviceVolumeManager$DeviceVolumeDispatcherStub: void dispatchDeviceVolumeChanged(android.media.AudioDeviceAttributes,android.media.VolumeInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerHeadToSoundStagePoseCallback",
    "implementationName" : "android.media.Spatializer$SpatializerPoseDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerHeadToSoundStagePoseCallback: void dispatchPoseChanged(float[])>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerPoseDispatcherStub: void dispatchPoseChanged(float[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IAudioModeDispatcher",
    "implementationName" : "android.media.AudioManager$ModeDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IAudioModeDispatcher: void dispatchAudioModeChanged(int)>",
        "implementationMethod" : "<android.media.AudioManager$ModeDispatcherStub: void dispatchAudioModeChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMuteAwaitConnectionCallback",
    "implementationName" : "android.media.AudioManager$MuteAwaitConnectionDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMuteAwaitConnectionCallback: void dispatchOnMutedUntilConnection(android.media.AudioDeviceAttributes,int[])>",
        "implementationMethod" : "<android.media.AudioManager$MuteAwaitConnectionDispatcherStub: void dispatchOnMutedUntilConnection(android.media.AudioDeviceAttributes,int[])>"
      },
      {
        "interfaceMethod" : "<android.media.IMuteAwaitConnectionCallback: void dispatchOnUnmutedEvent(int,android.media.AudioDeviceAttributes,int[])>",
        "implementationMethod" : "<android.media.AudioManager$MuteAwaitConnectionDispatcherStub: void dispatchOnUnmutedEvent(int,android.media.AudioDeviceAttributes,int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IPreferredMixerAttributesDispatcher",
    "implementationName" : "android.media.AudioManager$PreferredMixerAttributesDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IPreferredMixerAttributesDispatcher: void dispatchPrefMixerAttributesChanged(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>",
        "implementationMethod" : "<android.media.AudioManager$PreferredMixerAttributesDispatcherStub: void dispatchPrefMixerAttributesChanged(android.media.AudioAttributes,int,android.media.AudioMixerAttributes)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerCallback",
    "implementationName" : "android.media.Spatializer$SpatializerInfoDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerCallback: void dispatchSpatializerAvailableChanged(boolean)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerInfoDispatcherStub: void dispatchSpatializerAvailableChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.ISpatializerCallback: void dispatchSpatializerEnabledChanged(boolean)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerInfoDispatcherStub: void dispatchSpatializerEnabledChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerHeadTrackerAvailableCallback",
    "implementationName" : "android.media.Spatializer$SpatializerHeadTrackerAvailableDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerHeadTrackerAvailableCallback: void dispatchSpatializerHeadTrackerAvailable(boolean)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerHeadTrackerAvailableDispatcherStub: void dispatchSpatializerHeadTrackerAvailable(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerHeadTrackingModeCallback",
    "implementationName" : "android.media.Spatializer$SpatializerHeadTrackingDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerHeadTrackingModeCallback: void dispatchSpatializerActualHeadTrackingModeChanged(int)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerHeadTrackingDispatcherStub: void dispatchSpatializerActualHeadTrackingModeChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.media.ISpatializerHeadTrackingModeCallback: void dispatchSpatializerDesiredHeadTrackingModeChanged(int)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerHeadTrackingDispatcherStub: void dispatchSpatializerDesiredHeadTrackingModeChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.ISpatializerOutputCallback",
    "implementationName" : "android.media.Spatializer$SpatializerOutputDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.ISpatializerOutputCallback: void dispatchSpatializerOutputChanged(int)>",
        "implementationMethod" : "<android.media.Spatializer$SpatializerOutputDispatcherStub: void dispatchSpatializerOutputChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IStrategyNonDefaultDevicesDispatcher",
    "implementationName" : "android.media.AudioManager$StrategyNonDefaultDevicesDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IStrategyNonDefaultDevicesDispatcher: void dispatchNonDefDevicesChanged(int,java.util.List)>",
        "implementationMethod" : "<android.media.AudioManager$StrategyNonDefaultDevicesDispatcherStub: void dispatchNonDefDevicesChanged(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IStrategyPreferredDevicesDispatcher",
    "implementationName" : "android.media.AudioManager$StrategyPreferredDevicesDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IStrategyPreferredDevicesDispatcher: void dispatchPrefDevicesChanged(int,java.util.List)>",
        "implementationMethod" : "<android.media.AudioManager$StrategyPreferredDevicesDispatcherStub: void dispatchPrefDevicesChanged(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IStreamAliasingDispatcher",
    "implementationName" : "android.media.AudioManager$StreamAliasingDispatcherStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IStreamAliasingDispatcher: void dispatchStreamAliasingChanged()>",
        "implementationMethod" : "<android.media.AudioManager$StreamAliasingDispatcherStub: void dispatchStreamAliasingChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IAudioRoutesObserver",
    "implementationName" : "android.media.MediaRouter$Static$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IAudioRoutesObserver: void dispatchAudioRoutesChanged(android.media.AudioRoutesInfo)>",
        "implementationMethod" : "<android.media.MediaRouter$Static$1: void dispatchAudioRoutesChanged(android.media.AudioRoutesInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInputMethodSession",
    "implementationName" : "android.inputmethodservice.IInputMethodSessionWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void appPrivateCommand(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void appPrivateCommand(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void finishInput()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void finishInput()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void finishSession()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void finishSession()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,int)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void removeImeSurface()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void removeImeSurface()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void updateCursor(android.graphics.Rect)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void updateCursor(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void updateSelection(int,int,int,int,int,int)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void updateSelection(int,int,int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodSession: void viewClicked(boolean)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodSessionWrapper: void viewClicked(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IRemoteAccessibilityInputConnection",
    "implementationName" : "android.view.inputmethod.RemoteInputConnectionImpl$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void clearMetaKeyStates(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void clearMetaKeyStates(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void commitText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void commitText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void deleteSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void deleteSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void getCursorCapsMode(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void getCursorCapsMode(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void getSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void getSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void performContextMenuAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void performContextMenuAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void performEditorAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void performEditorAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void sendKeyEvent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.KeyEvent)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void sendKeyEvent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.KeyEvent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteAccessibilityInputConnection: void setSelection(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl$1: void setSelection(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IAccessibilityInputMethodSession",
    "implementationName" : "android.accessibilityservice.AccessibilityInputMethodSessionWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IAccessibilityInputMethodSession: void finishInput()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void finishInput()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IAccessibilityInputMethodSession: void finishSession()>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void finishSession()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IAccessibilityInputMethodSession: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IAccessibilityInputMethodSession: void updateSelection(int,int,int,int,int,int)>",
        "implementationMethod" : "<android.accessibilityservice.AccessibilityInputMethodSessionWrapper: void updateSelection(int,int,int,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IProcessObserver",
    "implementationName" : "android.app.HomeVisibilityListener$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IProcessObserver: void onForegroundActivitiesChanged(int,int,boolean)>",
        "implementationMethod" : "<android.app.HomeVisibilityListener$1: void onForegroundActivitiesChanged(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IProcessObserver: void onForegroundServicesChanged(int,int,int)>",
        "implementationMethod" : "<android.app.HomeVisibilityListener$1: void onForegroundServicesChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IProcessObserver: void onProcessDied(int,int)>",
        "implementationMethod" : "<android.app.HomeVisibilityListener$1: void onProcessDied(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUidFrozenStateChangedCallback",
    "implementationName" : "android.app.ActivityManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUidFrozenStateChangedCallback: void onUidFrozenStateChanged(int[],int[])>",
        "implementationMethod" : "<android.app.ActivityManager$1: void onUidFrozenStateChanged(int[],int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUidObserver",
    "implementationName" : "android.app.UidObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidActive(int)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidActive(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidCachedChanged(int,boolean)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidCachedChanged(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidGone(int,boolean)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidGone(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidIdle(int,boolean)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidIdle(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidProcAdjChanged(int,int)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidProcAdjChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUidObserver: void onUidStateChanged(int,int,long,int)>",
        "implementationMethod" : "<android.app.UidObserver: void onUidStateChanged(int,int,long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUserSwitchObserver",
    "implementationName" : "android.app.UserSwitchObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUserSwitchObserver: void onBeforeUserSwitching(int)>",
        "implementationMethod" : "<android.app.UserSwitchObserver: void onBeforeUserSwitching(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUserSwitchObserver: void onForegroundProfileSwitch(int)>",
        "implementationMethod" : "<android.app.UserSwitchObserver: void onForegroundProfileSwitch(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUserSwitchObserver: void onLockedBootComplete(int)>",
        "implementationMethod" : "<android.app.UserSwitchObserver: void onLockedBootComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUserSwitchObserver: void onUserSwitchComplete(int)>",
        "implementationMethod" : "<android.app.UserSwitchObserver: void onUserSwitchComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.app.IUserSwitchObserver: void onUserSwitching(int,android.os.IRemoteCallback)>",
        "implementationMethod" : "<android.app.UserSwitchObserver: void onUserSwitching(int,android.os.IRemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IApplicationStartInfoCompleteListener",
    "implementationName" : "android.app.ActivityManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IApplicationStartInfoCompleteListener: void onApplicationStartInfoComplete(android.app.ApplicationStartInfo)>",
        "implementationMethod" : "<android.app.ActivityManager$2: void onApplicationStartInfoComplete(android.app.ApplicationStartInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.voice.IVoiceInteractionSession",
    "implementationName" : "android.service.voice.VoiceInteractionSession$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void closeSystemDialogs()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void closeSystemDialogs()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void destroy()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void destroy()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void handleAssist(int,android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void handleAssist(int,android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void handleScreenshot(android.graphics.Bitmap)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void handleScreenshot(android.graphics.Bitmap)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void hide()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void hide()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void notifyVisibleActivityInfoChanged(android.service.voice.VisibleActivityInfo,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void notifyVisibleActivityInfoChanged(android.service.voice.VisibleActivityInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void onLockscreenShown()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void onLockscreenShown()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void show(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void show(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void taskFinished(android.content.Intent,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void taskFinished(android.content.Intent,int)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSession: void taskStarted(android.content.Intent,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSession$2: void taskStarted(android.content.Intent,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.voice.IVisualQueryDetectionVoiceInteractionCallback",
    "implementationName" : "android.service.voice.VisualQueryDetector$BinderCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.voice.IVisualQueryDetectionVoiceInteractionCallback: void onQueryDetected(java.lang.String)>",
        "implementationMethod" : "<android.service.voice.VisualQueryDetector$BinderCallback: void onQueryDetected(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVisualQueryDetectionVoiceInteractionCallback: void onQueryFinished()>",
        "implementationMethod" : "<android.service.voice.VisualQueryDetector$BinderCallback: void onQueryFinished()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVisualQueryDetectionVoiceInteractionCallback: void onQueryRejected()>",
        "implementationMethod" : "<android.service.voice.VisualQueryDetector$BinderCallback: void onQueryRejected()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVisualQueryDetectionVoiceInteractionCallback: void onVisualQueryDetectionServiceFailure(android.service.voice.VisualQueryDetectionServiceFailure)>",
        "implementationMethod" : "<android.service.voice.VisualQueryDetector$BinderCallback: void onVisualQueryDetectionServiceFailure(android.service.voice.VisualQueryDetectionServiceFailure)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.textservice.ISpellCheckerSessionListener",
    "implementationName" : "android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSessionListener: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])>",
        "implementationMethod" : "<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSessionListener: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>",
        "implementationMethod" : "<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.projection.IMediaProjectionCallback",
    "implementationName" : "android.media.projection.MediaProjection$MediaProjectionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionCallback: void onCapturedContentResize(int,int)>",
        "implementationMethod" : "<android.media.projection.MediaProjection$MediaProjectionCallback: void onCapturedContentResize(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionCallback: void onCapturedContentVisibilityChanged(boolean)>",
        "implementationMethod" : "<android.media.projection.MediaProjection$MediaProjectionCallback: void onCapturedContentVisibilityChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionCallback: void onStop()>",
        "implementationMethod" : "<android.media.projection.MediaProjection$MediaProjectionCallback: void onStop()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IPlayer",
    "implementationName" : "android.media.PlayerBase$IPlayerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IPlayer: void applyVolumeShaper(android.media.VolumeShaperConfiguration,android.media.VolumeShaperOperation)>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void applyVolumeShaper(android.media.VolumeShaperConfiguration,android.media.VolumeShaperOperation)>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void pause()>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void pause()>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void setPan(float)>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void setPan(float)>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void setStartDelayMs(int)>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void setStartDelayMs(int)>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void setVolume(float)>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void setVolume(float)>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void start()>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void start()>"
      },
      {
        "interfaceMethod" : "<android.media.IPlayer: void stop()>",
        "implementationMethod" : "<android.media.PlayerBase$IPlayerWrapper: void stop()>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.IVirtualDeviceActivityListener",
    "implementationName" : "android.companion.virtual.VirtualDeviceInternal$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceActivityListener: void onDisplayEmpty(int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceInternal$1: void onDisplayEmpty(int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceActivityListener: void onTopActivityChanged(int,android.content.ComponentName,int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceInternal$1: void onTopActivityChanged(int,android.content.ComponentName,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.IVirtualDeviceSoundEffectListener",
    "implementationName" : "android.companion.virtual.VirtualDeviceInternal$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceSoundEffectListener: void onPlaySoundEffect(int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceInternal$2: void onPlaySoundEffect(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.sensor.IVirtualSensorCallback",
    "implementationName" : "android.companion.virtual.VirtualDeviceParams$Builder$VirtualSensorCallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.sensor.IVirtualSensorCallback: void onConfigurationChanged(android.companion.virtual.sensor.VirtualSensor,boolean,int,int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceParams$Builder$VirtualSensorCallbackDelegate: void onConfigurationChanged(android.companion.virtual.sensor.VirtualSensor,boolean,int,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.sensor.IVirtualSensorCallback: void onDirectChannelConfigured(int,android.companion.virtual.sensor.VirtualSensor,int,int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceParams$Builder$VirtualSensorCallbackDelegate: void onDirectChannelConfigured(int,android.companion.virtual.sensor.VirtualSensor,int,int)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.sensor.IVirtualSensorCallback: void onDirectChannelCreated(int,android.os.SharedMemory)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceParams$Builder$VirtualSensorCallbackDelegate: void onDirectChannelCreated(int,android.os.SharedMemory)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.sensor.IVirtualSensorCallback: void onDirectChannelDestroyed(int)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceParams$Builder$VirtualSensorCallbackDelegate: void onDirectChannelDestroyed(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInputMethodClient",
    "implementationName" : "android.view.inputmethod.InputMethodManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void onBindAccessibilityService(com.android.internal.inputmethod.InputBindResult,int)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void onBindAccessibilityService(com.android.internal.inputmethod.InputBindResult,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void onBindMethod(com.android.internal.inputmethod.InputBindResult)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void onBindMethod(com.android.internal.inputmethod.InputBindResult)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void onUnbindAccessibilityService(int,int)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void onUnbindAccessibilityService(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void onUnbindMethod(int,int)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void onUnbindMethod(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void reportFullscreenMode(boolean)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void reportFullscreenMode(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void scheduleStartInputIfNecessary(boolean)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void scheduleStartInputIfNecessary(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void setActive(boolean,boolean)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void setActive(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void setImeTraceEnabled(boolean)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void setImeTraceEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void setInteractive(boolean,boolean)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void setInteractive(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void throwExceptionFromSystem(java.lang.String)>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void throwExceptionFromSystem(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethodClient: void updateVirtualDisplayToScreenMatrix(int,float[])>",
        "implementationMethod" : "<android.view.inputmethod.InputMethodManager$2: void updateVirtualDisplayToScreenMatrix(int,float[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IRemoteInputConnection",
    "implementationName" : "android.view.inputmethod.RemoteInputConnectionImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void beginBatchEdit(com.android.internal.inputmethod.InputConnectionCommandHeader)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void beginBatchEdit(com.android.internal.inputmethod.InputConnectionCommandHeader)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void cancelCancellationSignal(android.os.IBinder)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void cancelCancellationSignal(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void clearMetaKeyStates(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void clearMetaKeyStates(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void commitCompletion(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.CompletionInfo)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void commitCompletion(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.CompletionInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void commitContent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.InputContentInfo,int,android.os.Bundle,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void commitContent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.InputContentInfo,int,android.os.Bundle,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void commitCorrection(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.CorrectionInfo)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void commitCorrection(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.CorrectionInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void commitText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void commitText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void commitTextWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void commitTextWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void deleteSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void deleteSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void deleteSurroundingTextInCodePoints(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void deleteSurroundingTextInCodePoints(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void endBatchEdit(com.android.internal.inputmethod.InputConnectionCommandHeader)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void endBatchEdit(com.android.internal.inputmethod.InputConnectionCommandHeader)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void finishComposingText(com.android.internal.inputmethod.InputConnectionCommandHeader)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void finishComposingText(com.android.internal.inputmethod.InputConnectionCommandHeader)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void forgetCancellationSignal(android.os.IBinder)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void forgetCancellationSignal(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getCursorCapsMode(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getCursorCapsMode(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getExtractedText(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ExtractedTextRequest,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getExtractedText(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ExtractedTextRequest,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getSelectedText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getSelectedText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getTextAfterCursor(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getTextAfterCursor(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void getTextBeforeCursor(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void getTextBeforeCursor(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void performContextMenuAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void performContextMenuAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void performEditorAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void performEditorAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void performHandwritingGesture(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ParcelableHandwritingGesture,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void performHandwritingGesture(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ParcelableHandwritingGesture,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void performPrivateCommand(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void performPrivateCommand(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void performSpellCheck(com.android.internal.inputmethod.InputConnectionCommandHeader)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void performSpellCheck(com.android.internal.inputmethod.InputConnectionCommandHeader)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void previewHandwritingGesture(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ParcelableHandwritingGesture,android.os.IBinder)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void previewHandwritingGesture(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ParcelableHandwritingGesture,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void replaceText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void replaceText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void requestCursorUpdates(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void requestCursorUpdates(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void requestCursorUpdatesWithFilter(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void requestCursorUpdatesWithFilter(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void requestTextBoundsInfo(com.android.internal.inputmethod.InputConnectionCommandHeader,android.graphics.RectF,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void requestTextBoundsInfo(com.android.internal.inputmethod.InputConnectionCommandHeader,android.graphics.RectF,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void sendKeyEvent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.KeyEvent)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void sendKeyEvent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.KeyEvent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setComposingRegion(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setComposingRegion(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setComposingRegionWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,android.view.inputmethod.TextAttribute)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setComposingRegionWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,android.view.inputmethod.TextAttribute)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setComposingText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setComposingText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setComposingTextWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setComposingTextWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setImeConsumesInput(com.android.internal.inputmethod.InputConnectionCommandHeader,boolean)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setImeConsumesInput(com.android.internal.inputmethod.InputConnectionCommandHeader,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IRemoteInputConnection: void setSelection(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.RemoteInputConnectionImpl: void setSelection(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IAppOpsAsyncNotedCallback",
    "implementationName" : "android.app.AppOpsManager$OnOpNotedCallback$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsAsyncNotedCallback: void opNoted(android.app.AsyncNotedAppOp)>",
        "implementationMethod" : "<android.app.AppOpsManager$OnOpNotedCallback$1: void opNoted(android.app.AsyncNotedAppOp)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IAppOpsActiveCallback",
    "implementationName" : "android.app.AppOpsManager$3",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsActiveCallback: void opActiveChanged(int,int,java.lang.String,java.lang.String,boolean,int,int)>",
        "implementationMethod" : "<android.app.AppOpsManager$3: void opActiveChanged(int,int,java.lang.String,java.lang.String,boolean,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IAppOpsNotedCallback",
    "implementationName" : "android.app.AppOpsManager$5",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsNotedCallback: void opNoted(int,int,java.lang.String,java.lang.String,int,int)>",
        "implementationMethod" : "<android.app.AppOpsManager$5: void opNoted(int,int,java.lang.String,java.lang.String,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.app.IAppOpsStartedCallback",
    "implementationName" : "android.app.AppOpsManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.app.IAppOpsStartedCallback: void opStarted(int,int,java.lang.String,java.lang.String,int,int,int,int,int)>",
        "implementationMethod" : "<android.app.AppOpsManager$4: void opStarted(int,int,java.lang.String,java.lang.String,int,int,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IScreenCaptureObserver",
    "implementationName" : "android.app.ScreenCaptureCallbackHandler$ScreenCaptureObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IScreenCaptureObserver: void onScreenCaptured()>",
        "implementationMethod" : "<android.app.ScreenCaptureCallbackHandler$ScreenCaptureObserver: void onScreenCaptured()>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageDeleteObserver2",
    "implementationName" : "android.app.PackageDeleteObserver$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageDeleteObserver2: void onPackageDeleted(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<android.app.PackageDeleteObserver$1: void onPackageDeleted(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageDeleteObserver2: void onUserActionRequired(android.content.Intent)>",
        "implementationMethod" : "<android.app.PackageDeleteObserver$1: void onUserActionRequired(android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IDexModuleRegisterCallback",
    "implementationName" : "android.app.ApplicationPackageManager$DexModuleRegisterCallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IDexModuleRegisterCallback: void onDexModuleRegistered(java.lang.String,boolean,java.lang.String)>",
        "implementationMethod" : "<android.app.ApplicationPackageManager$DexModuleRegisterCallbackDelegate: void onDexModuleRegistered(java.lang.String,boolean,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageMoveObserver",
    "implementationName" : "android.app.ApplicationPackageManager$MoveCallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageMoveObserver: void onCreated(int,android.os.Bundle)>",
        "implementationMethod" : "<android.app.ApplicationPackageManager$MoveCallbackDelegate: void onCreated(int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageMoveObserver: void onStatusChanged(int,int,long)>",
        "implementationMethod" : "<android.app.ApplicationPackageManager$MoveCallbackDelegate: void onStatusChanged(int,int,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.permission.IOnPermissionsChangeListener",
    "implementationName" : "android.permission.PermissionManager$OnPermissionsChangeListenerDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.permission.IOnPermissionsChangeListener: void onPermissionsChanged(int)>",
        "implementationMethod" : "<android.permission.PermissionManager$OnPermissionsChangeListenerDelegate: void onPermissionsChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.translation.ITranslationDirectManager",
    "implementationName" : "android.service.translation.TranslationService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.translation.ITranslationDirectManager: void onFinishTranslationSession(int)>",
        "implementationMethod" : "<android.service.translation.TranslationService$2: void onFinishTranslationSession(int)>"
      },
      {
        "interfaceMethod" : "<android.view.translation.ITranslationDirectManager: void onTranslationRequest(android.view.translation.TranslationRequest,int,android.os.ICancellationSignal,android.service.translation.ITranslationCallback)>",
        "implementationMethod" : "<android.service.translation.TranslationService$2: void onTranslationRequest(android.view.translation.TranslationRequest,int,android.os.ICancellationSignal,android.service.translation.ITranslationCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.IOnPrimaryClipChangedListener",
    "implementationName" : "android.content.ClipboardManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.IOnPrimaryClipChangedListener: void dispatchPrimaryClipChanged()>",
        "implementationMethod" : "<android.content.ClipboardManager$1: void dispatchPrimaryClipChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.textservice.ITextServicesSessionListener",
    "implementationName" : "android.view.textservice.SpellCheckerSession$InternalListener",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.textservice.ITextServicesSessionListener: void onServiceConnected(com.android.internal.textservice.ISpellCheckerSession)>",
        "implementationMethod" : "<android.view.textservice.SpellCheckerSession$InternalListener: void onServiceConnected(com.android.internal.textservice.ISpellCheckerSession)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.audio.IAudioRoutingCallback",
    "implementationName" : "android.companion.virtual.audio.VirtualAudioSession",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.audio.IAudioRoutingCallback: void onAppsNeedingAudioRoutingChanged(int[])>",
        "implementationMethod" : "<android.companion.virtual.audio.VirtualAudioSession: void onAppsNeedingAudioRoutingChanged(int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.audio.IAudioConfigChangedCallback",
    "implementationName" : "android.companion.virtual.audio.VirtualAudioSession$AudioConfigChangedCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.audio.IAudioConfigChangedCallback: void onPlaybackConfigChanged(java.util.List)>",
        "implementationMethod" : "<android.companion.virtual.audio.VirtualAudioSession$AudioConfigChangedCallback: void onPlaybackConfigChanged(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.companion.virtual.audio.IAudioConfigChangedCallback: void onRecordingConfigChanged(java.util.List)>",
        "implementationMethod" : "<android.companion.virtual.audio.VirtualAudioSession$AudioConfigChangedCallback: void onRecordingConfigChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.virtual.IVirtualDeviceIntentInterceptor",
    "implementationName" : "android.companion.virtual.VirtualDeviceInternal$IntentInterceptorDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.virtual.IVirtualDeviceIntentInterceptor: void onIntentIntercepted(android.content.Intent)>",
        "implementationMethod" : "<android.companion.virtual.VirtualDeviceInternal$IntentInterceptorDelegate: void onIntentIntercepted(android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.IOnMediaKeyEventDispatchedListener",
    "implementationName" : "android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.IOnMediaKeyEventDispatchedListener: void onMediaKeyEventDispatched(android.view.KeyEvent,java.lang.String,android.media.session.MediaSession$Token)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub: void onMediaKeyEventDispatched(android.view.KeyEvent,java.lang.String,android.media.session.MediaSession$Token)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.IOnMediaKeyEventSessionChangedListener",
    "implementationName" : "android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.IOnMediaKeyEventSessionChangedListener: void onMediaKeyEventSessionChanged(java.lang.String,android.media.session.MediaSession$Token)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub: void onMediaKeyEventSessionChanged(java.lang.String,android.media.session.MediaSession$Token)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.ISession2TokensListener",
    "implementationName" : "android.media.session.MediaSessionManager$Session2TokensChangedWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.ISession2TokensListener: void onSession2TokensChanged(java.util.List)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$Session2TokensChangedWrapper$1: void onSession2TokensChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.IActiveSessionsListener",
    "implementationName" : "android.media.session.MediaSessionManager$SessionsChangedWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.IActiveSessionsListener: void onActiveSessionsChanged(java.util.List)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$SessionsChangedWrapper$1: void onActiveSessionsChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.ISessionCallback",
    "implementationName" : "android.media.session.MediaSession$CallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onAdjustVolume(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onAdjustVolume(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onCommand(java.lang.String,int,int,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onCommand(java.lang.String,int,int,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onCustomAction(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onCustomAction(java.lang.String,int,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onFastForward(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onFastForward(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onMediaButton(java.lang.String,int,int,android.content.Intent,int,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onMediaButton(java.lang.String,int,int,android.content.Intent,int,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onMediaButtonFromController(java.lang.String,int,int,android.content.Intent)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onMediaButtonFromController(java.lang.String,int,int,android.content.Intent)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onNext(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onNext(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPause(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPause(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPlay(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPlay(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPlayFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPlayFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPlayFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPlayFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPlayFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPlayFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPrepare(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPrepare(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPrepareFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPrepareFromMediaId(java.lang.String,int,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPrepareFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPrepareFromSearch(java.lang.String,int,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPrepareFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPrepareFromUri(java.lang.String,int,int,android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onPrevious(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onPrevious(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onRate(java.lang.String,int,int,android.media.Rating)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onRate(java.lang.String,int,int,android.media.Rating)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onRewind(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onRewind(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onSeekTo(java.lang.String,int,int,long)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onSeekTo(java.lang.String,int,int,long)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onSetPlaybackSpeed(java.lang.String,int,int,float)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onSetPlaybackSpeed(java.lang.String,int,int,float)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onSetVolumeTo(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onSetVolumeTo(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onSkipToTrack(java.lang.String,int,int,long)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onSkipToTrack(java.lang.String,int,int,long)>"
      },
      {
        "interfaceMethod" : "<android.media.session.ISessionCallback: void onStop(java.lang.String,int,int)>",
        "implementationMethod" : "<android.media.session.MediaSession$CallbackStub: void onStop(java.lang.String,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IRemoteSessionCallback",
    "implementationName" : "android.media.session.MediaSessionManager$RemoteSessionCallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IRemoteSessionCallback: void onSessionChanged(android.media.session.MediaSession$Token)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$RemoteSessionCallbackStub: void onSessionChanged(android.media.session.MediaSession$Token)>"
      },
      {
        "interfaceMethod" : "<android.media.IRemoteSessionCallback: void onVolumeChanged(android.media.session.MediaSession$Token,int)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$RemoteSessionCallbackStub: void onVolumeChanged(android.media.session.MediaSession$Token,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.IOnMediaKeyListener",
    "implementationName" : "android.media.session.MediaSessionManager$OnMediaKeyListenerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.IOnMediaKeyListener: void onMediaKey(android.view.KeyEvent,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$OnMediaKeyListenerImpl: void onMediaKey(android.view.KeyEvent,android.os.ResultReceiver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.session.IOnVolumeKeyLongPressListener",
    "implementationName" : "android.media.session.MediaSessionManager$OnVolumeKeyLongPressListenerImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.session.IOnVolumeKeyLongPressListener: void onVolumeKeyLongPress(android.view.KeyEvent)>",
        "implementationMethod" : "<android.media.session.MediaSessionManager$OnVolumeKeyLongPressListenerImpl: void onVolumeKeyLongPress(android.view.KeyEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.infra.IAndroidFuture",
    "implementationName" : "com.android.internal.infra.AndroidFuture$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.infra.IAndroidFuture: void complete(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<com.android.internal.infra.AndroidFuture$1: void complete(com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IRequestFinishCallback",
    "implementationName" : "android.app.Activity$RequestFinishCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IRequestFinishCallback: void requestFinish()>",
        "implementationMethod" : "<android.app.Activity$RequestFinishCallback: void requestFinish()>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.IWindowContainerTransactionCallback",
    "implementationName" : "android.window.WindowContainerTransactionCallback$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.IWindowContainerTransactionCallback: void onTransactionReady(int,android.view.SurfaceControl$Transaction)>",
        "implementationMethod" : "<android.window.WindowContainerTransactionCallback$1: void onTransactionReady(int,android.view.SurfaceControl$Transaction)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.translation.ITranslationCallback",
    "implementationName" : "android.view.translation.Translator$TranslationResponseCallbackImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.translation.ITranslationCallback: void onTranslationResponse(android.view.translation.TranslationResponse)>",
        "implementationMethod" : "<android.view.translation.Translator$TranslationResponseCallbackImpl: void onTranslationResponse(android.view.translation.TranslationResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.textservice.ISpellCheckerSession",
    "implementationName" : "android.service.textservice.SpellCheckerService$InternalISpellCheckerSession",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSession: void onCancel()>",
        "implementationMethod" : "<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: void onCancel()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSession: void onClose()>",
        "implementationMethod" : "<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: void onClose()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSession: void onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)>",
        "implementationMethod" : "<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: void onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerSession: void onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>",
        "implementationMethod" : "<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: void onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITaskFragmentOrganizer",
    "implementationName" : "android.window.TaskFragmentOrganizer$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITaskFragmentOrganizer: void onTransactionReady(android.window.TaskFragmentTransaction)>",
        "implementationMethod" : "<android.window.TaskFragmentOrganizer$1: void onTransactionReady(android.window.TaskFragmentTransaction)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.IDisplayAreaOrganizer",
    "implementationName" : "android.window.DisplayAreaOrganizer$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.IDisplayAreaOrganizer: void onDisplayAreaAppeared(android.window.DisplayAreaInfo,android.view.SurfaceControl)>",
        "implementationMethod" : "<android.window.DisplayAreaOrganizer$1: void onDisplayAreaAppeared(android.window.DisplayAreaInfo,android.view.SurfaceControl)>"
      },
      {
        "interfaceMethod" : "<android.window.IDisplayAreaOrganizer: void onDisplayAreaInfoChanged(android.window.DisplayAreaInfo)>",
        "implementationMethod" : "<android.window.DisplayAreaOrganizer$1: void onDisplayAreaInfoChanged(android.window.DisplayAreaInfo)>"
      },
      {
        "interfaceMethod" : "<android.window.IDisplayAreaOrganizer: void onDisplayAreaVanished(android.window.DisplayAreaInfo)>",
        "implementationMethod" : "<android.window.DisplayAreaOrganizer$1: void onDisplayAreaVanished(android.window.DisplayAreaInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.window.ITaskOrganizer",
    "implementationName" : "android.window.TaskOrganizer$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void addStartingWindow(android.window.StartingWindowInfo)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void addStartingWindow(android.window.StartingWindowInfo)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void copySplashScreenView(int)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void copySplashScreenView(int)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onAppSplashScreenViewRemoved(int)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onAppSplashScreenViewRemoved(int)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onBackPressedOnTaskRoot(android.app.ActivityManager$RunningTaskInfo)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onBackPressedOnTaskRoot(android.app.ActivityManager$RunningTaskInfo)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onImeDrawnOnTask(int)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onImeDrawnOnTask(int)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onTaskAppeared(android.app.ActivityManager$RunningTaskInfo,android.view.SurfaceControl)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onTaskAppeared(android.app.ActivityManager$RunningTaskInfo,android.view.SurfaceControl)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onTaskInfoChanged(android.app.ActivityManager$RunningTaskInfo)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onTaskInfoChanged(android.app.ActivityManager$RunningTaskInfo)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void onTaskVanished(android.app.ActivityManager$RunningTaskInfo)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void onTaskVanished(android.app.ActivityManager$RunningTaskInfo)>"
      },
      {
        "interfaceMethod" : "<android.window.ITaskOrganizer: void removeStartingWindow(android.window.StartingWindowRemovalInfo)>",
        "implementationMethod" : "<android.window.TaskOrganizer$1: void removeStartingWindow(android.window.StartingWindowRemovalInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.ILocalWallpaperColorConsumer",
    "implementationName" : "android.app.WallpaperManager$Globals$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.ILocalWallpaperColorConsumer: void onColorsChanged(android.graphics.RectF,android.app.WallpaperColors)>",
        "implementationMethod" : "<android.app.WallpaperManager$Globals$1: void onColorsChanged(android.graphics.RectF,android.app.WallpaperColors)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.policy.IKeyguardLockedStateListener",
    "implementationName" : "android.app.KeyguardManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.policy.IKeyguardLockedStateListener: void onKeyguardLockedStateChanged(boolean)>",
        "implementationMethod" : "<android.app.KeyguardManager$1: void onKeyguardLockedStateChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger_middleware.ISoundTriggerCallback",
    "implementationName" : "android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onModelUnloaded(int)>",
        "implementationMethod" : "<android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate: void onModelUnloaded(int)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onModuleDied()>",
        "implementationMethod" : "<android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate: void onModuleDied()>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onPhraseRecognition(int,android.media.soundtrigger_middleware.PhraseRecognitionEventSys,int)>",
        "implementationMethod" : "<android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate: void onPhraseRecognition(int,android.media.soundtrigger_middleware.PhraseRecognitionEventSys,int)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onRecognition(int,android.media.soundtrigger_middleware.RecognitionEventSys,int)>",
        "implementationMethod" : "<android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate: void onRecognition(int,android.media.soundtrigger_middleware.RecognitionEventSys,int)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onResourcesAvailable()>",
        "implementationMethod" : "<android.hardware.soundtrigger.SoundTriggerModule$EventHandlerDelegate: void onResourcesAvailable()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger_middleware.ISoundTriggerInjection",
    "implementationName" : "android.media.soundtrigger.SoundTriggerInstrumentation$Injection",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onClientAttached(android.os.IBinder,android.media.soundtrigger_middleware.IInjectGlobalEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onClientAttached(android.os.IBinder,android.media.soundtrigger_middleware.IInjectGlobalEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onClientDetached(android.os.IBinder)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onClientDetached(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onFrameworkDetached(android.media.soundtrigger_middleware.IInjectGlobalEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onFrameworkDetached(android.media.soundtrigger_middleware.IInjectGlobalEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onParamSet(int,int,android.media.soundtrigger_middleware.IInjectModelEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onParamSet(int,int,android.media.soundtrigger_middleware.IInjectModelEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onPreempted()>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onPreempted()>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onRecognitionStarted(int,android.media.soundtrigger.RecognitionConfig,android.media.soundtrigger_middleware.IInjectRecognitionEvent,android.media.soundtrigger_middleware.IInjectModelEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onRecognitionStarted(int,android.media.soundtrigger.RecognitionConfig,android.media.soundtrigger_middleware.IInjectRecognitionEvent,android.media.soundtrigger_middleware.IInjectModelEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onRecognitionStopped(android.media.soundtrigger_middleware.IInjectRecognitionEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onRecognitionStopped(android.media.soundtrigger_middleware.IInjectRecognitionEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onRestarted(android.media.soundtrigger_middleware.IInjectGlobalEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onRestarted(android.media.soundtrigger_middleware.IInjectGlobalEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onSoundModelLoaded(android.media.soundtrigger.SoundModel,android.media.soundtrigger.Phrase[],android.media.soundtrigger_middleware.IInjectModelEvent,android.media.soundtrigger_middleware.IInjectGlobalEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onSoundModelLoaded(android.media.soundtrigger.SoundModel,android.media.soundtrigger.Phrase[],android.media.soundtrigger_middleware.IInjectModelEvent,android.media.soundtrigger_middleware.IInjectGlobalEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void onSoundModelUnloaded(android.media.soundtrigger_middleware.IInjectModelEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void onSoundModelUnloaded(android.media.soundtrigger_middleware.IInjectModelEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.ISoundTriggerInjection: void registerGlobalEventInjection(android.media.soundtrigger_middleware.IInjectGlobalEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$Injection: void registerGlobalEventInjection(android.media.soundtrigger_middleware.IInjectGlobalEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.widget.ICheckCredentialProgressCallback",
    "implementationName" : "com.android.internal.widget.LockPatternUtils$WrappedCallback",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.widget.ICheckCredentialProgressCallback: void onCredentialVerified()>",
        "implementationMethod" : "<com.android.internal.widget.LockPatternUtils$WrappedCallback: void onCredentialVerified()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.widget.IWeakEscrowTokenActivatedListener",
    "implementationName" : "android.app.KeyguardManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.widget.IWeakEscrowTokenActivatedListener: void onWeakEscrowTokenActivated(long,int)>",
        "implementationMethod" : "<android.app.KeyguardManager$4: void onWeakEscrowTokenActivated(long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.widget.IWeakEscrowTokenRemovedListener",
    "implementationName" : "android.app.KeyguardManager$5",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.widget.IWeakEscrowTokenRemovedListener: void onWeakEscrowTokenRemoved(long,int)>",
        "implementationMethod" : "<android.app.KeyguardManager$5: void onWeakEscrowTokenRemoved(long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.notification.INotificationListener",
    "implementationName" : "android.service.notification.NotificationListenerService$NotificationListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onActionClicked(java.lang.String,android.app.Notification$Action,int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onActionClicked(java.lang.String,android.app.Notification$Action,int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onAllowedAdjustmentsChanged()>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onAllowedAdjustmentsChanged()>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onInterruptionFilterChanged(int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onInterruptionFilterChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onListenerConnected(android.service.notification.NotificationRankingUpdate)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onListenerConnected(android.service.notification.NotificationRankingUpdate)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onListenerHintsChanged(int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onListenerHintsChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationChannelGroupModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup,int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationChannelGroupModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup,int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationChannelModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationChannelModification(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationClicked(java.lang.String)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationClicked(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationDirectReply(java.lang.String)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationDirectReply(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationEnqueuedWithChannel(android.service.notification.IStatusBarNotificationHolder,android.app.NotificationChannel,android.service.notification.NotificationRankingUpdate)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationEnqueuedWithChannel(android.service.notification.IStatusBarNotificationHolder,android.app.NotificationChannel,android.service.notification.NotificationRankingUpdate)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationExpansionChanged(java.lang.String,boolean,boolean)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationExpansionChanged(java.lang.String,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationFeedbackReceived(java.lang.String,android.service.notification.NotificationRankingUpdate,android.os.Bundle)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationFeedbackReceived(java.lang.String,android.service.notification.NotificationRankingUpdate,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationPosted(android.service.notification.IStatusBarNotificationHolder,android.service.notification.NotificationRankingUpdate)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationPosted(android.service.notification.IStatusBarNotificationHolder,android.service.notification.NotificationRankingUpdate)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationRankingUpdate(android.service.notification.NotificationRankingUpdate)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationRankingUpdate(android.service.notification.NotificationRankingUpdate)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationRemoved(android.service.notification.IStatusBarNotificationHolder,android.service.notification.NotificationRankingUpdate,android.service.notification.NotificationStats,int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationRemoved(android.service.notification.IStatusBarNotificationHolder,android.service.notification.NotificationRankingUpdate,android.service.notification.NotificationStats,int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationSnoozedUntilContext(android.service.notification.IStatusBarNotificationHolder,java.lang.String)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationSnoozedUntilContext(android.service.notification.IStatusBarNotificationHolder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationVisibilityChanged(java.lang.String,boolean)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationVisibilityChanged(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onNotificationsSeen(java.util.List)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onNotificationsSeen(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onPanelHidden()>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onPanelHidden()>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onPanelRevealed(int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onPanelRevealed(int)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onStatusBarIconsBehaviorChanged(boolean)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onStatusBarIconsBehaviorChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.INotificationListener: void onSuggestedReplySent(java.lang.String,java.lang.CharSequence,int)>",
        "implementationMethod" : "<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void onSuggestedReplySent(java.lang.String,java.lang.CharSequence,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.ITransientNotificationCallback",
    "implementationName" : "android.widget.Toast$CallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.ITransientNotificationCallback: void onToastHidden()>",
        "implementationMethod" : "<android.widget.Toast$CallbackBinder: void onToastHidden()>"
      },
      {
        "interfaceMethod" : "<android.app.ITransientNotificationCallback: void onToastShown()>",
        "implementationMethod" : "<android.widget.Toast$CallbackBinder: void onToastShown()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.ITransientNotification",
    "implementationName" : "android.widget.Toast$TN",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.ITransientNotification: void hide()>",
        "implementationMethod" : "<android.widget.Toast$TN: void hide()>"
      },
      {
        "interfaceMethod" : "<android.app.ITransientNotification: void show(android.os.IBinder)>",
        "implementationMethod" : "<android.widget.Toast$TN: void show(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.notification.IConditionProvider",
    "implementationName" : "android.service.notification.ConditionProviderService$Provider",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.notification.IConditionProvider: void onConnected()>",
        "implementationMethod" : "<android.service.notification.ConditionProviderService$Provider: void onConnected()>"
      },
      {
        "interfaceMethod" : "<android.service.notification.IConditionProvider: void onSubscribe(android.net.Uri)>",
        "implementationMethod" : "<android.service.notification.ConditionProviderService$Provider: void onSubscribe(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.service.notification.IConditionProvider: void onUnsubscribe(android.net.Uri)>",
        "implementationMethod" : "<android.service.notification.ConditionProviderService$Provider: void onUnsubscribe(android.net.Uri)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.trust.ITrustListener",
    "implementationName" : "android.app.trust.TrustManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.trust.ITrustListener: void onEnabledTrustAgentsChanged(int)>",
        "implementationMethod" : "<android.app.trust.TrustManager$1: void onEnabledTrustAgentsChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustListener: void onIsActiveUnlockRunningChanged(boolean,int)>",
        "implementationMethod" : "<android.app.trust.TrustManager$1: void onIsActiveUnlockRunningChanged(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustListener: void onTrustChanged(boolean,boolean,int,int,java.util.List)>",
        "implementationMethod" : "<android.app.trust.TrustManager$1: void onTrustChanged(boolean,boolean,int,int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustListener: void onTrustError(java.lang.CharSequence)>",
        "implementationMethod" : "<android.app.trust.TrustManager$1: void onTrustError(java.lang.CharSequence)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.ITrustListener: void onTrustManagedChanged(boolean,int)>",
        "implementationMethod" : "<android.app.trust.TrustManager$1: void onTrustManagedChanged(boolean,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IOnKeyguardExitResult",
    "implementationName" : "android.app.KeyguardManager$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IOnKeyguardExitResult: void onKeyguardExitResult(boolean)>",
        "implementationMethod" : "<android.app.KeyguardManager$3: void onKeyguardExitResult(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IWindowSessionCallback",
    "implementationName" : "android.view.WindowManagerGlobal$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IWindowSessionCallback: void onAnimatorScaleChanged(float)>",
        "implementationMethod" : "<android.view.WindowManagerGlobal$1: void onAnimatorScaleChanged(float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.ICrossWindowBlurEnabledListener",
    "implementationName" : "android.view.CrossWindowBlurListeners$BlurEnabledListenerInternal",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.ICrossWindowBlurEnabledListener: void onCrossWindowBlurEnabledChanged(boolean)>",
        "implementationMethod" : "<android.view.CrossWindowBlurListeners$BlurEnabledListenerInternal: void onCrossWindowBlurEnabledChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.ISystemGestureExclusionListener",
    "implementationName" : "com.android.internal.widget.PointerLocationView$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.ISystemGestureExclusionListener: void onSystemGestureExclusionChanged(int,android.graphics.Region,android.graphics.Region)>",
        "implementationMethod" : "<com.android.internal.widget.PointerLocationView$1: void onSystemGestureExclusionChanged(int,android.graphics.Region,android.graphics.Region)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.widget.IRemoteViewsFactory",
    "implementationName" : "android.widget.RemoteViewsService$RemoteViewsFactoryAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: int getCount()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getCount()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: long getItemId(int)>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: long getItemId(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: android.widget.RemoteViews getLoadingView()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getLoadingView()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: android.widget.RemoteViews getViewAt(int)>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getViewAt(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: int getViewTypeCount()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getViewTypeCount()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: boolean hasStableIds()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: boolean hasStableIds()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: boolean isCreated()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: boolean isCreated()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: void onDataSetChanged()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDataSetChanged()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: void onDataSetChangedAsync()>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDataSetChangedAsync()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.widget.IRemoteViewsFactory: void onDestroy(android.content.Intent)>",
        "implementationMethod" : "<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDestroy(android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IWindowToken",
    "implementationName" : "android.window.WindowTokenClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IWindowToken: void onConfigurationChanged(android.content.res.Configuration,int)>",
        "implementationMethod" : "<android.window.WindowTokenClient: void onConfigurationChanged(android.content.res.Configuration,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IWindowToken: void onWindowTokenRemoved()>",
        "implementationMethod" : "<android.window.WindowTokenClient: void onWindowTokenRemoved()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.trust.IStrongAuthTracker",
    "implementationName" : "com.android.internal.widget.LockPatternUtils$StrongAuthTracker$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.trust.IStrongAuthTracker: void onIsNonStrongBiometricAllowedChanged(boolean,int)>",
        "implementationMethod" : "<com.android.internal.widget.LockPatternUtils$StrongAuthTracker$1: void onIsNonStrongBiometricAllowedChanged(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.app.trust.IStrongAuthTracker: void onStrongAuthRequiredChanged(int,int)>",
        "implementationMethod" : "<com.android.internal.widget.LockPatternUtils$StrongAuthTracker$1: void onStrongAuthRequiredChanged(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger_middleware.IAcknowledgeEvent",
    "implementationName" : "android.media.soundtrigger.SoundTriggerInstrumentation$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger_middleware.IAcknowledgeEvent: void eventReceived()>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerInstrumentation$1: void eventReceived()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.admin.StartInstallingUpdateCallback",
    "implementationName" : "android.app.admin.DevicePolicyManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.admin.StartInstallingUpdateCallback: void onStartInstallingUpdateError(int,java.lang.String)>",
        "implementationMethod" : "<android.app.admin.DevicePolicyManager$2: void onStartInstallingUpdateError(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.appwidget.IAppWidgetHost",
    "implementationName" : "android.appwidget.AppWidgetHost$Callbacks",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetHost: void appWidgetRemoved(int)>",
        "implementationMethod" : "<android.appwidget.AppWidgetHost$Callbacks: void appWidgetRemoved(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetHost: void providerChanged(int,android.appwidget.AppWidgetProviderInfo)>",
        "implementationMethod" : "<android.appwidget.AppWidgetHost$Callbacks: void providerChanged(int,android.appwidget.AppWidgetProviderInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetHost: void providersChanged()>",
        "implementationMethod" : "<android.appwidget.AppWidgetHost$Callbacks: void providersChanged()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetHost: void updateAppWidget(int,android.widget.RemoteViews)>",
        "implementationMethod" : "<android.appwidget.AppWidgetHost$Callbacks: void updateAppWidget(int,android.widget.RemoteViews)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.appwidget.IAppWidgetHost: void viewDataChanged(int,int)>",
        "implementationMethod" : "<android.appwidget.AppWidgetHost$Callbacks: void viewDataChanged(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.accounts.IAccountAuthenticator",
    "implementationName" : "android.accounts.AbstractAccountAuthenticator$Transport",
    "methods" : [
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void finishSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void finishSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void getAccountCredentialsForCloning(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void getAccountCredentialsForCloning(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void isCredentialsUpdateSuggested(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void isCredentialsUpdateSuggested(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void startAddAccountSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void startAddAccountSession(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void startUpdateCredentialsSession(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void startUpdateCredentialsSession(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.accounts.IAccountAuthenticator: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.accounts.AbstractAccountAuthenticator$Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUnsafeIntentStrictModeCallback",
    "implementationName" : "android.os.StrictMode$UnsafeIntentStrictModeCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUnsafeIntentStrictModeCallback: void onImplicitIntentMatchedInternalComponent(android.content.Intent)>",
        "implementationMethod" : "<android.os.StrictMode$UnsafeIntentStrictModeCallback: void onImplicitIntentMatchedInternalComponent(android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IAlarmListener",
    "implementationName" : "android.app.AlarmManager$ListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IAlarmListener: void doAlarm(android.app.IAlarmCompleteListener)>",
        "implementationMethod" : "<android.app.AlarmManager$ListenerWrapper: void doAlarm(android.app.IAlarmCompleteListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IVoldTaskListener",
    "implementationName" : "android.os.storage.StorageManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IVoldTaskListener: void onFinished(int,android.os.PersistableBundle)>",
        "implementationMethod" : "<android.os.storage.StorageManager$1: void onFinished(int,android.os.PersistableBundle)>"
      },
      {
        "interfaceMethod" : "<android.os.IVoldTaskListener: void onStatus(int,android.os.PersistableBundle)>",
        "implementationMethod" : "<android.os.storage.StorageManager$1: void onStatus(int,android.os.PersistableBundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.storage.IObbActionListener",
    "implementationName" : "android.os.storage.StorageManager$ObbActionListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.storage.IObbActionListener: void onObbResult(java.lang.String,int,int)>",
        "implementationMethod" : "<android.os.storage.StorageManager$ObbActionListener: void onObbResult(java.lang.String,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.storage.IStorageEventListener",
    "implementationName" : "android.os.storage.StorageManager$StorageEventListenerDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onDiskDestroyed(android.os.storage.DiskInfo)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onDiskDestroyed(android.os.storage.DiskInfo)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onDiskScanned(android.os.storage.DiskInfo,int)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onDiskScanned(android.os.storage.DiskInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onUsbMassStorageConnectionChanged(boolean)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onUsbMassStorageConnectionChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onVolumeForgotten(java.lang.String)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onVolumeForgotten(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onVolumeRecordChanged(android.os.storage.VolumeRecord)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onVolumeRecordChanged(android.os.storage.VolumeRecord)>"
      },
      {
        "interfaceMethod" : "<android.os.storage.IStorageEventListener: void onVolumeStateChanged(android.os.storage.VolumeInfo,int,int)>",
        "implementationMethod" : "<android.os.storage.StorageManager$StorageEventListenerDelegate: void onVolumeStateChanged(android.os.storage.VolumeInfo,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IBackupAgent",
    "implementationName" : "android.app.backup.BackupAgent$BackupServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void clearBackupRestoreEventLogger()>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void clearBackupRestoreEventLogger()>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,long,android.app.backup.IBackupCallback,int)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,long,android.app.backup.IBackupCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doFullBackup(android.os.ParcelFileDescriptor,long,int,android.app.backup.IBackupManager,int)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doFullBackup(android.os.ParcelFileDescriptor,long,int,android.app.backup.IBackupManager,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doMeasureFullBackup(long,int,android.app.backup.IBackupManager,int)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doMeasureFullBackup(long,int,android.app.backup.IBackupManager,int)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doQuotaExceeded(long,long,android.app.backup.IBackupCallback)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doQuotaExceeded(long,long,android.app.backup.IBackupCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doRestore(android.os.ParcelFileDescriptor,long,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doRestore(android.os.ParcelFileDescriptor,long,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doRestoreFinished(int,android.app.backup.IBackupManager)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doRestoreFinished(int,android.app.backup.IBackupManager)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void doRestoreWithExcludedKeys(android.os.ParcelFileDescriptor,long,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager,java.util.List)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void doRestoreWithExcludedKeys(android.os.ParcelFileDescriptor,long,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void fail(java.lang.String)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void fail(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void getLoggerResults(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void getLoggerResults(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.app.IBackupAgent: void getOperationType(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupAgent$BackupServiceBinder: void getOperationType(com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.backup.IBackupObserver",
    "implementationName" : "android.app.backup.BackupManager$BackupObserverWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.backup.IBackupObserver: void backupFinished(int)>",
        "implementationMethod" : "<android.app.backup.BackupManager$BackupObserverWrapper: void backupFinished(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupObserver: void onResult(java.lang.String,int)>",
        "implementationMethod" : "<android.app.backup.BackupManager$BackupObserverWrapper: void onResult(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IBackupObserver: void onUpdate(java.lang.String,android.app.backup.BackupProgress)>",
        "implementationMethod" : "<android.app.backup.BackupManager$BackupObserverWrapper: void onUpdate(java.lang.String,android.app.backup.BackupProgress)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.backup.IBackupManagerMonitor",
    "implementationName" : "android.app.backup.BackupManagerMonitorWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.backup.IBackupManagerMonitor: void onEvent(android.os.Bundle)>",
        "implementationMethod" : "<android.app.backup.BackupManagerMonitorWrapper: void onEvent(android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.backup.ISelectBackupTransportCallback",
    "implementationName" : "android.app.backup.BackupManager$SelectTransportListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.backup.ISelectBackupTransportCallback: void onFailure(int)>",
        "implementationMethod" : "<android.app.backup.BackupManager$SelectTransportListenerWrapper: void onFailure(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.ISelectBackupTransportCallback: void onSuccess(java.lang.String)>",
        "implementationMethod" : "<android.app.backup.BackupManager$SelectTransportListenerWrapper: void onSuccess(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.backup.IRestoreObserver",
    "implementationName" : "android.app.backup.RestoreSession$RestoreObserverWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.backup.IRestoreObserver: void onUpdate(int,java.lang.String)>",
        "implementationMethod" : "<android.app.backup.RestoreSession$RestoreObserverWrapper: void onUpdate(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IRestoreObserver: void restoreFinished(int)>",
        "implementationMethod" : "<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreFinished(int)>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IRestoreObserver: void restoreSetsAvailable(android.app.backup.RestoreSet[])>",
        "implementationMethod" : "<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreSetsAvailable(android.app.backup.RestoreSet[])>"
      },
      {
        "interfaceMethod" : "<android.app.backup.IRestoreObserver: void restoreStarting(int)>",
        "implementationMethod" : "<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreStarting(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IInstantAppResolver",
    "implementationName" : "android.app.InstantAppResolverService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IInstantAppResolver: void getInstantAppIntentFilterList(android.content.pm.InstantAppRequestInfo,android.os.IRemoteCallback)>",
        "implementationMethod" : "<android.app.InstantAppResolverService$1: void getInstantAppIntentFilterList(android.content.pm.InstantAppRequestInfo,android.os.IRemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.app.IInstantAppResolver: void getInstantAppResolveInfoList(android.content.pm.InstantAppRequestInfo,int,android.os.IRemoteCallback)>",
        "implementationMethod" : "<android.app.InstantAppResolverService$1: void getInstantAppResolveInfoList(android.content.pm.InstantAppRequestInfo,int,android.os.IRemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IOnProjectionStateChangedListener",
    "implementationName" : "android.app.UiModeManager$InnerListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IOnProjectionStateChangedListener: void onProjectionStateChanged(int,java.util.List)>",
        "implementationMethod" : "<android.app.UiModeManager$InnerListener: void onProjectionStateChanged(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.IUiModeManagerCallback",
    "implementationName" : "android.app.UiModeManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.IUiModeManagerCallback: void notifyContrastChanged(float)>",
        "implementationMethod" : "<android.app.UiModeManager$1: void notifyContrastChanged(float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaRouterClient",
    "implementationName" : "android.media.MediaRouter$Static$Client",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaRouterClient: void onGroupRouteSelected(java.lang.String)>",
        "implementationMethod" : "<android.media.MediaRouter$Static$Client: void onGroupRouteSelected(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterClient: void onRestoreRoute()>",
        "implementationMethod" : "<android.media.MediaRouter$Static$Client: void onRestoreRoute()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouterClient: void onStateChanged()>",
        "implementationMethod" : "<android.media.MediaRouter$Static$Client: void onStateChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IRemoteVolumeObserver",
    "implementationName" : "android.media.MediaRouter$RouteInfo$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IRemoteVolumeObserver: void dispatchRemoteVolumeUpdate(int,int)>",
        "implementationMethod" : "<android.media.MediaRouter$RouteInfo$1: void dispatchRemoteVolumeUpdate(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaRouter2Manager",
    "implementationName" : "android.media.MediaRouter2Manager$Client",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifyDiscoveryPreferenceChanged(java.lang.String,android.media.RouteDiscoveryPreference)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifyDiscoveryPreferenceChanged(java.lang.String,android.media.RouteDiscoveryPreference)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifyRequestFailed(int,int)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifyRequestFailed(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifyRouteListingPreferenceChange(java.lang.String,android.media.RouteListingPreference)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifyRouteListingPreferenceChange(java.lang.String,android.media.RouteListingPreference)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifyRoutesUpdated(java.util.List)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifyRoutesUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifySessionCreated(int,android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifySessionCreated(int,android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifySessionReleased(android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifySessionReleased(android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2Manager: void notifySessionUpdated(android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2Manager$Client: void notifySessionUpdated(android.media.RoutingSessionInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaRouter2",
    "implementationName" : "android.media.MediaRouter2$MediaRouter2Stub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void notifyRouterRegistered(java.util.List,android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void notifyRouterRegistered(java.util.List,android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void notifyRoutesUpdated(java.util.List)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void notifyRoutesUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void notifySessionCreated(int,android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionCreated(int,android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void notifySessionInfoChanged(android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionInfoChanged(android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void notifySessionReleased(android.media.RoutingSessionInfo)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void notifySessionReleased(android.media.RoutingSessionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRouter2: void requestCreateSessionByManager(long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>",
        "implementationMethod" : "<android.media.MediaRouter2$MediaRouter2Stub: void requestCreateSessionByManager(long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IPackageInstallObserver2",
    "implementationName" : "android.app.PackageInstallObserver$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallObserver2: void onPackageInstalled(java.lang.String,int,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.app.PackageInstallObserver$1: void onPackageInstalled(java.lang.String,int,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IPackageInstallObserver2: void onUserActionRequired(android.content.Intent)>",
        "implementationMethod" : "<android.app.PackageInstallObserver$1: void onUserActionRequired(android.content.Intent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.INearbyMediaDevicesProvider",
    "implementationName" : "android.app.StatusBarManager$NearbyMediaDevicesProviderWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.INearbyMediaDevicesProvider: void registerNearbyDevicesCallback(android.media.INearbyMediaDevicesUpdateCallback)>",
        "implementationMethod" : "<android.app.StatusBarManager$NearbyMediaDevicesProviderWrapper: void registerNearbyDevicesCallback(android.media.INearbyMediaDevicesUpdateCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.INearbyMediaDevicesProvider: void unregisterNearbyDevicesCallback(android.media.INearbyMediaDevicesUpdateCallback)>",
        "implementationMethod" : "<android.app.StatusBarManager$NearbyMediaDevicesProviderWrapper: void unregisterNearbyDevicesCallback(android.media.INearbyMediaDevicesUpdateCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.statusbar.IAddTileResultCallback",
    "implementationName" : "android.app.StatusBarManager$RequestResultCallback",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IAddTileResultCallback: void onTileRequest(int)>",
        "implementationMethod" : "<android.app.StatusBarManager$RequestResultCallback: void onTileRequest(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.statusbar.IUndoMediaTransferCallback",
    "implementationName" : "android.app.StatusBarManager$UndoCallback",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.statusbar.IUndoMediaTransferCallback: void onUndoTriggered()>",
        "implementationMethod" : "<android.app.StatusBarManager$UndoCallback: void onUndoTriggered()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.search.ISearchCallback",
    "implementationName" : "android.app.search.SearchSession$CallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.search.ISearchCallback: void onResult(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.app.search.SearchSession$CallbackWrapper: void onResult(android.content.pm.ParceledListSlice)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.smartspace.ISmartspaceCallback",
    "implementationName" : "android.app.smartspace.SmartspaceSession$CallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.smartspace.ISmartspaceCallback: void onResult(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.app.smartspace.SmartspaceSession$CallbackWrapper: void onResult(android.content.pm.ParceledListSlice)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.prediction.IPredictionCallback",
    "implementationName" : "android.app.prediction.AppPredictor$CallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.prediction.IPredictionCallback: void onResult(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.app.prediction.AppPredictor$CallbackWrapper: void onResult(android.content.pm.ParceledListSlice)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.contentsuggestions.IClassificationsCallback",
    "implementationName" : "android.app.contentsuggestions.ContentSuggestionsManager$ClassificationsCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.contentsuggestions.IClassificationsCallback: void onContentClassificationsAvailable(int,java.util.List)>",
        "implementationMethod" : "<android.app.contentsuggestions.ContentSuggestionsManager$ClassificationsCallbackWrapper: void onContentClassificationsAvailable(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.contentsuggestions.ISelectionsCallback",
    "implementationName" : "android.app.contentsuggestions.ContentSuggestionsManager$SelectionsCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.contentsuggestions.ISelectionsCallback: void onContentSelectionsAvailable(int,java.util.List)>",
        "implementationMethod" : "<android.app.contentsuggestions.ContentSuggestionsManager$SelectionsCallbackWrapper: void onContentSelectionsAvailable(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.wallpapereffectsgeneration.ICinematicEffectListener",
    "implementationName" : "android.app.wallpapereffectsgeneration.WallpaperEffectsGenerationManager$CinematicEffectListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.wallpapereffectsgeneration.ICinematicEffectListener: void onCinematicEffectGenerated(android.app.wallpapereffectsgeneration.CinematicEffectResponse)>",
        "implementationMethod" : "<android.app.wallpapereffectsgeneration.WallpaperEffectsGenerationManager$CinematicEffectListenerWrapper: void onCinematicEffectGenerated(android.app.wallpapereffectsgeneration.CinematicEffectResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.vr.IVrStateCallbacks",
    "implementationName" : "android.app.VrManager$CallbackEntry$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.vr.IVrStateCallbacks: void onVrStateChanged(boolean)>",
        "implementationMethod" : "<android.app.VrManager$CallbackEntry$1: void onVrStateChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.vr.IPersistentVrStateCallbacks",
    "implementationName" : "android.app.VrManager$CallbackEntry$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.vr.IPersistentVrStateCallbacks: void onPersistentVrStateChanged(boolean)>",
        "implementationMethod" : "<android.app.VrManager$CallbackEntry$2: void onPersistentVrStateChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.time.ITimeZoneDetectorListener",
    "implementationName" : "android.app.time.TimeManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.time.ITimeZoneDetectorListener: void onChange()>",
        "implementationMethod" : "<android.app.time.TimeManager$1: void onChange()>"
      }
    ]
  },
  {
    "interfaceName" : "android.permission.IPermissionController",
    "implementationName" : "android.permission.PermissionControllerService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void applyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void applyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void countPermissionApps(java.util.List,int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void countPermissionApps(java.util.List,int,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getAppPermissions(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getAppPermissions(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getGroupOfPlatformPermission(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getGroupOfPlatformPermission(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getHibernationEligibility(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getHibernationEligibility(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getPermissionUsages(boolean,long,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getPermissionUsages(boolean,long,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getPlatformPermissionsForGroup(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getPlatformPermissionsForGroup(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getPrivilegesDescriptionStringForProfile(java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getPrivilegesDescriptionStringForProfile(java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getRuntimePermissionBackup(android.os.UserHandle,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getRuntimePermissionBackup(android.os.UserHandle,android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void getUnusedAppCount(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void getUnusedAppCount(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void grantOrUpgradeDefaultRuntimePermissions(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void grantOrUpgradeDefaultRuntimePermissions(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void notifyOneTimePermissionSessionTimeout(java.lang.String)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void notifyOneTimePermissionSessionTimeout(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void revokeRuntimePermission(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void revokeRuntimePermission(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void revokeRuntimePermissions(android.os.Bundle,boolean,int,java.lang.String,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void revokeRuntimePermissions(android.os.Bundle,boolean,int,java.lang.String,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void revokeSelfPermissionsOnKill(java.lang.String,java.util.List,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void revokeSelfPermissionsOnKill(java.lang.String,java.util.List,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void setRuntimePermissionGrantStateByDeviceAdminFromParams(java.lang.String,android.permission.AdminPermissionControlParams,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void setRuntimePermissionGrantStateByDeviceAdminFromParams(java.lang.String,android.permission.AdminPermissionControlParams,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void stageAndApplyRuntimePermissionsBackup(android.os.UserHandle,android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void stageAndApplyRuntimePermissionsBackup(android.os.UserHandle,android.os.ParcelFileDescriptor)>"
      },
      {
        "interfaceMethod" : "<android.permission.IPermissionController: void updateUserSensitiveForApp(int,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.permission.PermissionControllerService$1: void updateUserSensitiveForApp(int,com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IDataLoader",
    "implementationName" : "android.service.dataloader.DataLoaderService$DataLoaderBinderService",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IDataLoader: void create(int,android.content.pm.DataLoaderParamsParcel,android.content.pm.FileSystemControlParcel,android.content.pm.IDataLoaderStatusListener)>",
        "implementationMethod" : "<android.service.dataloader.DataLoaderService$DataLoaderBinderService: void create(int,android.content.pm.DataLoaderParamsParcel,android.content.pm.FileSystemControlParcel,android.content.pm.IDataLoaderStatusListener)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IDataLoader: void destroy(int)>",
        "implementationMethod" : "<android.service.dataloader.DataLoaderService$DataLoaderBinderService: void destroy(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IDataLoader: void prepareImage(int,android.content.pm.InstallationFileParcel[],java.lang.String[])>",
        "implementationMethod" : "<android.service.dataloader.DataLoaderService$DataLoaderBinderService: void prepareImage(int,android.content.pm.InstallationFileParcel[],java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IDataLoader: void start(int)>",
        "implementationMethod" : "<android.service.dataloader.DataLoaderService$DataLoaderBinderService: void start(int)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IDataLoader: void stop(int)>",
        "implementationMethod" : "<android.service.dataloader.DataLoaderService$DataLoaderBinderService: void stop(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiControlService",
    "implementationName" : "android.hardware.hdmi.HdmiControlServiceWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void addCecSettingChangeListener(java.lang.String,android.hardware.hdmi.IHdmiCecSettingChangeListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void addCecSettingChangeListener(java.lang.String,android.hardware.hdmi.IHdmiCecSettingChangeListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void addDeviceEventListener(android.hardware.hdmi.IHdmiDeviceEventListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void addDeviceEventListener(android.hardware.hdmi.IHdmiDeviceEventListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void addHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void addHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void addHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void addHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void addHdmiMhlVendorCommandListener(android.hardware.hdmi.IHdmiMhlVendorCommandListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void addHdmiMhlVendorCommandListener(android.hardware.hdmi.IHdmiMhlVendorCommandListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void addSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void addSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void addVendorCommandListener(android.hardware.hdmi.IHdmiVendorCommandListener,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void addVendorCommandListener(android.hardware.hdmi.IHdmiVendorCommandListener,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void askRemoteDeviceToBecomeActiveSource(int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void askRemoteDeviceToBecomeActiveSource(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: boolean canChangeSystemAudioMode()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: boolean canChangeSystemAudioMode()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void clearTimerRecording(int,int,byte[])>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void clearTimerRecording(int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void deviceSelect(int,android.hardware.hdmi.IHdmiControlCallback)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void deviceSelect(int,android.hardware.hdmi.IHdmiControlCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: android.hardware.hdmi.HdmiDeviceInfo getActiveSource()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: android.hardware.hdmi.HdmiDeviceInfo getActiveSource()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: int[] getAllowedCecSettingIntValues(java.lang.String)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: int[] getAllowedCecSettingIntValues(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: java.util.List getAllowedCecSettingStringValues(java.lang.String)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: java.util.List getAllowedCecSettingStringValues(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: int getCecSettingIntValue(java.lang.String)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: int getCecSettingIntValue(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: java.lang.String getCecSettingStringValue(java.lang.String)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: java.lang.String getCecSettingStringValue(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: java.util.List getDeviceList()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: java.util.List getDeviceList()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: java.util.List getInputDevices()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: java.util.List getInputDevices()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: int getMessageHistorySize()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: int getMessageHistorySize()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: int getPhysicalAddress()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: int getPhysicalAddress()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: java.util.List getPortInfo()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: java.util.List getPortInfo()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: int[] getSupportedTypes()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: int[] getSupportedTypes()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: boolean getSystemAudioMode()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: boolean getSystemAudioMode()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: java.util.List getUserCecSettings()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: java.util.List getUserCecSettings()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void portSelect(int,android.hardware.hdmi.IHdmiControlCallback)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void portSelect(int,android.hardware.hdmi.IHdmiControlCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void powerOffRemoteDevice(int,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void powerOffRemoteDevice(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void powerOnRemoteDevice(int,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void powerOnRemoteDevice(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void removeCecSettingChangeListener(java.lang.String,android.hardware.hdmi.IHdmiCecSettingChangeListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void removeCecSettingChangeListener(java.lang.String,android.hardware.hdmi.IHdmiCecSettingChangeListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void removeHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void removeHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void removeHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void removeHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void removeHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void removeHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void removeSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void removeSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void reportAudioStatus(int,int,int,boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void reportAudioStatus(int,int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void sendKeyEvent(int,int,boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void sendKeyEvent(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void sendMhlVendorCommand(int,int,int,byte[])>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void sendMhlVendorCommand(int,int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void sendStandby(int,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void sendStandby(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void sendVendorCommand(int,int,byte[],boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void sendVendorCommand(int,int,byte[],boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void sendVolumeKeyEvent(int,int,boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void sendVolumeKeyEvent(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setArcMode(boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setArcMode(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setCecSettingIntValue(java.lang.String,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setCecSettingIntValue(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setCecSettingStringValue(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setCecSettingStringValue(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setHdmiRecordListener(android.hardware.hdmi.IHdmiRecordListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setHdmiRecordListener(android.hardware.hdmi.IHdmiRecordListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setInputChangeListener(android.hardware.hdmi.IHdmiInputChangeListener)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setInputChangeListener(android.hardware.hdmi.IHdmiInputChangeListener)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: boolean setMessageHistorySize(int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: boolean setMessageHistorySize(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setProhibitMode(boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setProhibitMode(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setStandbyMode(boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setStandbyMode(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setSystemAudioMode(boolean,android.hardware.hdmi.IHdmiControlCallback)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setSystemAudioMode(boolean,android.hardware.hdmi.IHdmiControlCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setSystemAudioModeOnForAudioOnlySource()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setSystemAudioModeOnForAudioOnlySource()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setSystemAudioMute(boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setSystemAudioMute(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void setSystemAudioVolume(int,int,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void setSystemAudioVolume(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: boolean shouldHandleTvPowerKey()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: boolean shouldHandleTvPowerKey()>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void startOneTouchRecord(int,byte[])>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void startOneTouchRecord(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void startTimerRecording(int,int,byte[])>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void startTimerRecording(int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void stopOneTouchRecord(int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void stopOneTouchRecord(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlService: void toggleAndFollowTvPower()>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlServiceWrapper$1: void toggleAndFollowTvPower()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener",
    "implementationName" : "android.hardware.hdmi.HdmiControlManager$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener: void onHdmiCecVolumeControlFeature(int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlManager$3: void onHdmiCecVolumeControlFeature(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiCecSettingChangeListener",
    "implementationName" : "android.hardware.hdmi.HdmiControlManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiCecSettingChangeListener: void onChange(java.lang.String)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlManager$4: void onChange(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiControlStatusChangeListener",
    "implementationName" : "android.hardware.hdmi.HdmiControlManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiControlStatusChangeListener: void onStatusChange(int,boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlManager$2: void onStatusChange(int,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiHotplugEventListener",
    "implementationName" : "android.hardware.hdmi.HdmiControlManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiHotplugEventListener: void onReceived(android.hardware.hdmi.HdmiHotplugEvent)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiControlManager$1: void onReceived(android.hardware.hdmi.HdmiHotplugEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiMhlVendorCommandListener",
    "implementationName" : "android.hardware.hdmi.HdmiTvClient$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiMhlVendorCommandListener: void onReceived(int,int,int,byte[])>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$4: void onReceived(int,int,int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiVendorCommandListener",
    "implementationName" : "android.hardware.hdmi.HdmiClient$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiVendorCommandListener: void onControlStateChanged(boolean,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiClient$2: void onControlStateChanged(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiVendorCommandListener: void onReceived(int,int,byte[],boolean)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiClient$2: void onReceived(int,int,byte[],boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiRecordListener",
    "implementationName" : "android.hardware.hdmi.HdmiTvClient$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiRecordListener: byte[] getOneTouchRecordSource(int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$3: byte[] getOneTouchRecordSource(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiRecordListener: void onClearTimerRecordingResult(int,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$3: void onClearTimerRecordingResult(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiRecordListener: void onOneTouchRecordResult(int,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$3: void onOneTouchRecordResult(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiRecordListener: void onTimerRecordingResult(int,int)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$3: void onTimerRecordingResult(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.hdmi.IHdmiInputChangeListener",
    "implementationName" : "android.hardware.hdmi.HdmiTvClient$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.hdmi.IHdmiInputChangeListener: void onChanged(android.hardware.hdmi.HdmiDeviceInfo)>",
        "implementationMethod" : "<android.hardware.hdmi.HdmiTvClient$2: void onChanged(android.hardware.hdmi.HdmiDeviceInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.incremental.IStorageLoadingProgressListener",
    "implementationName" : "android.os.incremental.IncrementalManager$LoadingProgressCallbacks",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.incremental.IStorageLoadingProgressListener: void onStorageLoadingProgressChanged(int,float)>",
        "implementationMethod" : "<android.os.incremental.IncrementalManager$LoadingProgressCallbacks: void onStorageLoadingProgressChanged(int,float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.devicestate.IDeviceStateManagerCallback",
    "implementationName" : "android.hardware.devicestate.DeviceStateManagerGlobal$DeviceStateManagerCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManagerCallback: void onDeviceStateInfoChanged(android.hardware.devicestate.DeviceStateInfo)>",
        "implementationMethod" : "<android.hardware.devicestate.DeviceStateManagerGlobal$DeviceStateManagerCallback: void onDeviceStateInfoChanged(android.hardware.devicestate.DeviceStateInfo)>"
      },
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManagerCallback: void onRequestActive(android.os.IBinder)>",
        "implementationMethod" : "<android.hardware.devicestate.DeviceStateManagerGlobal$DeviceStateManagerCallback: void onRequestActive(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.hardware.devicestate.IDeviceStateManagerCallback: void onRequestCanceled(android.os.IBinder)>",
        "implementationMethod" : "<android.hardware.devicestate.DeviceStateManagerGlobal$DeviceStateManagerCallback: void onRequestCanceled(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.ambientcontext.IAmbientContextObserver",
    "implementationName" : "android.app.ambientcontext.AmbientContextManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.ambientcontext.IAmbientContextObserver: void onEvents(java.util.List)>",
        "implementationMethod" : "<android.app.ambientcontext.AmbientContextManager$1: void onEvents(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.app.ambientcontext.IAmbientContextObserver: void onRegistrationComplete(int)>",
        "implementationMethod" : "<android.app.ambientcontext.AmbientContextManager$1: void onRegistrationComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.sharedconnectivity.service.ISharedConnectivityService",
    "implementationName" : "android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void connectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void connectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void connectKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void connectKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void disconnectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void disconnectHotspotNetwork(android.net.wifi.sharedconnectivity.app.HotspotNetwork)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void forgetKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void forgetKnownNetwork(android.net.wifi.sharedconnectivity.app.KnownNetwork)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus getHotspotNetworkConnectionStatus()>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus getHotspotNetworkConnectionStatus()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: java.util.List getHotspotNetworks()>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: java.util.List getHotspotNetworks()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus getKnownNetworkConnectionStatus()>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus getKnownNetworkConnectionStatus()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: java.util.List getKnownNetworks()>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: java.util.List getKnownNetworks()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState getSettingsState()>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState getSettingsState()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void registerCallback(android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void registerCallback(android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityService: void unregisterCallback(android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.service.SharedConnectivityService$1: void unregisterCallback(android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback",
    "implementationName" : "android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onHotspotNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onHotspotNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onHotspotNetworksUpdated(java.util.List)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onHotspotNetworksUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onKnownNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onKnownNetworkConnectionStatusChanged(android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onKnownNetworksUpdated(java.util.List)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onKnownNetworksUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.sharedconnectivity.service.ISharedConnectivityCallback: void onSharedConnectivitySettingsChanged(android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState)>",
        "implementationMethod" : "<android.net.wifi.sharedconnectivity.app.SharedConnectivityManager$SharedConnectivityCallbackProxy: void onSharedConnectivitySettingsChanged(android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.selectiontoolbar.ISelectionToolbarCallback",
    "implementationName" : "com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarCallback: void onError(int)>",
        "implementationMethod" : "<com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarCallback: void onMenuItemClicked(android.view.selectiontoolbar.ToolbarMenuItem)>",
        "implementationMethod" : "<com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl: void onMenuItemClicked(android.view.selectiontoolbar.ToolbarMenuItem)>"
      },
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarCallback: void onShown(android.view.selectiontoolbar.WidgetInfo)>",
        "implementationMethod" : "<com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl: void onShown(android.view.selectiontoolbar.WidgetInfo)>"
      },
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarCallback: void onToolbarShowTimeout()>",
        "implementationMethod" : "<com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl: void onToolbarShowTimeout()>"
      },
      {
        "interfaceMethod" : "<android.view.selectiontoolbar.ISelectionToolbarCallback: void onWidgetUpdated(android.view.selectiontoolbar.WidgetInfo)>",
        "implementationMethod" : "<com.android.internal.widget.floatingtoolbar.RemoteFloatingToolbarPopup$SelectionToolbarCallbackImpl: void onWidgetUpdated(android.view.selectiontoolbar.WidgetInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.IPacProxyInstalledListener",
    "implementationName" : "android.net.PacProxyManager$PacProxyInstalledListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.IPacProxyInstalledListener: void onPacProxyInstalled(android.net.Network,android.net.ProxyInfo)>",
        "implementationMethod" : "<android.net.PacProxyManager$PacProxyInstalledListenerProxy: void onPacProxyInstalled(android.net.Network,android.net.ProxyInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.vcn.IVcnUnderlyingNetworkPolicyListener",
    "implementationName" : "android.net.vcn.VcnManager$VcnUnderlyingNetworkPolicyListenerBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.vcn.IVcnUnderlyingNetworkPolicyListener: void onPolicyChanged()>",
        "implementationMethod" : "<android.net.vcn.VcnManager$VcnUnderlyingNetworkPolicyListenerBinder: void onPolicyChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.vcn.IVcnStatusCallback",
    "implementationName" : "android.net.vcn.VcnManager$VcnStatusCallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.vcn.IVcnStatusCallback: void onGatewayConnectionError(java.lang.String,int,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.net.vcn.VcnManager$VcnStatusCallbackBinder: void onGatewayConnectionError(java.lang.String,int,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.vcn.IVcnStatusCallback: void onVcnStatusChanged(int)>",
        "implementationMethod" : "<android.net.vcn.VcnManager$VcnStatusCallbackBinder: void onVcnStatusChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.ICountryListener",
    "implementationName" : "android.location.CountryDetector$ListenerTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.ICountryListener: void onCountryDetected(android.location.Country)>",
        "implementationMethod" : "<android.location.CountryDetector$ListenerTransport: void onCountryDetected(android.location.Country)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.IInputSensorEventListener",
    "implementationName" : "android.hardware.input.InputDeviceSensorManager$InputSensorEventListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.IInputSensorEventListener: void onInputSensorAccuracyChanged(int,int,int)>",
        "implementationMethod" : "<android.hardware.input.InputDeviceSensorManager$InputSensorEventListener: void onInputSensorAccuracyChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.input.IInputSensorEventListener: void onInputSensorChanged(int,int,int,long,float[])>",
        "implementationMethod" : "<android.hardware.input.InputDeviceSensorManager$InputSensorEventListener: void onInputSensorChanged(int,int,int,long,float[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.IInputDeviceBatteryListener",
    "implementationName" : "android.hardware.input.InputManagerGlobal$LocalInputDeviceBatteryListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.IInputDeviceBatteryListener: void onBatteryStateChanged(android.hardware.input.IInputDeviceBatteryState)>",
        "implementationMethod" : "<android.hardware.input.InputManagerGlobal$LocalInputDeviceBatteryListener: void onBatteryStateChanged(android.hardware.input.IInputDeviceBatteryState)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.IKeyboardBacklightListener",
    "implementationName" : "android.hardware.input.InputManagerGlobal$LocalKeyboardBacklightListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.IKeyboardBacklightListener: void onBrightnessChanged(int,android.hardware.input.IKeyboardBacklightState,boolean)>",
        "implementationMethod" : "<android.hardware.input.InputManagerGlobal$LocalKeyboardBacklightListener: void onBrightnessChanged(int,android.hardware.input.IKeyboardBacklightState,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.IInputDevicesChangedListener",
    "implementationName" : "android.hardware.input.InputManagerGlobal$InputDevicesChangedListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.IInputDevicesChangedListener: void onInputDevicesChanged(int[])>",
        "implementationMethod" : "<android.hardware.input.InputManagerGlobal$InputDevicesChangedListener: void onInputDevicesChanged(int[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.input.ITabletModeChangedListener",
    "implementationName" : "android.hardware.input.InputManagerGlobal$TabletModeChangedListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.input.ITabletModeChangedListener: void onTabletModeChanged(long,boolean)>",
        "implementationMethod" : "<android.hardware.input.InputManagerGlobal$TabletModeChangedListener: void onTabletModeChanged(long,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGnssAntennaInfoListener",
    "implementationName" : "android.location.LocationManager$GnssAntennaInfoTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGnssAntennaInfoListener: void onGnssAntennaInfoChanged(java.util.List)>",
        "implementationMethod" : "<android.location.LocationManager$GnssAntennaInfoTransport: void onGnssAntennaInfoChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGnssMeasurementsListener",
    "implementationName" : "android.location.LocationManager$GnssMeasurementsTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGnssMeasurementsListener: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>",
        "implementationMethod" : "<android.location.LocationManager$GnssMeasurementsTransport: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>"
      },
      {
        "interfaceMethod" : "<android.location.IGnssMeasurementsListener: void onStatusChanged(int)>",
        "implementationMethod" : "<android.location.LocationManager$GnssMeasurementsTransport: void onStatusChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGnssNavigationMessageListener",
    "implementationName" : "android.location.LocationManager$GnssNavigationTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGnssNavigationMessageListener: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)>",
        "implementationMethod" : "<android.location.LocationManager$GnssNavigationTransport: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)>"
      },
      {
        "interfaceMethod" : "<android.location.IGnssNavigationMessageListener: void onStatusChanged(int)>",
        "implementationMethod" : "<android.location.LocationManager$GnssNavigationTransport: void onStatusChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.provider.IProviderRequestListener",
    "implementationName" : "android.location.LocationManager$ProviderRequestTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.provider.IProviderRequestListener: void onProviderRequestChanged(java.lang.String,android.location.provider.ProviderRequest)>",
        "implementationMethod" : "<android.location.LocationManager$ProviderRequestTransport: void onProviderRequestChanged(java.lang.String,android.location.provider.ProviderRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.ILocationCallback",
    "implementationName" : "android.location.LocationManager$GetCurrentLocationTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.ILocationCallback: void onLocation(android.location.Location)>",
        "implementationMethod" : "<android.location.LocationManager$GetCurrentLocationTransport: void onLocation(android.location.Location)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGeocodeListener",
    "implementationName" : "android.location.Geocoder$GeocoderImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGeocodeListener: void onResults(java.lang.String,java.util.List)>",
        "implementationMethod" : "<android.location.Geocoder$GeocoderImpl: void onResults(java.lang.String,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGnssNmeaListener",
    "implementationName" : "android.location.LocationManager$GnssNmeaTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGnssNmeaListener: void onNmeaReceived(long,java.lang.String)>",
        "implementationMethod" : "<android.location.LocationManager$GnssNmeaTransport: void onNmeaReceived(long,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.IGnssStatusListener",
    "implementationName" : "android.location.LocationManager$GnssStatusTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.IGnssStatusListener: void onFirstFix(int)>",
        "implementationMethod" : "<android.location.LocationManager$GnssStatusTransport: void onFirstFix(int)>"
      },
      {
        "interfaceMethod" : "<android.location.IGnssStatusListener: void onGnssStarted()>",
        "implementationMethod" : "<android.location.LocationManager$GnssStatusTransport: void onGnssStarted()>"
      },
      {
        "interfaceMethod" : "<android.location.IGnssStatusListener: void onGnssStopped()>",
        "implementationMethod" : "<android.location.LocationManager$GnssStatusTransport: void onGnssStopped()>"
      },
      {
        "interfaceMethod" : "<android.location.IGnssStatusListener: void onSvStatusChanged(android.location.GnssStatus)>",
        "implementationMethod" : "<android.location.LocationManager$GnssStatusTransport: void onSvStatusChanged(android.location.GnssStatus)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.ILocationListener",
    "implementationName" : "android.location.LocationManager$LocationListenerTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.ILocationListener: void onFlushComplete(int)>",
        "implementationMethod" : "<android.location.LocationManager$LocationListenerTransport: void onFlushComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationListener: void onLocationChanged(java.util.List,android.os.IRemoteCallback)>",
        "implementationMethod" : "<android.location.LocationManager$LocationListenerTransport: void onLocationChanged(java.util.List,android.os.IRemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.location.ILocationListener: void onProviderEnabledChanged(java.lang.String,boolean)>",
        "implementationMethod" : "<android.location.LocationManager$LocationListenerTransport: void onProviderEnabledChanged(java.lang.String,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.INetworkPolicyListener",
    "implementationName" : "android.net.NetworkPolicyManager$Listener",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onBlockedReasonChanged(int,int,int)>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onBlockedReasonChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onMeteredIfacesChanged(java.lang.String[])>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onMeteredIfacesChanged(java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onRestrictBackgroundChanged(boolean)>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onRestrictBackgroundChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onSubscriptionOverride(int,int,int,int[])>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onSubscriptionOverride(int,int,int,int[])>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onSubscriptionPlansChanged(int,android.telephony.SubscriptionPlan[])>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onSubscriptionPlansChanged(int,android.telephony.SubscriptionPlan[])>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onUidPoliciesChanged(int,int)>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onUidPoliciesChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkPolicyListener: void onUidRulesChanged(int,int)>",
        "implementationMethod" : "<android.net.NetworkPolicyManager$Listener: void onUidRulesChanged(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.people.IConversationListener",
    "implementationName" : "android.app.people.PeopleManager$ConversationListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.people.IConversationListener: void onConversationUpdate(android.app.people.ConversationChannel)>",
        "implementationMethod" : "<android.app.people.PeopleManager$ConversationListenerProxy: void onConversationUpdate(android.app.people.ConversationChannel)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IWakeLockCallback",
    "implementationName" : "android.os.PowerManager$WakeLock$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IWakeLockCallback: void onStateChanged(boolean)>",
        "implementationMethod" : "<android.os.PowerManager$WakeLock$1: void onStateChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IThermalStatusListener",
    "implementationName" : "android.os.PowerManager$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IThermalStatusListener: void onStatusChange(int)>",
        "implementationMethod" : "<android.os.PowerManager$3: void onStatusChange(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IRecoverySystemProgressListener",
    "implementationName" : "android.os.RecoverySystem$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IRecoverySystemProgressListener: void onProgress(int)>",
        "implementationMethod" : "<android.os.RecoverySystem$2: void onProgress(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ICarrierConfigChangeListener",
    "implementationName" : "android.telephony.TelephonyRegistryManager$3",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ICarrierConfigChangeListener: void onCarrierConfigChanged(int,int,int,int)>",
        "implementationMethod" : "<android.telephony.TelephonyRegistryManager$3: void onCarrierConfigChanged(int,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ICarrierPrivilegesCallback",
    "implementationName" : "android.telephony.TelephonyRegistryManager$CarrierPrivilegesCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ICarrierPrivilegesCallback: void onCarrierPrivilegesChanged(java.util.List,int[])>",
        "implementationMethod" : "<android.telephony.TelephonyRegistryManager$CarrierPrivilegesCallbackWrapper: void onCarrierPrivilegesChanged(java.util.List,int[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ICarrierPrivilegesCallback: void onCarrierServiceChanged(java.lang.String,int)>",
        "implementationMethod" : "<android.telephony.TelephonyRegistryManager$CarrierPrivilegesCallbackWrapper: void onCarrierServiceChanged(java.lang.String,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ISms",
    "implementationName" : "com.android.internal.telephony.ISmsImplBase",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void clearStorageMonitorMemoryStatusOverride(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void clearStorageMonitorMemoryStatusOverride(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,byte[],byte[])>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,byte[],byte[])>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean disableCellBroadcastForSubscriber(int,int,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean disableCellBroadcastForSubscriber(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean enableCellBroadcastForSubscriber(int,int,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean enableCellBroadcastForSubscriber(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: android.os.Bundle getCarrierConfigValuesForSubscriber(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: android.os.Bundle getCarrierConfigValuesForSubscriber(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: java.lang.String getImsSmsFormatForSubscriber(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: java.lang.String getImsSmsFormatForSubscriber(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: int getPreferredSmsSubscription()>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: int getPreferredSmsSubscription()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: int getPremiumSmsPermission(java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: int getPremiumSmsPermission(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: int getPremiumSmsPermissionForSubscriber(int,java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: int getPremiumSmsPermissionForSubscriber(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: int getSmsCapacityOnIccForSubscriber(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: int getSmsCapacityOnIccForSubscriber(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: java.lang.String getSmscAddressFromIccEfForSubscriber(int,java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: java.lang.String getSmscAddressFromIccEfForSubscriber(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean isImsSmsSupportedForSubscriber(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean isImsSmsSupportedForSubscriber(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean isSMSPromptEnabled()>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean isSMSPromptEnabled()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean isSmsSimPickActivityNeeded(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean isSmsSimPickActivityNeeded(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean resetAllCellBroadcastRanges(int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean resetAllCellBroadcastRanges(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void setPremiumSmsPermission(java.lang.String,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void setPremiumSmsPermission(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void setPremiumSmsPermissionForSubscriber(int,java.lang.String,int)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void setPremiumSmsPermissionForSubscriber(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean setSmscAddressOnIccEfForSubscriber(java.lang.String,int,java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean setSmscAddressOnIccEfForSubscriber(java.lang.String,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: void setStorageMonitorMemoryStatusOverride(int,boolean)>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: void setStorageMonitorMemoryStatusOverride(int,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISms: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])>",
        "implementationMethod" : "<com.android.internal.telephony.ISmsImplBase: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsConfig",
    "implementationName" : "android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void addImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void addImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void addRcsConfigCallback(android.telephony.ims.aidl.IRcsConfigCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void addRcsConfigCallback(android.telephony.ims.aidl.IRcsConfigCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: int getConfigInt(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: int getConfigInt(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: java.lang.String getConfigString(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: java.lang.String getConfigString(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void notifyIntImsConfigChanged(int,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void notifyIntImsConfigChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void notifyRcsAutoConfigurationReceived(byte[],boolean)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void notifyRcsAutoConfigurationReceived(byte[],boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void notifyRcsAutoConfigurationRemoved()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void notifyRcsAutoConfigurationRemoved()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void notifyStringImsConfigChanged(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void notifyStringImsConfigChanged(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void removeImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void removeImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void removeRcsConfigCallback(android.telephony.ims.aidl.IRcsConfigCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void removeRcsConfigCallback(android.telephony.ims.aidl.IRcsConfigCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: int setConfigInt(int,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: int setConfigInt(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: int setConfigString(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: int setConfigString(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void setRcsClientConfiguration(android.telephony.ims.RcsClientConfiguration)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void setRcsClientConfiguration(android.telephony.ims.RcsClientConfiguration)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void triggerRcsReconfiguration()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void triggerRcsReconfiguration()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfig: void updateImsCarrierConfigs(android.os.PersistableBundle)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void updateImsCarrierConfigs(android.os.PersistableBundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsRegistration",
    "implementationName" : "android.telephony.ims.stub.ImsRegistrationImplBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void addRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void addRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: int getRegistrationTechnology()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: int getRegistrationTechnology()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void removeRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void removeRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void triggerDeregistration(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void triggerDeregistration(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void triggerFullNetworkRegistration(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void triggerFullNetworkRegistration(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void triggerSipDelegateDeregistration()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void triggerSipDelegateDeregistration()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistration: void triggerUpdateSipDelegateRegistration()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsRegistrationImplBase$1: void triggerUpdateSipDelegateRegistration()>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.IBootstrapAuthenticationCallback",
    "implementationName" : "android.telephony.TelephonyManager$18",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.IBootstrapAuthenticationCallback: void onAuthenticationFailure(int,int)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$18: void onAuthenticationFailure(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.IBootstrapAuthenticationCallback: void onKeysAvailable(int,byte[],java.lang.String)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$18: void onKeysAvailable(int,byte[],java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ICallForwardingInfoCallback",
    "implementationName" : "android.telephony.TelephonyManager$14",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ICallForwardingInfoCallback: void onCallForwardingInfoAvailable(android.telephony.CallForwardingInfo)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$14: void onCallForwardingInfoAvailable(android.telephony.CallForwardingInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.ICallForwardingInfoCallback: void onError(int)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$14: void onError(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IFeatureProvisioningCallback",
    "implementationName" : "android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback$CallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IFeatureProvisioningCallback: void onFeatureProvisioningChanged(int,int,boolean)>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback$CallbackBinder: void onFeatureProvisioningChanged(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IFeatureProvisioningCallback: void onRcsFeatureProvisioningChanged(int,int,boolean)>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback$CallbackBinder: void onRcsFeatureProvisioningChanged(int,int,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.ISatelliteDatagramCallback",
    "implementationName" : "android.telephony.satellite.SatelliteManager$14",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteDatagramCallback: void onSatelliteDatagramReceived(long,android.telephony.satellite.SatelliteDatagram,int,com.android.internal.telephony.IVoidConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$14: void onSatelliteDatagramReceived(long,android.telephony.satellite.SatelliteDatagram,int,com.android.internal.telephony.IVoidConsumer)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.ISatelliteStateCallback",
    "implementationName" : "android.telephony.satellite.SatelliteManager$13",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteStateCallback: void onSatelliteModemStateChanged(int)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$13: void onSatelliteModemStateChanged(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.ISatelliteProvisionStateCallback",
    "implementationName" : "android.telephony.satellite.SatelliteManager$11",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteProvisionStateCallback: void onSatelliteProvisionStateChanged(boolean)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$11: void onSatelliteProvisionStateChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsConfigCallback",
    "implementationName" : "android.telephony.ims.ProvisioningManager$Callback$CallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfigCallback: void onIntConfigChanged(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$Callback$CallbackBinder: void onIntConfigChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsConfigCallback: void onStringConfigChanged(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$Callback$CallbackBinder: void onStringConfigChanged(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsRegistrationCallback",
    "implementationName" : "android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onDeregistered(android.telephony.ims.ImsReasonInfo,int,int)>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onDeregistered(android.telephony.ims.ImsReasonInfo,int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onDeregisteredWithDetails(android.telephony.ims.ImsReasonInfo,int,int,android.telephony.ims.SipDetails)>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onDeregisteredWithDetails(android.telephony.ims.ImsReasonInfo,int,int,android.telephony.ims.SipDetails)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onRegistered(android.telephony.ims.ImsRegistrationAttributes)>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onRegistered(android.telephony.ims.ImsRegistrationAttributes)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onRegistering(android.telephony.ims.ImsRegistrationAttributes)>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onRegistering(android.telephony.ims.ImsRegistrationAttributes)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onSubscriberAssociatedUriChanged(android.net.Uri[])>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onSubscriberAssociatedUriChanged(android.net.Uri[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRegistrationCallback: void onTechnologyChangeFailed(int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void onTechnologyChangeFailed(int,android.telephony.ims.ImsReasonInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IImsStateCallback",
    "implementationName" : "android.telephony.ims.ImsStateCallback$IImsStateCallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IImsStateCallback: void onAvailable()>",
        "implementationMethod" : "<android.telephony.ims.ImsStateCallback$IImsStateCallbackStub: void onAvailable()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IImsStateCallback: void onUnavailable(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsStateCallback$IImsStateCallbackStub: void onUnavailable(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IRcsConfigCallback",
    "implementationName" : "android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsConfigCallback: void onAutoConfigurationErrorReceived(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder: void onAutoConfigurationErrorReceived(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsConfigCallback: void onConfigurationChanged(byte[])>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder: void onConfigurationChanged(byte[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsConfigCallback: void onConfigurationReset()>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder: void onConfigurationReset()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsConfigCallback: void onPreProvisioningReceived(byte[])>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder: void onPreProvisioningReceived(byte[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsConfigCallback: void onRemoved()>",
        "implementationMethod" : "<android.telephony.ims.ProvisioningManager$RcsProvisioningCallback$CallbackBinder: void onRemoved()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.INumberVerificationCallback",
    "implementationName" : "android.telephony.TelephonyManager$6",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.INumberVerificationCallback: void onCallReceived(java.lang.String)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$6: void onCallReceived(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.INumberVerificationCallback: void onVerificationFailed(int)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$6: void onVerificationFailed(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IBooleanConsumer",
    "implementationName" : "android.telephony.TelephonyManager$13",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IBooleanConsumer: void accept(boolean)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$13: void accept(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.ISatelliteTransmissionUpdateCallback",
    "implementationName" : "android.telephony.satellite.SatelliteManager$7",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteTransmissionUpdateCallback: void onReceiveDatagramStateChanged(int,int,int)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$7: void onReceiveDatagramStateChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteTransmissionUpdateCallback: void onSatellitePositionChanged(android.telephony.satellite.PointingInfo)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$7: void onSatellitePositionChanged(android.telephony.satellite.PointingInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.ISatelliteTransmissionUpdateCallback: void onSendDatagramStateChanged(int,int,int)>",
        "implementationMethod" : "<android.telephony.satellite.SatelliteManager$7: void onSendDatagramStateChanged(int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IUpdateAvailableNetworksCallback",
    "implementationName" : "android.telephony.TelephonyManager$12",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IUpdateAvailableNetworksCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.TelephonyManager$12: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.ISipTransport",
    "implementationName" : "android.telephony.ims.stub.SipTransportImplBase$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipTransport: void createSipDelegate(int,android.telephony.ims.DelegateRequest,android.telephony.ims.aidl.ISipDelegateStateCallback,android.telephony.ims.aidl.ISipDelegateMessageCallback)>",
        "implementationMethod" : "<android.telephony.ims.stub.SipTransportImplBase$2: void createSipDelegate(int,android.telephony.ims.DelegateRequest,android.telephony.ims.aidl.ISipDelegateStateCallback,android.telephony.ims.aidl.ISipDelegateMessageCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipTransport: void destroySipDelegate(android.telephony.ims.aidl.ISipDelegate,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.SipTransportImplBase$2: void destroySipDelegate(android.telephony.ims.aidl.ISipDelegate,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.ISipDelegateMessageCallback",
    "implementationName" : "android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateMessageCallback: void onMessageReceived(android.telephony.ims.SipMessage)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$2: void onMessageReceived(android.telephony.ims.SipMessage)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateMessageCallback: void onMessageSendFailure(java.lang.String,int)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$2: void onMessageSendFailure(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateMessageCallback: void onMessageSent(java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$2: void onMessageSent(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.ISipDelegate",
    "implementationName" : "android.telephony.ims.aidl.SipDelegateAidlWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegate: void cleanupSession(java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateAidlWrapper$1: void cleanupSession(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegate: void notifyMessageReceiveError(java.lang.String,int)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateAidlWrapper$1: void notifyMessageReceiveError(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegate: void notifyMessageReceived(java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateAidlWrapper$1: void notifyMessageReceived(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegate: void sendMessage(android.telephony.ims.SipMessage,long)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateAidlWrapper$1: void sendMessage(android.telephony.ims.SipMessage,long)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.ICallEventCallback",
    "implementationName" : "com.android.internal.telecom.ClientTransactionalServiceWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onAddCallControl(java.lang.String,int,com.android.internal.telecom.ICallControl,android.telecom.CallException)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onAddCallControl(java.lang.String,int,com.android.internal.telecom.ICallControl,android.telecom.CallException)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onAnswer(java.lang.String,int,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onAnswer(java.lang.String,int,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onAvailableCallEndpointsChanged(java.lang.String,java.util.List)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onAvailableCallEndpointsChanged(java.lang.String,java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onCallEndpointChanged(java.lang.String,android.telecom.CallEndpoint)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onCallEndpointChanged(java.lang.String,android.telecom.CallEndpoint)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onCallStreamingFailed(java.lang.String,int)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onCallStreamingFailed(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onCallStreamingStarted(java.lang.String,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onCallStreamingStarted(java.lang.String,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onDisconnect(java.lang.String,android.telecom.DisconnectCause,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onDisconnect(java.lang.String,android.telecom.DisconnectCause,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onMuteStateChanged(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onMuteStateChanged(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onSetActive(java.lang.String,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onSetActive(java.lang.String,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void onSetInactive(java.lang.String,android.os.ResultReceiver)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void onSetInactive(java.lang.String,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallEventCallback: void removeCallFromTransactionalServiceWrapper(java.lang.String)>",
        "implementationMethod" : "<com.android.internal.telecom.ClientTransactionalServiceWrapper$1: void removeCallFromTransactionalServiceWrapper(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.usb.IUsbOperationInternal",
    "implementationName" : "android.hardware.usb.UsbOperationInternal",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbOperationInternal: void onOperationComplete(int)>",
        "implementationMethod" : "<android.hardware.usb.UsbOperationInternal: void onOperationComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.usb.IDisplayPortAltModeInfoListener",
    "implementationName" : "android.hardware.usb.UsbManager$DisplayPortAltModeInfoDispatchingListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.usb.IDisplayPortAltModeInfoListener: void onDisplayPortAltModeInfoChanged(java.lang.String,android.hardware.usb.DisplayPortAltModeInfo)>",
        "implementationMethod" : "<android.hardware.usb.UsbManager$DisplayPortAltModeInfoDispatchingListener: void onDisplayPortAltModeInfoChanged(java.lang.String,android.hardware.usb.DisplayPortAltModeInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.usb.IUsbSerialReader",
    "implementationName" : "android.hardware.usb.UsbAccessory$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.usb.IUsbSerialReader: java.lang.String getSerial(java.lang.String)>",
        "implementationMethod" : "<android.hardware.usb.UsbAccessory$1: java.lang.String getSerial(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.nl80211.IWificondEventCallback",
    "implementationName" : "android.net.wifi.nl80211.WifiNl80211Manager$WificondEventHandler",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IWificondEventCallback: void OnRegDomainChanged(java.lang.String)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$WificondEventHandler: void OnRegDomainChanged(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.nl80211.IApInterfaceEventCallback",
    "implementationName" : "android.net.wifi.nl80211.WifiNl80211Manager$ApInterfaceEventCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IApInterfaceEventCallback: void onConnectedClientsChanged(android.net.wifi.nl80211.NativeWifiClient,boolean)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$ApInterfaceEventCallback: void onConnectedClientsChanged(android.net.wifi.nl80211.NativeWifiClient,boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IApInterfaceEventCallback: void onSoftApChannelSwitched(int,int)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$ApInterfaceEventCallback: void onSoftApChannelSwitched(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.nl80211.ISendMgmtFrameEvent",
    "implementationName" : "android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameEvent",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.ISendMgmtFrameEvent: void OnAck(int)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameEvent: void OnAck(int)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.ISendMgmtFrameEvent: void OnFailure(int)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameEvent: void OnFailure(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.nl80211.IPnoScanEvent",
    "implementationName" : "android.net.wifi.nl80211.WifiNl80211Manager$PnoScanEventHandler",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IPnoScanEvent: void OnPnoNetworkFound()>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$PnoScanEventHandler: void OnPnoNetworkFound()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IPnoScanEvent: void OnPnoScanFailed()>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$PnoScanEventHandler: void OnPnoScanFailed()>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.wifi.nl80211.IScanEvent",
    "implementationName" : "android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IScanEvent: void OnScanFailed()>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler: void OnScanFailed()>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IScanEvent: void OnScanRequestFailed(int)>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler: void OnScanRequestFailed(int)>"
      },
      {
        "interfaceMethod" : "<android.net.wifi.nl80211.IScanEvent: void OnScanResultReady()>",
        "implementationMethod" : "<android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler: void OnScanResultReady()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.camera2.ICameraInjectionCallback",
    "implementationName" : "android.hardware.camera2.impl.CameraInjectionSessionImpl$CameraInjectionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.camera2.ICameraInjectionCallback: void onInjectionError(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraInjectionSessionImpl$CameraInjectionCallback: void onInjectionError(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.camera2.extension.IRequestProcessorImpl",
    "implementationName" : "android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: void abortCaptures()>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: void abortCaptures()>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: void setImageProcessor(android.hardware.camera2.extension.OutputConfigId,android.hardware.camera2.extension.IImageProcessorImpl)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: void setImageProcessor(android.hardware.camera2.extension.OutputConfigId,android.hardware.camera2.extension.IImageProcessorImpl)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: int setRepeating(android.hardware.camera2.extension.Request,android.hardware.camera2.extension.IRequestCallback)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: int setRepeating(android.hardware.camera2.extension.Request,android.hardware.camera2.extension.IRequestCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: void stopRepeating()>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: void stopRepeating()>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: int submit(android.hardware.camera2.extension.Request,android.hardware.camera2.extension.IRequestCallback)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: int submit(android.hardware.camera2.extension.Request,android.hardware.camera2.extension.IRequestCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IRequestProcessorImpl: int submitBurst(java.util.List,android.hardware.camera2.extension.IRequestCallback)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestProcessor: int submitBurst(java.util.List,android.hardware.camera2.extension.IRequestCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.camera2.extension.ICaptureCallback",
    "implementationName" : "android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureCompleted(long,int,android.hardware.camera2.impl.CameraMetadataNative)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureCompleted(long,int,android.hardware.camera2.impl.CameraMetadataNative)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureFailed(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureFailed(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureProcessProgressed(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureProcessProgressed(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureProcessStarted(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureProcessStarted(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureSequenceAborted(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureSequenceAborted(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureSequenceCompleted(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureSequenceCompleted(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.ICaptureCallback: void onCaptureStarted(int,long)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl$RequestCallbackHandler: void onCaptureStarted(int,long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IOnAppsChangedListener",
    "implementationName" : "android.content.pm.LauncherApps$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackageAdded(android.os.UserHandle,java.lang.String)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackageAdded(android.os.UserHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackageChanged(android.os.UserHandle,java.lang.String)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackageChanged(android.os.UserHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackageLoadingProgressChanged(android.os.UserHandle,java.lang.String,float)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackageLoadingProgressChanged(android.os.UserHandle,java.lang.String,float)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackageRemoved(android.os.UserHandle,java.lang.String)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackageRemoved(android.os.UserHandle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackagesAvailable(android.os.UserHandle,java.lang.String[],boolean)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackagesAvailable(android.os.UserHandle,java.lang.String[],boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackagesSuspended(android.os.UserHandle,java.lang.String[],android.os.Bundle)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackagesSuspended(android.os.UserHandle,java.lang.String[],android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackagesUnavailable(android.os.UserHandle,java.lang.String[],boolean)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackagesUnavailable(android.os.UserHandle,java.lang.String[],boolean)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onPackagesUnsuspended(android.os.UserHandle,java.lang.String[])>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onPackagesUnsuspended(android.os.UserHandle,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IOnAppsChangedListener: void onShortcutChanged(android.os.UserHandle,java.lang.String,android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$1: void onShortcutChanged(android.os.UserHandle,java.lang.String,android.content.pm.ParceledListSlice)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.IShortcutChangeCallback",
    "implementationName" : "android.content.pm.LauncherApps$ShortcutChangeCallbackProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.IShortcutChangeCallback: void onShortcutsAddedOrUpdated(java.lang.String,java.util.List,android.os.UserHandle)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$ShortcutChangeCallbackProxy: void onShortcutsAddedOrUpdated(java.lang.String,java.util.List,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.content.pm.IShortcutChangeCallback: void onShortcutsRemoved(java.lang.String,java.util.List,android.os.UserHandle)>",
        "implementationMethod" : "<android.content.pm.LauncherApps$ShortcutChangeCallbackProxy: void onShortcutsRemoved(java.lang.String,java.util.List,android.os.UserHandle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.print.IPrintJobStateChangeListener",
    "implementationName" : "android.print.PrintManager$PrintJobStateChangeListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.print.IPrintJobStateChangeListener: void onPrintJobStateChanged(android.print.PrintJobId)>",
        "implementationMethod" : "<android.print.PrintManager$PrintJobStateChangeListenerWrapper: void onPrintJobStateChanged(android.print.PrintJobId)>"
      }
    ]
  },
  {
    "interfaceName" : "android.printservice.recommendation.IRecommendationsChangeListener",
    "implementationName" : "android.print.PrintManager$PrintServiceRecommendationsChangeListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.printservice.recommendation.IRecommendationsChangeListener: void onRecommendationsChanged()>",
        "implementationMethod" : "<android.print.PrintManager$PrintServiceRecommendationsChangeListenerWrapper: void onRecommendationsChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.print.IPrintServicesChangeListener",
    "implementationName" : "android.print.PrintManager$PrintServicesChangeListenerWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.print.IPrintServicesChangeListener: void onPrintServicesChanged()>",
        "implementationMethod" : "<android.print.PrintManager$PrintServicesChangeListenerWrapper: void onPrintServicesChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.print.IPrinterDiscoveryObserver",
    "implementationName" : "android.print.PrinterDiscoverySession$PrinterDiscoveryObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.print.IPrinterDiscoveryObserver: void onPrintersAdded(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.print.PrinterDiscoverySession$PrinterDiscoveryObserver: void onPrintersAdded(android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrinterDiscoveryObserver: void onPrintersRemoved(android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.print.PrinterDiscoverySession$PrinterDiscoveryObserver: void onPrintersRemoved(android.content.pm.ParceledListSlice)>"
      }
    ]
  },
  {
    "interfaceName" : "android.print.IPrintDocumentAdapter",
    "implementationName" : "android.print.PrintManager$PrintDocumentAdapterDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void finish()>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void finish()>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void kill(java.lang.String)>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void kill(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void layout(android.print.PrintAttributes,android.print.PrintAttributes,android.print.ILayoutResultCallback,android.os.Bundle,int)>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void layout(android.print.PrintAttributes,android.print.PrintAttributes,android.print.ILayoutResultCallback,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void setObserver(android.print.IPrintDocumentAdapterObserver)>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void setObserver(android.print.IPrintDocumentAdapterObserver)>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void start()>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void start()>"
      },
      {
        "interfaceMethod" : "<android.print.IPrintDocumentAdapter: void write(android.print.PageRange[],android.os.ParcelFileDescriptor,android.print.IWriteResultCallback,int)>",
        "implementationMethod" : "<android.print.PrintManager$PrintDocumentAdapterDelegate: void write(android.print.PageRange[],android.os.ParcelFileDescriptor,android.print.IWriteResultCallback,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.IOnAssociationsChangedListener",
    "implementationName" : "android.companion.CompanionDeviceManager$OnAssociationsChangedListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.IOnAssociationsChangedListener: void onAssociationsChanged(java.util.List)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$OnAssociationsChangedListenerProxy: void onAssociationsChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.IOnMessageReceivedListener",
    "implementationName" : "android.companion.CompanionDeviceManager$OnMessageReceivedListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.IOnMessageReceivedListener: void onMessageReceived(int,byte[])>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$OnMessageReceivedListenerProxy: void onMessageReceived(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.IOnTransportsChangedListener",
    "implementationName" : "android.companion.CompanionDeviceManager$OnTransportsChangedListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.IOnTransportsChangedListener: void onTransportsChanged(java.util.List)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$OnTransportsChangedListenerProxy: void onTransportsChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.IAssociationRequestCallback",
    "implementationName" : "android.companion.CompanionDeviceManager$AssociationRequestCallbackProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.IAssociationRequestCallback: void onAssociationCreated(android.companion.AssociationInfo)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$AssociationRequestCallbackProxy: void onAssociationCreated(android.companion.AssociationInfo)>"
      },
      {
        "interfaceMethod" : "<android.companion.IAssociationRequestCallback: void onAssociationPending(android.app.PendingIntent)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$AssociationRequestCallbackProxy: void onAssociationPending(android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.companion.IAssociationRequestCallback: void onFailure(java.lang.CharSequence)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$AssociationRequestCallbackProxy: void onFailure(java.lang.CharSequence)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.ISystemDataTransferCallback",
    "implementationName" : "android.companion.CompanionDeviceManager$SystemDataTransferCallbackProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.ISystemDataTransferCallback: void onError(java.lang.String)>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$SystemDataTransferCallbackProxy: void onError(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.companion.ISystemDataTransferCallback: void onResult()>",
        "implementationMethod" : "<android.companion.CompanionDeviceManager$SystemDataTransferCallbackProxy: void onResult()>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.ITestSessionCallback",
    "implementationName" : "android.hardware.biometrics.BiometricTestSession$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.ITestSessionCallback: void onCleanupFinished(int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricTestSession$1: void onCleanupFinished(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.ITestSessionCallback: void onCleanupStarted(int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricTestSession$1: void onCleanupStarted(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.fingerprint.IFingerprintAuthenticatorsRegisteredCallback",
    "implementationName" : "android.hardware.fingerprint.FingerprintManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.fingerprint.IFingerprintAuthenticatorsRegisteredCallback: void onAllAuthenticatorsRegistered(java.util.List)>",
        "implementationMethod" : "<android.hardware.fingerprint.FingerprintManager$2: void onAllAuthenticatorsRegistered(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.face.IFaceAuthenticatorsRegisteredCallback",
    "implementationName" : "android.hardware.face.FaceManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.face.IFaceAuthenticatorsRegisteredCallback: void onAllAuthenticatorsRegistered(java.util.List)>",
        "implementationMethod" : "<android.hardware.face.FaceManager$2: void onAllAuthenticatorsRegistered(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.biometrics.IBiometricServiceReceiver",
    "implementationName" : "android.hardware.biometrics.BiometricPrompt$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onAcquired(int,java.lang.String)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onAcquired(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onAuthenticationFailed()>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onAuthenticationFailed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onAuthenticationSucceeded(int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onAuthenticationSucceeded(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onDialogDismissed(int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onDialogDismissed(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onError(int,int,int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onError(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.biometrics.IBiometricServiceReceiver: void onSystemEvent(int)>",
        "implementationMethod" : "<android.hardware.biometrics.BiometricPrompt$1: void onSystemEvent(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppClient",
    "implementationName" : "android.media.tv.interactive.TvInteractiveAppManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onAdBufferReady(android.media.tv.AdBuffer,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onAdBufferReady(android.media.tv.AdBuffer,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onAdRequest(android.media.tv.AdRequest,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onAdRequest(android.media.tv.AdRequest,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onBiInteractiveAppCreated(android.net.Uri,java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onBiInteractiveAppCreated(android.net.Uri,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onBroadcastInfoRequest(android.media.tv.BroadcastInfoRequest,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onBroadcastInfoRequest(android.media.tv.BroadcastInfoRequest,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onCommandRequest(java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onCommandRequest(java.lang.String,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onLayoutSurface(int,int,int,int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onLayoutSurface(int,int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRemoveBroadcastInfo(int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRemoveBroadcastInfo(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestAvailableSpeeds(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestAvailableSpeeds(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestCurrentChannelLcn(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestCurrentChannelLcn(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestCurrentChannelUri(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestCurrentChannelUri(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestCurrentTvInputId(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestCurrentTvInputId(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestCurrentVideoBounds(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestCurrentVideoBounds(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestScheduleRecording(java.lang.String,java.lang.String,android.net.Uri,android.net.Uri,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestScheduleRecording2(java.lang.String,java.lang.String,android.net.Uri,long,long,int,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestSigning(java.lang.String,java.lang.String,java.lang.String,byte[],int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestSigning(java.lang.String,java.lang.String,java.lang.String,byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestStartRecording(java.lang.String,android.net.Uri,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestStartRecording(java.lang.String,android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestStopRecording(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestStopRecording(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestStreamVolume(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestStreamVolume(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestTimeShiftMode(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestTimeShiftMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestTrackInfoList(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestTrackInfoList(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestTvRecordingInfo(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestTvRecordingInfo(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onRequestTvRecordingInfoList(int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onRequestTvRecordingInfoList(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onSessionCreated(java.lang.String,android.os.IBinder,android.view.InputChannel,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onSessionCreated(java.lang.String,android.os.IBinder,android.view.InputChannel,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onSessionReleased(int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onSessionReleased(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onSessionStateChanged(int,int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onSessionStateChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onSetTvRecordingInfo(java.lang.String,android.media.tv.TvRecordingInfo,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onSetTvRecordingInfo(java.lang.String,android.media.tv.TvRecordingInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onSetVideoBounds(android.graphics.Rect,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onSetVideoBounds(android.graphics.Rect,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onTeletextAppStateChanged(int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onTeletextAppStateChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppClient: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$1: void onTimeShiftCommandRequest(java.lang.String,android.os.Bundle,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppManagerCallback",
    "implementationName" : "android.media.tv.interactive.TvInteractiveAppManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onInteractiveAppServiceAdded(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$2: void onInteractiveAppServiceAdded(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onInteractiveAppServiceRemoved(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$2: void onInteractiveAppServiceRemoved(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onInteractiveAppServiceUpdated(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$2: void onInteractiveAppServiceUpdated(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onStateChanged(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$2: void onStateChanged(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppManagerCallback: void onTvInteractiveAppServiceInfoUpdated(android.media.tv.interactive.TvInteractiveAppServiceInfo)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppManager$2: void onTvInteractiveAppServiceInfoUpdated(android.media.tv.interactive.TvInteractiveAppServiceInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputClient",
    "implementationName" : "android.media.tv.TvInputManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAdBufferConsumed(android.media.tv.AdBuffer,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAdBufferConsumed(android.media.tv.AdBuffer,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAdResponse(android.media.tv.AdResponse,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAdResponse(android.media.tv.AdResponse,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAitInfoUpdated(android.media.tv.AitInfo,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAitInfoUpdated(android.media.tv.AitInfo,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAudioPresentationSelected(int,int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAudioPresentationSelected(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAudioPresentationsChanged(java.util.List,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAudioPresentationsChanged(java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onAvailableSpeeds(float[],int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onAvailableSpeeds(float[],int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onChannelRetuned(android.net.Uri,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onChannelRetuned(android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onContentAllowed(int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onContentAllowed(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onContentBlocked(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onContentBlocked(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onCueingMessageAvailability(boolean,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onCueingMessageAvailability(boolean,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onError(int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onError(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onLayoutSurface(int,int,int,int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onLayoutSurface(int,int,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onRecordingStopped(android.net.Uri,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onRecordingStopped(android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onSessionCreated(java.lang.String,android.os.IBinder,android.view.InputChannel,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onSessionCreated(java.lang.String,android.os.IBinder,android.view.InputChannel,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onSessionEvent(java.lang.String,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onSessionEvent(java.lang.String,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onSessionReleased(int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onSessionReleased(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onSignalStrength(int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onSignalStrength(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTimeShiftCurrentPositionChanged(long,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTimeShiftCurrentPositionChanged(long,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTimeShiftMode(int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTimeShiftMode(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTimeShiftStartPositionChanged(long,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTimeShiftStartPositionChanged(long,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTimeShiftStatusChanged(int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTimeShiftStatusChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTrackSelected(int,java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTrackSelected(int,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTracksChanged(java.util.List,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTracksChanged(java.util.List,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTuned(android.net.Uri,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTuned(android.net.Uri,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onTvMessage(int,android.os.Bundle,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onTvMessage(int,android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onVideoAvailable(int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onVideoAvailable(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputClient: void onVideoUnavailable(int,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$1: void onVideoUnavailable(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputHardwareCallback",
    "implementationName" : "android.media.tv.TvInputManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputHardwareCallback: void onReleased()>",
        "implementationMethod" : "<android.media.tv.TvInputManager$4: void onReleased()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputHardwareCallback: void onStreamConfigChanged(android.media.tv.TvStreamConfig[])>",
        "implementationMethod" : "<android.media.tv.TvInputManager$4: void onStreamConfigChanged(android.media.tv.TvStreamConfig[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputManagerCallback",
    "implementationName" : "android.media.tv.TvInputManager$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onCurrentTunedInfosUpdated(java.util.List)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onCurrentTunedInfosUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onInputAdded(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onInputAdded(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onInputRemoved(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onInputRemoved(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onInputStateChanged(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onInputStateChanged(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onInputUpdated(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onInputUpdated(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputManagerCallback: void onTvInputInfoUpdated(android.media.tv.TvInputInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputManager$2: void onTvInputInfoUpdated(android.media.tv.TvInputInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.tunerresourcemanager.IResourcesReclaimListener",
    "implementationName" : "android.media.tv.tunerresourcemanager.TunerResourceManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.tunerresourcemanager.IResourcesReclaimListener: void onReclaimResources()>",
        "implementationMethod" : "<android.media.tv.tunerresourcemanager.TunerResourceManager$1: void onReclaimResources()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.projection.IMediaProjectionWatcherCallback",
    "implementationName" : "android.media.projection.MediaProjectionManager$CallbackDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionWatcherCallback: void onStart(android.media.projection.MediaProjectionInfo)>",
        "implementationMethod" : "<android.media.projection.MediaProjectionManager$CallbackDelegate: void onStart(android.media.projection.MediaProjectionInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.projection.IMediaProjectionWatcherCallback: void onStop(android.media.projection.MediaProjectionInfo)>",
        "implementationMethod" : "<android.media.projection.MediaProjectionManager$CallbackDelegate: void onStop(android.media.projection.MediaProjectionInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.midi.IMidiDeviceServer",
    "implementationName" : "android.media.midi.MidiDeviceServer$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: void closeDevice()>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: void closeDevice()>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: void closePort(android.os.IBinder)>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: void closePort(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: int connectPorts(android.os.IBinder,java.io.FileDescriptor,int)>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: int connectPorts(android.os.IBinder,java.io.FileDescriptor,int)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: android.media.midi.MidiDeviceInfo getDeviceInfo()>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: android.media.midi.MidiDeviceInfo getDeviceInfo()>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: java.io.FileDescriptor openInputPort(android.os.IBinder,int)>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: java.io.FileDescriptor openInputPort(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: java.io.FileDescriptor openOutputPort(android.os.IBinder,int)>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: java.io.FileDescriptor openOutputPort(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceServer: void setDeviceInfo(android.media.midi.MidiDeviceInfo)>",
        "implementationMethod" : "<android.media.midi.MidiDeviceServer$1: void setDeviceInfo(android.media.midi.MidiDeviceInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.midi.IMidiDeviceListener",
    "implementationName" : "android.media.midi.MidiManager$DeviceListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceListener: void onDeviceAdded(android.media.midi.MidiDeviceInfo)>",
        "implementationMethod" : "<android.media.midi.MidiManager$DeviceListener: void onDeviceAdded(android.media.midi.MidiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceListener: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)>",
        "implementationMethod" : "<android.media.midi.MidiManager$DeviceListener: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.midi.IMidiDeviceListener: void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)>",
        "implementationMethod" : "<android.media.midi.MidiManager$DeviceListener: void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.radio.IAnnouncementListener",
    "implementationName" : "android.hardware.radio.RadioManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.radio.IAnnouncementListener: void onListUpdated(java.util.List)>",
        "implementationMethod" : "<android.hardware.radio.RadioManager$1: void onListUpdated(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.radio.ITunerCallback",
    "implementationName" : "android.hardware.radio.TunerCallbackAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onAntennaState(boolean)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onAntennaState(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onBackgroundScanAvailabilityChange(boolean)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onBackgroundScanAvailabilityChange(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onBackgroundScanComplete()>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onBackgroundScanComplete()>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onConfigFlagUpdated(int,boolean)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onConfigFlagUpdated(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onConfigurationChanged(android.hardware.radio.RadioManager$BandConfig)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onConfigurationChanged(android.hardware.radio.RadioManager$BandConfig)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onCurrentProgramInfoChanged(android.hardware.radio.RadioManager$ProgramInfo)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onCurrentProgramInfoChanged(android.hardware.radio.RadioManager$ProgramInfo)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onEmergencyAnnouncement(boolean)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onEmergencyAnnouncement(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onError(int)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onParametersUpdated(java.util.Map)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onParametersUpdated(java.util.Map)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onProgramListChanged()>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onProgramListChanged()>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onProgramListUpdated(android.hardware.radio.ProgramList$Chunk)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onProgramListUpdated(android.hardware.radio.ProgramList$Chunk)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onTrafficAnnouncement(boolean)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onTrafficAnnouncement(boolean)>"
      },
      {
        "interfaceMethod" : "<android.hardware.radio.ITunerCallback: void onTuneFailed(int,android.hardware.radio.ProgramSelector)>",
        "implementationMethod" : "<android.hardware.radio.TunerCallbackAdapter: void onTuneFailed(int,android.hardware.radio.ProgramSelector)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.soundtrigger.IRecognitionStatusCallback",
    "implementationName" : "android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.soundtrigger.IRecognitionStatusCallback: void onGenericSoundTriggerDetected(android.hardware.soundtrigger.SoundTrigger$GenericRecognitionEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback: void onGenericSoundTriggerDetected(android.hardware.soundtrigger.SoundTrigger$GenericRecognitionEvent)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger.IRecognitionStatusCallback: void onKeyphraseDetected(android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback: void onKeyphraseDetected(android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionEvent)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger.IRecognitionStatusCallback: void onModuleDied()>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback: void onModuleDied()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger.IRecognitionStatusCallback: void onPauseFailed(int)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback: void onPauseFailed(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger.IRecognitionStatusCallback: void onPreempted()>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback: void onPreempted()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger.IRecognitionStatusCallback: void onRecognitionPaused()>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback: void onRecognitionPaused()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger.IRecognitionStatusCallback: void onRecognitionResumed()>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback: void onRecognitionResumed()>"
      },
      {
        "interfaceMethod" : "<android.hardware.soundtrigger.IRecognitionStatusCallback: void onResumeFailed(int)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetector$RecognitionCallback: void onResumeFailed(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IContextHubClientCallback",
    "implementationName" : "android.hardware.location.ContextHubManager$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClientCallback: void onClientAuthorizationChanged(long,int)>",
        "implementationMethod" : "<android.hardware.location.ContextHubManager$3: void onClientAuthorizationChanged(long,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClientCallback: void onHubReset()>",
        "implementationMethod" : "<android.hardware.location.ContextHubManager$3: void onHubReset()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClientCallback: void onMessageFromNanoApp(android.hardware.location.NanoAppMessage)>",
        "implementationMethod" : "<android.hardware.location.ContextHubManager$3: void onMessageFromNanoApp(android.hardware.location.NanoAppMessage)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClientCallback: void onNanoAppAborted(long,int)>",
        "implementationMethod" : "<android.hardware.location.ContextHubManager$3: void onNanoAppAborted(long,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClientCallback: void onNanoAppDisabled(long)>",
        "implementationMethod" : "<android.hardware.location.ContextHubManager$3: void onNanoAppDisabled(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClientCallback: void onNanoAppEnabled(long)>",
        "implementationMethod" : "<android.hardware.location.ContextHubManager$3: void onNanoAppEnabled(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClientCallback: void onNanoAppLoaded(long)>",
        "implementationMethod" : "<android.hardware.location.ContextHubManager$3: void onNanoAppLoaded(long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubClientCallback: void onNanoAppUnloaded(long)>",
        "implementationMethod" : "<android.hardware.location.ContextHubManager$3: void onNanoAppUnloaded(long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IContextHubCallback",
    "implementationName" : "android.hardware.location.ContextHubManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IContextHubCallback: void onMessageReceipt(int,int,android.hardware.location.ContextHubMessage)>",
        "implementationMethod" : "<android.hardware.location.ContextHubManager$4: void onMessageReceipt(int,int,android.hardware.location.ContextHubMessage)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IIncidentAuthListener",
    "implementationName" : "android.os.IncidentManager$AuthListener$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IIncidentAuthListener: void onReportApproved()>",
        "implementationMethod" : "<android.os.IncidentManager$AuthListener$1: void onReportApproved()>"
      },
      {
        "interfaceMethod" : "<android.os.IIncidentAuthListener: void onReportDenied()>",
        "implementationMethod" : "<android.os.IncidentManager$AuthListener$1: void onReportDenied()>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IIncidentDumpCallback",
    "implementationName" : "android.os.IncidentManager$DumpCallback$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IIncidentDumpCallback: void onDumpSection(android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.os.IncidentManager$DumpCallback$1: void onDumpSection(android.os.ParcelFileDescriptor)>"
      }
    ]
  },
  {
    "interfaceName" : "android.os.IDumpstateListener",
    "implementationName" : "android.os.BugreportManager$DumpstateListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.os.IDumpstateListener: void onError(int)>",
        "implementationMethod" : "<android.os.BugreportManager$DumpstateListener: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IDumpstateListener: void onFinished(java.lang.String)>",
        "implementationMethod" : "<android.os.BugreportManager$DumpstateListener: void onFinished(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.os.IDumpstateListener: void onProgress(int)>",
        "implementationMethod" : "<android.os.BugreportManager$DumpstateListener: void onProgress(int)>"
      },
      {
        "interfaceMethod" : "<android.os.IDumpstateListener: void onScreenshotTaken(boolean)>",
        "implementationMethod" : "<android.os.BugreportManager$DumpstateListener: void onScreenshotTaken(boolean)>"
      },
      {
        "interfaceMethod" : "<android.os.IDumpstateListener: void onUiIntensiveBugreportDumpsFinished()>",
        "implementationMethod" : "<android.os.BugreportManager$DumpstateListener: void onUiIntensiveBugreportDumpsFinished()>"
      }
    ]
  },
  {
    "interfaceName" : "android.credentials.IClearCredentialStateCallback",
    "implementationName" : "android.credentials.CredentialManager$ClearCredentialStateTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.credentials.IClearCredentialStateCallback: void onError(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.credentials.CredentialManager$ClearCredentialStateTransport: void onError(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.IClearCredentialStateCallback: void onSuccess()>",
        "implementationMethod" : "<android.credentials.CredentialManager$ClearCredentialStateTransport: void onSuccess()>"
      }
    ]
  },
  {
    "interfaceName" : "android.credentials.ICreateCredentialCallback",
    "implementationName" : "android.credentials.CredentialManager$CreateCredentialTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.credentials.ICreateCredentialCallback: void onError(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.credentials.CredentialManager$CreateCredentialTransport: void onError(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICreateCredentialCallback: void onPendingIntent(android.app.PendingIntent)>",
        "implementationMethod" : "<android.credentials.CredentialManager$CreateCredentialTransport: void onPendingIntent(android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ICreateCredentialCallback: void onResponse(android.credentials.CreateCredentialResponse)>",
        "implementationMethod" : "<android.credentials.CredentialManager$CreateCredentialTransport: void onResponse(android.credentials.CreateCredentialResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.credentials.IPrepareGetCredentialCallback",
    "implementationName" : "android.credentials.CredentialManager$PrepareGetCredentialTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.credentials.IPrepareGetCredentialCallback: void onError(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.credentials.CredentialManager$PrepareGetCredentialTransport: void onError(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.IPrepareGetCredentialCallback: void onResponse(android.credentials.PrepareGetCredentialResponseInternal)>",
        "implementationMethod" : "<android.credentials.CredentialManager$PrepareGetCredentialTransport: void onResponse(android.credentials.PrepareGetCredentialResponseInternal)>"
      }
    ]
  },
  {
    "interfaceName" : "android.credentials.ISetEnabledProvidersCallback",
    "implementationName" : "android.credentials.CredentialManager$SetEnabledProvidersTransport",
    "methods" : [
      {
        "interfaceMethod" : "<android.credentials.ISetEnabledProvidersCallback: void onError(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.credentials.CredentialManager$SetEnabledProvidersTransport: void onError(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.credentials.ISetEnabledProvidersCallback: void onResponse()>",
        "implementationMethod" : "<android.credentials.CredentialManager$SetEnabledProvidersTransport: void onResponse()>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.admin.IDeviceAdminService",
    "implementationName" : "android.app.admin.DeviceAdminService$IDeviceAdminServiceImpl",
    "methods" : [ ]
  },
  {
    "interfaceName" : "android.app.admin.IKeyguardClient",
    "implementationName" : "android.app.admin.DevicePolicyKeyguardService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.admin.IKeyguardClient: void onCreateKeyguardSurface(android.os.IBinder,android.app.admin.IKeyguardCallback)>",
        "implementationMethod" : "<android.app.admin.DevicePolicyKeyguardService$1: void onCreateKeyguardSurface(android.os.IBinder,android.app.admin.IKeyguardCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.backup.IBackupTransport",
    "implementationName" : "android.app.backup.BackupTransport$TransportImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void abortFullRestore(com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void abortFullRestore(com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void cancelFullBackup(com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void cancelFullBackup(com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void checkFullBackupSize(long,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void checkFullBackupSize(long,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void clearBackupData(android.content.pm.PackageInfo,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void clearBackupData(android.content.pm.PackageInfo,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void configurationIntent(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void configurationIntent(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void currentDestinationString(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void currentDestinationString(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void dataManagementIntent(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void dataManagementIntent(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void dataManagementIntentLabel(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void dataManagementIntentLabel(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void finishBackup(com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void finishBackup(com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void finishRestore(com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void finishRestore(com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getAvailableRestoreSets(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getAvailableRestoreSets(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getBackupManagerMonitor(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getBackupManagerMonitor(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getBackupQuota(java.lang.String,boolean,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getBackupQuota(java.lang.String,boolean,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getCurrentRestoreSet(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getCurrentRestoreSet(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getNextFullRestoreDataChunk(android.os.ParcelFileDescriptor,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getNextFullRestoreDataChunk(android.os.ParcelFileDescriptor,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getRestoreData(android.os.ParcelFileDescriptor,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getRestoreData(android.os.ParcelFileDescriptor,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void getTransportFlags(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void getTransportFlags(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void initializeDevice(com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void initializeDevice(com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void isAppEligibleForBackup(android.content.pm.PackageInfo,boolean,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void isAppEligibleForBackup(android.content.pm.PackageInfo,boolean,com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void name(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void name(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void nextRestorePackage(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void nextRestorePackage(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void requestBackupTime(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void requestBackupTime(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void requestFullBackupTime(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void requestFullBackupTime(com.android.internal.infra.AndroidFuture)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void sendBackupData(int,com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void sendBackupData(int,com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void startRestore(long,android.content.pm.PackageInfo[],com.android.internal.backup.ITransportStatusCallback)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void startRestore(long,android.content.pm.PackageInfo[],com.android.internal.backup.ITransportStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.backup.IBackupTransport: void transportDirName(com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.app.backup.BackupTransport$TransportImpl: void transportDirName(com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.blob.IBlobCommitCallback",
    "implementationName" : "android.app.blob.BlobStoreManager$Session$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.blob.IBlobCommitCallback: void onResult(int)>",
        "implementationMethod" : "<android.app.blob.BlobStoreManager$Session$1: void onResult(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.job.IJobService",
    "implementationName" : "android.app.job.JobServiceEngine$JobInterface",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.job.IJobService: void getTransferredDownloadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>",
        "implementationMethod" : "<android.app.job.JobServiceEngine$JobInterface: void getTransferredDownloadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobService: void getTransferredUploadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>",
        "implementationMethod" : "<android.app.job.JobServiceEngine$JobInterface: void getTransferredUploadBytes(android.app.job.JobParameters,android.app.job.JobWorkItem)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobService: void onNetworkChanged(android.app.job.JobParameters)>",
        "implementationMethod" : "<android.app.job.JobServiceEngine$JobInterface: void onNetworkChanged(android.app.job.JobParameters)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobService: void startJob(android.app.job.JobParameters)>",
        "implementationMethod" : "<android.app.job.JobServiceEngine$JobInterface: void startJob(android.app.job.JobParameters)>"
      },
      {
        "interfaceMethod" : "<android.app.job.IJobService: void stopJob(android.app.job.JobParameters)>",
        "implementationMethod" : "<android.app.job.JobServiceEngine$JobInterface: void stopJob(android.app.job.JobParameters)>"
      }
    ]
  },
  {
    "interfaceName" : "android.app.usage.ICacheQuotaService",
    "implementationName" : "android.app.usage.CacheQuotaService$CacheQuotaServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.app.usage.ICacheQuotaService: void computeCacheQuotaHints(android.os.RemoteCallback,java.util.List)>",
        "implementationMethod" : "<android.app.usage.CacheQuotaService$CacheQuotaServiceWrapper: void computeCacheQuotaHints(android.os.RemoteCallback,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.companion.ICompanionDeviceService",
    "implementationName" : "android.companion.CompanionDeviceService$Stub",
    "methods" : [
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceService: void onDeviceAppeared(android.companion.AssociationInfo)>",
        "implementationMethod" : "<android.companion.CompanionDeviceService$Stub: void onDeviceAppeared(android.companion.AssociationInfo)>"
      },
      {
        "interfaceMethod" : "<android.companion.ICompanionDeviceService: void onDeviceDisappeared(android.companion.AssociationInfo)>",
        "implementationMethod" : "<android.companion.CompanionDeviceService$Stub: void onDeviceDisappeared(android.companion.AssociationInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.ISyncAdapter",
    "implementationName" : "android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.ISyncAdapter: void cancelSync(android.content.ISyncContext)>",
        "implementationMethod" : "<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void cancelSync(android.content.ISyncContext)>"
      },
      {
        "interfaceMethod" : "<android.content.ISyncAdapter: void onUnsyncableAccount(android.content.ISyncAdapterUnsyncableAccountCallback)>",
        "implementationMethod" : "<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void onUnsyncableAccount(android.content.ISyncAdapterUnsyncableAccountCallback)>"
      },
      {
        "interfaceMethod" : "<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>",
        "implementationMethod" : "<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.content.pm.permission.IRuntimePermissionPresenter",
    "implementationName" : "android.permissionpresenterservice.RuntimePermissionPresenterService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.content.pm.permission.IRuntimePermissionPresenter: void getAppPermissions(java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.permissionpresenterservice.RuntimePermissionPresenterService$1: void getAppPermissions(java.lang.String,android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IGraphicsStatsCallback",
    "implementationName" : "android.graphics.HardwareRenderer$ProcessInitializer$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IGraphicsStatsCallback: void onRotateGraphicsStatsBuffer()>",
        "implementationMethod" : "<android.graphics.HardwareRenderer$ProcessInitializer$1: void onRotateGraphicsStatsBuffer()>"
      }
    ]
  },
  {
    "interfaceName" : "android.view.IGraphicsStats",
    "implementationName" : "android.graphics.GraphicsStatsService",
    "methods" : [
      {
        "interfaceMethod" : "<android.view.IGraphicsStats: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>",
        "implementationMethod" : "<android.graphics.GraphicsStatsService: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.camera2.extension.IProcessResultImpl",
    "implementationName" : "android.hardware.camera2.impl.CameraExtensionSessionImpl$CaptureResultHandler",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IProcessResultImpl: void onCaptureCompleted(long,android.hardware.camera2.impl.CameraMetadataNative)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraExtensionSessionImpl$CaptureResultHandler: void onCaptureCompleted(long,android.hardware.camera2.impl.CameraMetadataNative)>"
      },
      {
        "interfaceMethod" : "<android.hardware.camera2.extension.IProcessResultImpl: void onCaptureProcessProgressed(int)>",
        "implementationMethod" : "<android.hardware.camera2.impl.CameraExtensionSessionImpl$CaptureResultHandler: void onCaptureProcessProgressed(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.cas.ICasListener",
    "implementationName" : "android.media.MediaCas$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.cas.ICasListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.media.MediaCas$3: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.hardware.cas.ICasListener: int getInterfaceVersion()>",
        "implementationMethod" : "<android.media.MediaCas$3: int getInterfaceVersion()>"
      },
      {
        "interfaceMethod" : "<android.hardware.cas.ICasListener: void onEvent(int,int,byte[])>",
        "implementationMethod" : "<android.media.MediaCas$3: void onEvent(int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.cas.ICasListener: void onSessionEvent(byte[],int,int,byte[])>",
        "implementationMethod" : "<android.media.MediaCas$3: void onSessionEvent(byte[],int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.hardware.cas.ICasListener: void onStatusUpdate(byte,int)>",
        "implementationMethod" : "<android.media.MediaCas$3: void onStatusUpdate(byte,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.nfc.ITagRemovedCallback",
    "implementationName" : "android.nfc.NfcAdapter$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.nfc.ITagRemovedCallback: void onTagRemoved()>",
        "implementationMethod" : "<android.nfc.NfcAdapter$2: void onTagRemoved()>"
      }
    ]
  },
  {
    "interfaceName" : "android.nfc.INfcUnlockHandler",
    "implementationName" : "android.nfc.NfcAdapter$3",
    "methods" : [
      {
        "interfaceMethod" : "<android.nfc.INfcUnlockHandler: boolean onUnlockAttempted(android.nfc.Tag)>",
        "implementationMethod" : "<android.nfc.NfcAdapter$3: boolean onUnlockAttempted(android.nfc.Tag)>"
      }
    ]
  },
  {
    "interfaceName" : "android.nfc.INfcControllerAlwaysOnListener",
    "implementationName" : "android.nfc.NfcControllerAlwaysOnListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.nfc.INfcControllerAlwaysOnListener: void onControllerAlwaysOnChanged(boolean)>",
        "implementationMethod" : "<android.nfc.NfcControllerAlwaysOnListener: void onControllerAlwaysOnChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.nfc.IAppCallback",
    "implementationName" : "android.nfc.NfcActivityManager",
    "methods" : [
      {
        "interfaceMethod" : "<android.nfc.IAppCallback: void onTagDiscovered(android.nfc.Tag)>",
        "implementationMethod" : "<android.nfc.NfcActivityManager: void onTagDiscovered(android.nfc.Tag)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IAuthenticateServerCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$17",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IAuthenticateServerCallback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$17: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.ICancelSessionCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$20",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.ICancelSessionCallback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$20: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IDeleteProfileCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$8",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IDeleteProfileCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$8: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IDisableProfileCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$4",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IDisableProfileCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$4: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetAllProfilesCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetAllProfilesCallback: void onComplete(int,android.service.euicc.EuiccProfileInfo[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$1: void onComplete(int,android.service.euicc.EuiccProfileInfo[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$10",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback: void onComplete(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$10: void onComplete(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetEuiccChallengeCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$14",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetEuiccChallengeCallback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$14: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetEuiccInfo1Callback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$15",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetEuiccInfo1Callback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$15: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetEuiccInfo2Callback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$16",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetEuiccInfo2Callback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$16: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetRulesAuthTableCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$13",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetRulesAuthTableCallback: void onComplete(int,android.telephony.euicc.EuiccRulesAuthTable)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$13: void onComplete(int,android.telephony.euicc.EuiccRulesAuthTable)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IGetSmdsAddressCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$11",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IGetSmdsAddressCallback: void onComplete(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$11: void onComplete(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IListNotificationsCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$21",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IListNotificationsCallback: void onComplete(int,android.telephony.euicc.EuiccNotification[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$21: void onComplete(int,android.telephony.euicc.EuiccNotification[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$19",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$19: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IPrepareDownloadCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$18",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IPrepareDownloadCallback: void onComplete(int,byte[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$18: void onComplete(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$24",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$24: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IResetMemoryCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$9",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IResetMemoryCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$9: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IRetrieveNotificationCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$23",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IRetrieveNotificationCallback: void onComplete(int,android.telephony.euicc.EuiccNotification)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$23: void onComplete(int,android.telephony.euicc.EuiccNotification)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.IRetrieveNotificationListCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$22",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.IRetrieveNotificationListCallback: void onComplete(int,android.telephony.euicc.EuiccNotification[])>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$22: void onComplete(int,android.telephony.euicc.EuiccNotification[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$12",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$12: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.euicc.ISetNicknameCallback",
    "implementationName" : "android.telephony.euicc.EuiccCardManager$7",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.euicc.ISetNicknameCallback: void onComplete(int)>",
        "implementationMethod" : "<android.telephony.euicc.EuiccCardManager$7: void onComplete(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.ISipDelegateConnectionStateCallback",
    "implementationName" : "android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateConnectionStateCallback: void onConfigurationChanged(android.telephony.ims.SipDelegateConfiguration)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1: void onConfigurationChanged(android.telephony.ims.SipDelegateConfiguration)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateConnectionStateCallback: void onCreated(android.telephony.ims.aidl.ISipDelegate)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1: void onCreated(android.telephony.ims.aidl.ISipDelegate)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateConnectionStateCallback: void onDestroyed(int)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1: void onDestroyed(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateConnectionStateCallback: void onFeatureTagStatusChanged(android.telephony.ims.DelegateRegistrationState,java.util.List)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1: void onFeatureTagStatusChanged(android.telephony.ims.DelegateRegistrationState,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.ISipDelegateConnectionStateCallback: void onImsConfigurationChanged(android.telephony.ims.SipDelegateImsConfiguration)>",
        "implementationMethod" : "<android.telephony.ims.aidl.SipDelegateConnectionAidlWrapper$1: void onImsConfigurationChanged(android.telephony.ims.SipDelegateImsConfiguration)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ISipDialogStateCallback",
    "implementationName" : "android.telephony.ims.SipDialogStateCallback$CallbackBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ISipDialogStateCallback: void onActiveSipDialogsChanged(java.util.List)>",
        "implementationMethod" : "<android.telephony.ims.SipDialogStateCallback$CallbackBinder: void onActiveSipDialogsChanged(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IRcsUcePublishStateCallback",
    "implementationName" : "android.telephony.ims.RcsUceAdapter$PublishStateCallbackAdapter$PublishStateBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IRcsUcePublishStateCallback: void onPublishUpdated(android.telephony.ims.PublishAttributes)>",
        "implementationMethod" : "<android.telephony.ims.RcsUceAdapter$PublishStateCallbackAdapter$PublishStateBinder: void onPublishUpdated(android.telephony.ims.PublishAttributes)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsMmTelFeature",
    "implementationName" : "android.telephony.ims.feature.MmTelFeature$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void acknowledgeSms(int,int,int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void acknowledgeSms(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void acknowledgeSmsReport(int,int,int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void acknowledgeSmsReport(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void acknowledgeSmsWithPdu(int,int,int,byte[])>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void acknowledgeSmsWithPdu(int,int,int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void addCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void addCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void changeCapabilitiesConfiguration(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void changeCapabilitiesConfiguration(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void changeOfferedRtpHeaderExtensionTypes(java.util.List)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void changeOfferedRtpHeaderExtensionTypes(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: android.telephony.ims.ImsCallProfile createCallProfile(int,int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: android.telephony.ims.ImsCallProfile createCallProfile(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: com.android.ims.internal.IImsCallSession createCallSession(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsCallSession createCallSession(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: com.android.ims.internal.IImsEcbm getEcbmInterface()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsEcbm getEcbmInterface()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: int getFeatureState()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: int getFeatureState()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: java.lang.String getSmsFormat()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: java.lang.String getSmsFormat()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: com.android.ims.internal.IImsUt getUtInterface()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: com.android.ims.internal.IImsUt getUtInterface()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void notifySrvccCanceled()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void notifySrvccCanceled()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void notifySrvccCompleted()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void notifySrvccCompleted()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void notifySrvccFailed()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void notifySrvccFailed()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void notifySrvccStarted(android.telephony.ims.aidl.ISrvccStartedCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void notifySrvccStarted(android.telephony.ims.aidl.ISrvccStartedCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void onMemoryAvailable(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void onMemoryAvailable(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void onSmsReady()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void onSmsReady()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void queryCapabilityConfiguration(int,int,android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void queryCapabilityConfiguration(int,int,android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: int queryCapabilityStatus()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: int queryCapabilityStatus()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: android.telephony.ims.MediaQualityStatus queryMediaQualityStatus(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: android.telephony.ims.MediaQualityStatus queryMediaQualityStatus(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void removeCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void removeCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void setListener(android.telephony.ims.aidl.IImsMmTelListener)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void setListener(android.telephony.ims.aidl.IImsMmTelListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void setMediaQualityThreshold(int,android.telephony.ims.MediaThreshold)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void setMediaQualityThreshold(int,android.telephony.ims.MediaThreshold)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void setSmsListener(android.telephony.ims.aidl.IImsSmsListener)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void setSmsListener(android.telephony.ims.aidl.IImsSmsListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void setTerminalBasedCallWaitingStatus(boolean)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void setTerminalBasedCallWaitingStatus(boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: void setUiTtyMode(int,android.os.Message)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: void setUiTtyMode(int,android.os.Message)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelFeature: int shouldProcessCall(java.lang.String[])>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$1: int shouldProcessCall(java.lang.String[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsMmTelListener",
    "implementationName" : "android.telephony.ims.feature.MmTelFeature$Listener",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onAudioModeIsVoipChanged(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onAudioModeIsVoipChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: android.telephony.ims.aidl.IImsCallSessionListener onIncomingCall(com.android.ims.internal.IImsCallSession,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: android.telephony.ims.aidl.IImsCallSessionListener onIncomingCall(com.android.ims.internal.IImsCallSession,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onMediaQualityStatusChanged(android.telephony.ims.MediaQualityStatus)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onMediaQualityStatusChanged(android.telephony.ims.MediaQualityStatus)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onModifyImsTrafficSession(int,int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onModifyImsTrafficSession(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onRejectedCall(android.telephony.ims.ImsCallProfile,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onRejectedCall(android.telephony.ims.ImsCallProfile,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onStartImsTrafficSession(int,int,int,int,android.telephony.ims.aidl.IImsTrafficSessionCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onStartImsTrafficSession(int,int,int,int,android.telephony.ims.aidl.IImsTrafficSessionCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onStopImsTrafficSession(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onStopImsTrafficSession(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onTriggerEpsFallback(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onTriggerEpsFallback(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsMmTelListener: void onVoiceMessageCountUpdate(int)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$Listener: void onVoiceMessageCountUpdate(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsEcbm",
    "implementationName" : "android.telephony.ims.stub.ImsEcbmImplBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsEcbm: void exitEmergencyCallbackMode()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsEcbmImplBase$1: void exitEmergencyCallbackMode()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsEcbm: void setListener(com.android.ims.internal.IImsEcbmListener)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsEcbmImplBase$1: void setListener(com.android.ims.internal.IImsEcbmListener)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsMultiEndpoint",
    "implementationName" : "android.telephony.ims.stub.ImsMultiEndpointImplBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMultiEndpoint: void requestImsExternalCallStateInfo()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsMultiEndpointImplBase$1: void requestImsExternalCallStateInfo()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMultiEndpoint: void setListener(com.android.ims.internal.IImsExternalCallStateListener)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsMultiEndpointImplBase$1: void setListener(com.android.ims.internal.IImsExternalCallStateListener)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsUt",
    "implementationName" : "android.telephony.ims.stub.ImsUtImplBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: void close()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: void close()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCLIP()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCLIP()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCLIR()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCLIR()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCOLP()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCOLP()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCOLR()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCOLR()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCallBarring(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCallBarring(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCallBarringForServiceClass(int,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCallBarringForServiceClass(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCallForward(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCallForward(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int queryCallWaiting()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int queryCallWaiting()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: void setListener(com.android.ims.internal.IImsUtListener)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: void setListener(com.android.ims.internal.IImsUtListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int transact(android.os.Bundle)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int transact(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCLIP(boolean)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCLIP(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCLIR(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCLIR(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCOLP(boolean)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCOLP(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCOLR(int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCOLR(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCallBarring(int,int,java.lang.String[])>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCallBarring(int,int,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCallBarringForServiceClass(int,int,java.lang.String[],int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCallBarringForServiceClass(int,int,java.lang.String[],int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCallBarringWithPassword(int,int,java.lang.String[],int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCallBarringWithPassword(int,int,java.lang.String[],int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCallForward(int,int,java.lang.String,int,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCallForward(int,int,java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUt: int updateCallWaiting(boolean,int)>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsUtImplBase$1: int updateCallWaiting(boolean,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsCallSessionListener",
    "implementationName" : "android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callQualityChanged(android.telephony.CallQuality)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callQualityChanged(android.telephony.CallQuality)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtendFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtendFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceStateUpdated(android.telephony.ims.ImsConferenceState)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionConferenceStateUpdated(android.telephony.ims.ImsConferenceState)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionDtmfReceived(char)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionDtmfReceived(char)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHandover(int,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHandover(int,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHandoverFailed(int,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHandoverFailed(int,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHeld(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHeld(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHoldFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHoldFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHoldReceived(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionHoldReceived(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiated(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiated(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiatedFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiatedFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiating(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiating(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiatingFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInitiatingFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInviteParticipantsRequestDelivered()>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInviteParticipantsRequestDelivered()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInviteParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionInviteParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMayHandover(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMayHandover(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeComplete(com.android.ims.internal.IImsCallSession)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMergeComplete(com.android.ims.internal.IImsCallSession)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMergeFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMultipartyStateChanged(boolean)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionMultipartyStateChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionProgressing(android.telephony.ims.ImsStreamMediaProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionProgressing(android.telephony.ims.ImsStreamMediaProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRemoveParticipantsRequestDelivered()>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRemoveParticipantsRequestDelivered()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRemoveParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRemoveParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumeFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumeFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumeReceived(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumeReceived(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumed(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionResumed(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRtpHeaderExtensionsReceived(java.util.List)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRtpHeaderExtensionsReceived(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttAudioIndicatorChanged(android.telephony.ims.ImsStreamMediaProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttAudioIndicatorChanged(android.telephony.ims.ImsStreamMediaProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttMessageReceived(java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttMessageReceived(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttModifyResponseReceived(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionRttModifyResponseReceived(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionSendAnbrQuery(int,int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionSendAnbrQuery(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionSuppServiceReceived(android.telephony.ims.ImsSuppServiceNotification)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionSuppServiceReceived(android.telephony.ims.ImsSuppServiceNotification)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionTerminated(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionTerminated(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionTransferFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionTransferFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionTransferred()>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionTransferred()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionTtyModeReceived(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionTtyModeReceived(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdateFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdateFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdateReceived(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdateReceived(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdated(android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUpdated(android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUssdMessageReceived(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy: void callSessionUssdMessageReceived(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsTrafficSessionCallback",
    "implementationName" : "android.telephony.ims.feature.MmTelFeature$ImsTrafficSessionCallbackWrapper$IImsTrafficSessionCallbackStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsTrafficSessionCallback: void onError(android.telephony.ims.feature.ConnectionFailureInfo)>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$ImsTrafficSessionCallbackWrapper$IImsTrafficSessionCallbackStub: void onError(android.telephony.ims.feature.ConnectionFailureInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsTrafficSessionCallback: void onReady()>",
        "implementationMethod" : "<android.telephony.ims.feature.MmTelFeature$ImsTrafficSessionCallbackWrapper$IImsTrafficSessionCallbackStub: void onReady()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsVideoCallProvider",
    "implementationName" : "android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void requestCallDataUsage()>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void requestCallDataUsage()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void requestCameraCapabilities()>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void requestCameraCapabilities()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void sendSessionModifyResponse(android.telecom.VideoProfile)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void sendSessionModifyResponse(android.telecom.VideoProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setCallback(com.android.ims.internal.IImsVideoCallCallback)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setCallback(com.android.ims.internal.IImsVideoCallCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setCamera(java.lang.String,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setCamera(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setDeviceOrientation(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setDeviceOrientation(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setDisplaySurface(android.view.Surface)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setDisplaySurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setPauseImage(android.net.Uri)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setPauseImage(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setPreviewSurface(android.view.Surface)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setPreviewSurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsVideoCallProvider: void setZoom(float)>",
        "implementationMethod" : "<android.telephony.ims.ImsVideoCallProvider$ImsVideoCallProviderBinder: void setZoom(float)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsUtListener",
    "implementationName" : "android.telephony.ims.compat.stub.ImsUtListenerImplBase",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void lineIdentificationSupplementaryServiceResponse(int,android.telephony.ims.ImsSsInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void lineIdentificationSupplementaryServiceResponse(int,android.telephony.ims.ImsSsInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void onSupplementaryServiceIndication(android.telephony.ims.ImsSsData)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void onSupplementaryServiceIndication(android.telephony.ims.ImsSsData)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationCallBarringQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationCallBarringQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationCallForwardQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsCallForwardInfo[])>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationCallForwardQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsCallForwardInfo[])>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationCallWaitingQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationCallWaitingQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationQueryFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationQueryFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationUpdateFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationUpdateFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsUtListener: void utConfigurationUpdated(com.android.ims.internal.IImsUt,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationUpdated(com.android.ims.internal.IImsUt,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.INetdEventCallback",
    "implementationName" : "com.android.server.net.BaseNetdEventCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.INetdEventCallback: void onConnectEvent(java.lang.String,int,long,int)>",
        "implementationMethod" : "<com.android.server.net.BaseNetdEventCallback: void onConnectEvent(java.lang.String,int,long,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetdEventCallback: void onDnsEvent(int,int,int,java.lang.String,java.lang.String[],int,long,int)>",
        "implementationMethod" : "<com.android.server.net.BaseNetdEventCallback: void onDnsEvent(int,int,int,java.lang.String,java.lang.String[],int,long,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetdEventCallback: void onNat64PrefixEvent(int,boolean,java.lang.String,int)>",
        "implementationMethod" : "<com.android.server.net.BaseNetdEventCallback: void onNat64PrefixEvent(int,boolean,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetdEventCallback: void onPrivateDnsValidationEvent(int,java.lang.String,java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.net.BaseNetdEventCallback: void onPrivateDnsValidationEvent(int,java.lang.String,java.lang.String,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.INetworkManagementEventObserver",
    "implementationName" : "com.android.server.net.BaseNetworkObserver",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void addressRemoved(java.lang.String,android.net.LinkAddress)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void addressRemoved(java.lang.String,android.net.LinkAddress)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void addressUpdated(java.lang.String,android.net.LinkAddress)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void addressUpdated(java.lang.String,android.net.LinkAddress)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceAdded(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceClassDataActivityChanged(int,boolean,long,int)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceClassDataActivityChanged(int,boolean,long,int)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceDnsServerInfo(java.lang.String,long,java.lang.String[])>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceDnsServerInfo(java.lang.String,long,java.lang.String[])>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceLinkStateChanged(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceLinkStateChanged(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceRemoved(java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceRemoved(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void interfaceStatusChanged(java.lang.String,boolean)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void interfaceStatusChanged(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void limitReached(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void limitReached(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void routeRemoved(android.net.RouteInfo)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void routeRemoved(android.net.RouteInfo)>"
      },
      {
        "interfaceMethod" : "<android.net.INetworkManagementEventObserver: void routeUpdated(android.net.RouteInfo)>",
        "implementationMethod" : "<com.android.server.net.BaseNetworkObserver: void routeUpdated(android.net.RouteInfo)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.modules.utils.ISynchronousResultReceiver",
    "implementationName" : "com.android.modules.utils.SynchronousResultReceiver$MyResultReceiver",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.modules.utils.ISynchronousResultReceiver: void send(com.android.modules.utils.SynchronousResultReceiver$Result)>",
        "implementationMethod" : "<com.android.modules.utils.SynchronousResultReceiver$MyResultReceiver: void send(com.android.modules.utils.SynchronousResultReceiver$Result)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInputMethod",
    "implementationName" : "android.inputmethodservice.IInputMethodWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void bindInput(android.view.inputmethod.InputBinding)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void bindInput(android.view.inputmethod.InputBinding)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void canStartStylusHandwriting(int)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void canStartStylusHandwriting(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void createSession(android.view.InputChannel,com.android.internal.inputmethod.IInputMethodSessionCallback)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void createSession(android.view.InputChannel,com.android.internal.inputmethod.IInputMethodSessionCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void finishStylusHandwriting()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void finishStylusHandwriting()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void hideSoftInput(android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void hideSoftInput(android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void initInkWindow()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void initInkWindow()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void initializeInternal(com.android.internal.inputmethod.IInputMethod$InitParams)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void initializeInternal(com.android.internal.inputmethod.IInputMethod$InitParams)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void onCreateInlineSuggestionsRequest(com.android.internal.inputmethod.InlineSuggestionsRequestInfo,com.android.internal.inputmethod.IInlineSuggestionsRequestCallback)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void onCreateInlineSuggestionsRequest(com.android.internal.inputmethod.InlineSuggestionsRequestInfo,com.android.internal.inputmethod.IInlineSuggestionsRequestCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void onNavButtonFlagsChanged(int)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void onNavButtonFlagsChanged(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void removeStylusHandwritingWindow()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void removeStylusHandwritingWindow()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void setSessionEnabled(com.android.internal.inputmethod.IInputMethodSession,boolean)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void setSessionEnabled(com.android.internal.inputmethod.IInputMethodSession,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void setStylusWindowIdleTimeoutForTest(long)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void setStylusWindowIdleTimeoutForTest(long)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void showSoftInput(android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void showSoftInput(android.os.IBinder,android.view.inputmethod.ImeTracker$Token,int,android.os.ResultReceiver)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void startInput(com.android.internal.inputmethod.IInputMethod$StartInputParams)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void startInput(com.android.internal.inputmethod.IInputMethod$StartInputParams)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void startStylusHandwriting(int,android.view.InputChannel,java.util.List)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void startStylusHandwriting(int,android.view.InputChannel,java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void unbindInput()>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void unbindInput()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInputMethod: void updateEditorToolType(int)>",
        "implementationMethod" : "<android.inputmethodservice.IInputMethodWrapper: void updateEditorToolType(int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.inputmethod.IInlineSuggestionsResponseCallback",
    "implementationName" : "android.inputmethodservice.InlineSuggestionSession$InlineSuggestionsResponseCallbackImpl",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.inputmethod.IInlineSuggestionsResponseCallback: void onInlineSuggestionsResponse(android.view.autofill.AutofillId,android.view.inputmethod.InlineSuggestionsResponse)>",
        "implementationMethod" : "<android.inputmethodservice.InlineSuggestionSession$InlineSuggestionsResponseCallbackImpl: void onInlineSuggestionsResponse(android.view.autofill.AutofillId,android.view.inputmethod.InlineSuggestionsResponse)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.resolver.IResolverRankerResult",
    "implementationName" : "com.android.internal.app.ResolverRankerServiceResolverComparator$ResolverRankerServiceConnection$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.resolver.IResolverRankerResult: void sendResult(java.util.List)>",
        "implementationMethod" : "<com.android.internal.app.ResolverRankerServiceResolverComparator$ResolverRankerServiceConnection$1: void sendResult(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.resolver.IResolverRankerService",
    "implementationName" : "android.service.resolver.ResolverRankerService$ResolverRankerServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.resolver.IResolverRankerService: void predict(java.util.List,android.service.resolver.IResolverRankerResult)>",
        "implementationMethod" : "<android.service.resolver.ResolverRankerService$ResolverRankerServiceWrapper: void predict(java.util.List,android.service.resolver.IResolverRankerResult)>"
      },
      {
        "interfaceMethod" : "<android.service.resolver.IResolverRankerService: void train(java.util.List,int)>",
        "implementationMethod" : "<android.service.resolver.ResolverRankerService$ResolverRankerServiceWrapper: void train(java.util.List,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.textclassifier.ITextClassifierCallback",
    "implementationName" : "android.view.textclassifier.SystemTextClassifier$BlockingCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierCallback: void onFailure()>",
        "implementationMethod" : "<android.view.textclassifier.SystemTextClassifier$BlockingCallback: void onFailure()>"
      },
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierCallback: void onSuccess(android.os.Bundle)>",
        "implementationMethod" : "<android.view.textclassifier.SystemTextClassifier$BlockingCallback: void onSuccess(android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.textclassifier.ITextClassifierService",
    "implementationName" : "android.service.textclassifier.TextClassifierService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierService: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>",
        "implementationMethod" : "<android.service.textclassifier.TextClassifierService$1: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierService: void onConnectedStateChanged(int)>",
        "implementationMethod" : "<android.service.textclassifier.TextClassifierService$1: void onConnectedStateChanged(int)>"
      },
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierService: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>",
        "implementationMethod" : "<android.service.textclassifier.TextClassifierService$1: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierService: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>",
        "implementationMethod" : "<android.service.textclassifier.TextClassifierService$1: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierService: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>",
        "implementationMethod" : "<android.service.textclassifier.TextClassifierService$1: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierService: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>",
        "implementationMethod" : "<android.service.textclassifier.TextClassifierService$1: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierService: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>",
        "implementationMethod" : "<android.service.textclassifier.TextClassifierService$1: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>"
      },
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierService: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>",
        "implementationMethod" : "<android.service.textclassifier.TextClassifierService$1: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierService: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>",
        "implementationMethod" : "<android.service.textclassifier.TextClassifierService$1: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.textclassifier.ITextClassifierService: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>",
        "implementationMethod" : "<android.service.textclassifier.TextClassifierService$1: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.tts.ITextToSpeechService",
    "implementationName" : "android.speech.tts.TextToSpeechService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: java.lang.String[] getClientDefaultLanguage()>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: java.lang.String[] getClientDefaultLanguage()>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: java.lang.String getDefaultVoiceNameFor(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: java.lang.String getDefaultVoiceNameFor(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: java.lang.String[] getLanguage()>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: java.lang.String[] getLanguage()>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: java.util.List getVoices()>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: java.util.List getVoices()>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: boolean isSpeaking()>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: boolean isSpeaking()>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int loadLanguage(android.os.IBinder,java.lang.String,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int loadLanguage(android.os.IBinder,java.lang.String,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int loadVoice(android.os.IBinder,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int loadVoice(android.os.IBinder,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int playAudio(android.os.IBinder,android.net.Uri,int,android.os.Bundle,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int playAudio(android.os.IBinder,android.net.Uri,int,android.os.Bundle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int playSilence(android.os.IBinder,long,int,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int playSilence(android.os.IBinder,long,int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: void setCallback(android.os.IBinder,android.speech.tts.ITextToSpeechCallback)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: void setCallback(android.os.IBinder,android.speech.tts.ITextToSpeechCallback)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int speak(android.os.IBinder,java.lang.CharSequence,int,android.os.Bundle,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int speak(android.os.IBinder,java.lang.CharSequence,int,android.os.Bundle,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int stop(android.os.IBinder)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int stop(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechService: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.CharSequence,android.os.ParcelFileDescriptor,android.os.Bundle,java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeechService$1: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.CharSequence,android.os.ParcelFileDescriptor,android.os.Bundle,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.tts.ITextToSpeechCallback",
    "implementationName" : "android.speech.tts.TextToSpeech$Connection$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onAudioAvailable(java.lang.String,byte[])>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onAudioAvailable(java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onBeginSynthesis(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onBeginSynthesis(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onError(java.lang.String,int)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onError(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onRangeStart(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onRangeStart(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onStart(java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onStart(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onStop(java.lang.String,boolean)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onStop(java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechCallback: void onSuccess(java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$Connection$1: void onSuccess(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsServiceControllerListener",
    "implementationName" : "android.telephony.ims.ImsService$Listener",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceControllerListener: void onUpdateSupportedImsFeatures(android.telephony.ims.stub.ImsFeatureConfiguration)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$Listener: void onUpdateSupportedImsFeatures(android.telephony.ims.stub.ImsFeatureConfiguration)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsRcsFeature",
    "implementationName" : "android.telephony.ims.feature.RcsFeature$RcsFeatureBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void addCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void addCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void changeCapabilitiesConfiguration(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void changeCapabilitiesConfiguration(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: int getFeatureState()>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: int getFeatureState()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void publishCapabilities(java.lang.String,android.telephony.ims.aidl.IPublishResponseCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void publishCapabilities(java.lang.String,android.telephony.ims.aidl.IPublishResponseCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void queryCapabilityConfiguration(int,int,android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void queryCapabilityConfiguration(int,int,android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: int queryCapabilityStatus()>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: int queryCapabilityStatus()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void removeCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void removeCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void sendOptionsCapabilityRequest(android.net.Uri,java.util.List,android.telephony.ims.aidl.IOptionsResponseCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void sendOptionsCapabilityRequest(android.net.Uri,java.util.List,android.telephony.ims.aidl.IOptionsResponseCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void setCapabilityExchangeEventListener(android.telephony.ims.aidl.ICapabilityExchangeEventListener)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void setCapabilityExchangeEventListener(android.telephony.ims.aidl.ICapabilityExchangeEventListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsRcsFeature: void subscribeForCapabilities(java.util.List,android.telephony.ims.aidl.ISubscribeResponseCallback)>",
        "implementationMethod" : "<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void subscribeForCapabilities(java.util.List,android.telephony.ims.aidl.ISubscribeResponseCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IOptionsRequestCallback",
    "implementationName" : "android.telephony.ims.aidl.CapabilityExchangeAidlWrapper$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IOptionsRequestCallback: void respondToCapabilityRequest(android.telephony.ims.RcsContactUceCapability,boolean)>",
        "implementationMethod" : "<android.telephony.ims.aidl.CapabilityExchangeAidlWrapper$1: void respondToCapabilityRequest(android.telephony.ims.RcsContactUceCapability,boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IOptionsRequestCallback: void respondToCapabilityRequestWithError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.aidl.CapabilityExchangeAidlWrapper$1: void respondToCapabilityRequestWithError(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.view.inline.IInlineContentCallback",
    "implementationName" : "android.view.inputmethod.InlineSuggestion$InlineContentCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.view.inline.IInlineContentCallback: void onClick()>",
        "implementationMethod" : "<android.view.inputmethod.InlineSuggestion$InlineContentCallbackWrapper: void onClick()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.inline.IInlineContentCallback: void onContent(android.view.SurfaceControlViewHost$SurfacePackage,int,int)>",
        "implementationMethod" : "<android.view.inputmethod.InlineSuggestion$InlineContentCallbackWrapper: void onContent(android.view.SurfaceControlViewHost$SurfacePackage,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.view.inline.IInlineContentCallback: void onLongClick()>",
        "implementationMethod" : "<android.view.inputmethod.InlineSuggestion$InlineContentCallbackWrapper: void onLongClick()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsCallSessionListener",
    "implementationName" : "android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callQualityChanged(android.telephony.CallQuality)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callQualityChanged(android.telephony.CallQuality)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceExtendFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtendFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionConferenceStateUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsConferenceState)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionConferenceStateUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsConferenceState)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionHandover(com.android.ims.internal.IImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHandover(com.android.ims.internal.IImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionHandoverFailed(com.android.ims.internal.IImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHandoverFailed(com.android.ims.internal.IImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionHeld(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHeld(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionHoldFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHoldFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionHoldReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionHoldReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionInviteParticipantsRequestDelivered(com.android.ims.internal.IImsCallSession)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionInviteParticipantsRequestDelivered(com.android.ims.internal.IImsCallSession)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionInviteParticipantsRequestFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionInviteParticipantsRequestFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionMayHandover(com.android.ims.internal.IImsCallSession,int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMayHandover(com.android.ims.internal.IImsCallSession,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionMergeComplete(com.android.ims.internal.IImsCallSession)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMergeComplete(com.android.ims.internal.IImsCallSession)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionMergeFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMergeFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionMultipartyStateChanged(com.android.ims.internal.IImsCallSession,boolean)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionMultipartyStateChanged(com.android.ims.internal.IImsCallSession,boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionProgressing(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsStreamMediaProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionProgressing(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsStreamMediaProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRemoveParticipantsRequestDelivered(com.android.ims.internal.IImsCallSession)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRemoveParticipantsRequestDelivered(com.android.ims.internal.IImsCallSession)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRemoveParticipantsRequestFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRemoveParticipantsRequestFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionResumeFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumeFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionResumeReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumeReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionResumed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionResumed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRttAudioIndicatorChanged(android.telephony.ims.ImsStreamMediaProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttAudioIndicatorChanged(android.telephony.ims.ImsStreamMediaProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRttMessageReceived(java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttMessageReceived(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRttModifyRequestReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttModifyRequestReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionRttModifyResponseReceived(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionRttModifyResponseReceived(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionSendAnbrQuery(int,int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionSendAnbrQuery(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionStartFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionStartFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionSuppServiceReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsSuppServiceNotification)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionSuppServiceReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsSuppServiceNotification)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionTerminated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionTerminated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionTransferFailed(android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionTransferFailed(android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionTransferred()>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionTransferred()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionTtyModeReceived(com.android.ims.internal.IImsCallSession,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionTtyModeReceived(com.android.ims.internal.IImsCallSession,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionUpdateFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdateFailed(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsReasonInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionUpdateReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdateReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUpdated(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsCallSessionListener: void callSessionUssdMessageReceived(com.android.ims.internal.IImsCallSession,int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsCallSessionImplBase$ImsCallSessionListenerConverter: void callSessionUssdMessageReceived(com.android.ims.internal.IImsCallSession,int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsConfig",
    "implementationName" : "android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: void getFeatureValue(int,int,com.android.ims.ImsConfigListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: void getFeatureValue(int,int,com.android.ims.ImsConfigListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: java.lang.String getProvisionedStringValue(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: java.lang.String getProvisionedStringValue(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: int getProvisionedValue(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: int getProvisionedValue(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: void getVideoQuality(com.android.ims.ImsConfigListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: void getVideoQuality(com.android.ims.ImsConfigListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: boolean getVolteProvisioned()>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: boolean getVolteProvisioned()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: void setFeatureValue(int,int,int,com.android.ims.ImsConfigListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: void setFeatureValue(int,int,int,com.android.ims.ImsConfigListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: int setProvisionedStringValue(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: int setProvisionedStringValue(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: int setProvisionedValue(int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: int setProvisionedValue(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsConfig: void setVideoQuality(int,com.android.ims.ImsConfigListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: void setVideoQuality(int,com.android.ims.ImsConfigListener)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsMMTelFeature",
    "implementationName" : "android.telephony.ims.compat.feature.MMTelFeature$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void addRegistrationListener(com.android.ims.internal.IImsRegistrationListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void addRegistrationListener(com.android.ims.internal.IImsRegistrationListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: android.telephony.ims.ImsCallProfile createCallProfile(int,int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: android.telephony.ims.ImsCallProfile createCallProfile(int,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsCallSession createCallSession(int,android.telephony.ims.ImsCallProfile)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsCallSession createCallSession(int,android.telephony.ims.ImsCallProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void endSession(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void endSession(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsConfig getConfigInterface()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsConfig getConfigInterface()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsEcbm getEcbmInterface()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsEcbm getEcbmInterface()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: int getFeatureStatus()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: int getFeatureStatus()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsCallSession getPendingCallSession(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsCallSession getPendingCallSession(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: com.android.ims.internal.IImsUt getUtInterface()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: com.android.ims.internal.IImsUt getUtInterface()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: boolean isConnected(int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: boolean isConnected(int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: boolean isOpened()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: boolean isOpened()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void removeRegistrationListener(com.android.ims.internal.IImsRegistrationListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void removeRegistrationListener(com.android.ims.internal.IImsRegistrationListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void setUiTTYMode(int,android.os.Message)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void setUiTTYMode(int,android.os.Message)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: int startSession(android.app.PendingIntent,com.android.ims.internal.IImsRegistrationListener)>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: int startSession(android.app.PendingIntent,com.android.ims.internal.IImsRegistrationListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void turnOffIms()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void turnOffIms()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsMMTelFeature: void turnOnIms()>",
        "implementationMethod" : "<android.telephony.ims.compat.feature.MMTelFeature$1: void turnOnIms()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsRcsFeature",
    "implementationName" : "android.telephony.ims.compat.feature.RcsFeature$1",
    "methods" : [ ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsServiceController",
    "implementationName" : "android.telephony.ims.compat.ImsService$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: void addFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: void addFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: com.android.ims.internal.IImsMMTelFeature createEmergencyMMTelFeature(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: com.android.ims.internal.IImsMMTelFeature createEmergencyMMTelFeature(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: com.android.ims.internal.IImsMMTelFeature createMMTelFeature(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: com.android.ims.internal.IImsMMTelFeature createMMTelFeature(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: com.android.ims.internal.IImsRcsFeature createRcsFeature(int)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: com.android.ims.internal.IImsRcsFeature createRcsFeature(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: void removeFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: void removeFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsServiceController: void removeImsFeature(int,int)>",
        "implementationMethod" : "<android.telephony.ims.compat.ImsService$1: void removeImsFeature(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.IImsStreamMediaSession",
    "implementationName" : "android.telephony.ims.stub.ImsStreamMediaSessionImplBase",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.IImsStreamMediaSession: void close()>",
        "implementationMethod" : "<android.telephony.ims.stub.ImsStreamMediaSessionImplBase: void close()>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.ims.internal.uce.uceservice.IUceService",
    "implementationName" : "com.android.ims.internal.uce.UceServiceBase$UceServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: int createOptionsService(com.android.ims.internal.uce.options.IOptionsListener,com.android.ims.internal.uce.common.UceLong)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: int createOptionsService(com.android.ims.internal.uce.options.IOptionsListener,com.android.ims.internal.uce.common.UceLong)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: int createOptionsServiceForSubscription(com.android.ims.internal.uce.options.IOptionsListener,com.android.ims.internal.uce.common.UceLong,java.lang.String)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: int createOptionsServiceForSubscription(com.android.ims.internal.uce.options.IOptionsListener,com.android.ims.internal.uce.common.UceLong,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: int createPresenceService(com.android.ims.internal.uce.presence.IPresenceListener,com.android.ims.internal.uce.common.UceLong)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: int createPresenceService(com.android.ims.internal.uce.presence.IPresenceListener,com.android.ims.internal.uce.common.UceLong)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: int createPresenceServiceForSubscription(com.android.ims.internal.uce.presence.IPresenceListener,com.android.ims.internal.uce.common.UceLong,java.lang.String)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: int createPresenceServiceForSubscription(com.android.ims.internal.uce.presence.IPresenceListener,com.android.ims.internal.uce.common.UceLong,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: void destroyOptionsService(int)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: void destroyOptionsService(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: void destroyPresenceService(int)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: void destroyPresenceService(int)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: com.android.ims.internal.uce.options.IOptionsService getOptionsService()>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: com.android.ims.internal.uce.options.IOptionsService getOptionsService()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: com.android.ims.internal.uce.options.IOptionsService getOptionsServiceForSubscription(java.lang.String)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: com.android.ims.internal.uce.options.IOptionsService getOptionsServiceForSubscription(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: com.android.ims.internal.uce.presence.IPresenceService getPresenceService()>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: com.android.ims.internal.uce.presence.IPresenceService getPresenceService()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: com.android.ims.internal.uce.presence.IPresenceService getPresenceServiceForSubscription(java.lang.String)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: com.android.ims.internal.uce.presence.IPresenceService getPresenceServiceForSubscription(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: boolean getServiceStatus()>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: boolean getServiceStatus()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: boolean isServiceStarted()>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: boolean isServiceStarted()>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: boolean startService(com.android.ims.internal.uce.uceservice.IUceListener)>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: boolean startService(com.android.ims.internal.uce.uceservice.IUceListener)>"
      },
      {
        "interfaceMethod" : "<com.android.ims.internal.uce.uceservice.IUceService: boolean stopService()>",
        "implementationMethod" : "<com.android.ims.internal.uce.UceServiceBase$UceServiceBinder: boolean stopService()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.media.IMediaBrowserService",
    "implementationName" : "android.service.media.MediaBrowserService$ServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void addSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void addSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void connect(java.lang.String,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void connect(java.lang.String,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void disconnect(android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void disconnect(android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void getMediaItem(java.lang.String,android.os.ResultReceiver,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void getMediaItem(java.lang.String,android.os.ResultReceiver,android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void removeSubscription(java.lang.String,android.os.IBinder,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void removeSubscription(java.lang.String,android.os.IBinder,android.service.media.IMediaBrowserServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserService: void removeSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>",
        "implementationMethod" : "<android.service.media.MediaBrowserService$ServiceBinder: void removeSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.media.IMediaBrowserServiceCallbacks",
    "implementationName" : "android.media.browse.MediaBrowser$ServiceCallbacks",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserServiceCallbacks: void onConnect(java.lang.String,android.media.session.MediaSession$Token,android.os.Bundle)>",
        "implementationMethod" : "<android.media.browse.MediaBrowser$ServiceCallbacks: void onConnect(java.lang.String,android.media.session.MediaSession$Token,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserServiceCallbacks: void onConnectFailed()>",
        "implementationMethod" : "<android.media.browse.MediaBrowser$ServiceCallbacks: void onConnectFailed()>"
      },
      {
        "interfaceMethod" : "<android.service.media.IMediaBrowserServiceCallbacks: void onLoadChildren(java.lang.String,android.content.pm.ParceledListSlice,android.os.Bundle)>",
        "implementationMethod" : "<android.media.browse.MediaBrowser$ServiceCallbacks: void onLoadChildren(java.lang.String,android.content.pm.ParceledListSlice,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.printservice.IPrintService",
    "implementationName" : "android.printservice.PrintService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void createPrinterDiscoverySession()>",
        "implementationMethod" : "<android.printservice.PrintService$1: void createPrinterDiscoverySession()>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void destroyPrinterDiscoverySession()>",
        "implementationMethod" : "<android.printservice.PrintService$1: void destroyPrinterDiscoverySession()>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void onPrintJobQueued(android.print.PrintJobInfo)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void onPrintJobQueued(android.print.PrintJobInfo)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void requestCancelPrintJob(android.print.PrintJobInfo)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void requestCancelPrintJob(android.print.PrintJobInfo)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void requestCustomPrinterIcon(android.print.PrinterId)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void requestCustomPrinterIcon(android.print.PrinterId)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void setClient(android.printservice.IPrintServiceClient)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void setClient(android.printservice.IPrintServiceClient)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void startPrinterDiscovery(java.util.List)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void startPrinterDiscovery(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void startPrinterStateTracking(android.print.PrinterId)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void startPrinterStateTracking(android.print.PrinterId)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void stopPrinterDiscovery()>",
        "implementationMethod" : "<android.printservice.PrintService$1: void stopPrinterDiscovery()>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void stopPrinterStateTracking(android.print.PrinterId)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void stopPrinterStateTracking(android.print.PrinterId)>"
      },
      {
        "interfaceMethod" : "<android.printservice.IPrintService: void validatePrinters(java.util.List)>",
        "implementationMethod" : "<android.printservice.PrintService$1: void validatePrinters(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.printservice.recommendation.IRecommendationService",
    "implementationName" : "android.printservice.recommendation.RecommendationService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.printservice.recommendation.IRecommendationService: void registerCallbacks(android.printservice.recommendation.IRecommendationServiceCallbacks)>",
        "implementationMethod" : "<android.printservice.recommendation.RecommendationService$1: void registerCallbacks(android.printservice.recommendation.IRecommendationServiceCallbacks)>"
      }
    ]
  },
  {
    "interfaceName" : "android.se.omapi.ISecureElementListener",
    "implementationName" : "android.se.omapi.SEService$SEListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.se.omapi.ISecureElementListener: java.lang.String getInterfaceHash()>",
        "implementationMethod" : "<android.se.omapi.SEService$SEListener: java.lang.String getInterfaceHash()>"
      },
      {
        "interfaceMethod" : "<android.se.omapi.ISecureElementListener: int getInterfaceVersion()>",
        "implementationMethod" : "<android.se.omapi.SEService$SEListener: int getInterfaceVersion()>"
      }
    ]
  },
  {
    "interfaceName" : "android.security.apc.IConfirmationCallback",
    "implementationName" : "android.security.ConfirmationPrompt$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.security.apc.IConfirmationCallback: void onCompleted(int,byte[])>",
        "implementationMethod" : "<android.security.ConfirmationPrompt$1: void onCompleted(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "android.security.IKeyChainAliasCallback",
    "implementationName" : "android.security.KeyChain$AliasResponse",
    "methods" : [
      {
        "interfaceMethod" : "<android.security.IKeyChainAliasCallback: void alias(java.lang.String)>",
        "implementationMethod" : "<android.security.KeyChain$AliasResponse: void alias(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.ambientcontext.IAmbientContextDetectionService",
    "implementationName" : "android.service.ambientcontext.AmbientContextDetectionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.ambientcontext.IAmbientContextDetectionService: void queryServiceStatus(int[],java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.ambientcontext.AmbientContextDetectionService$1: void queryServiceStatus(int[],java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.ambientcontext.IAmbientContextDetectionService: void startDetection(android.app.ambientcontext.AmbientContextEventRequest,java.lang.String,android.os.RemoteCallback,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.ambientcontext.AmbientContextDetectionService$1: void startDetection(android.app.ambientcontext.AmbientContextEventRequest,java.lang.String,android.os.RemoteCallback,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.ambientcontext.IAmbientContextDetectionService: void stopDetection(java.lang.String)>",
        "implementationMethod" : "<android.service.ambientcontext.AmbientContextDetectionService$1: void stopDetection(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.appprediction.IPredictionService",
    "implementationName" : "android.service.appprediction.AppPredictionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.appprediction.IPredictionService: void notifyAppTargetEvent(android.app.prediction.AppPredictionSessionId,android.app.prediction.AppTargetEvent)>",
        "implementationMethod" : "<android.service.appprediction.AppPredictionService$1: void notifyAppTargetEvent(android.app.prediction.AppPredictionSessionId,android.app.prediction.AppTargetEvent)>"
      },
      {
        "interfaceMethod" : "<android.service.appprediction.IPredictionService: void notifyLaunchLocationShown(android.app.prediction.AppPredictionSessionId,java.lang.String,android.content.pm.ParceledListSlice)>",
        "implementationMethod" : "<android.service.appprediction.AppPredictionService$1: void notifyLaunchLocationShown(android.app.prediction.AppPredictionSessionId,java.lang.String,android.content.pm.ParceledListSlice)>"
      },
      {
        "interfaceMethod" : "<android.service.appprediction.IPredictionService: void onCreatePredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId)>",
        "implementationMethod" : "<android.service.appprediction.AppPredictionService$1: void onCreatePredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.appprediction.IPredictionService: void onDestroyPredictionSession(android.app.prediction.AppPredictionSessionId)>",
        "implementationMethod" : "<android.service.appprediction.AppPredictionService$1: void onDestroyPredictionSession(android.app.prediction.AppPredictionSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.appprediction.IPredictionService: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>",
        "implementationMethod" : "<android.service.appprediction.AppPredictionService$1: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.appprediction.IPredictionService: void requestPredictionUpdate(android.app.prediction.AppPredictionSessionId)>",
        "implementationMethod" : "<android.service.appprediction.AppPredictionService$1: void requestPredictionUpdate(android.app.prediction.AppPredictionSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.appprediction.IPredictionService: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>",
        "implementationMethod" : "<android.service.appprediction.AppPredictionService$1: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.appprediction.IPredictionService: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>",
        "implementationMethod" : "<android.service.appprediction.AppPredictionService$1: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.assist.classification.IFieldClassificationService",
    "implementationName" : "android.service.assist.classification.FieldClassificationService$FieldClassificationServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationService: void onConnected(boolean,boolean)>",
        "implementationMethod" : "<android.service.assist.classification.FieldClassificationService$FieldClassificationServiceImpl: void onConnected(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationService: void onDisconnected()>",
        "implementationMethod" : "<android.service.assist.classification.FieldClassificationService$FieldClassificationServiceImpl: void onDisconnected()>"
      },
      {
        "interfaceMethod" : "<android.service.assist.classification.IFieldClassificationService: void onFieldClassificationRequest(android.service.assist.classification.FieldClassificationRequest,android.service.assist.classification.IFieldClassificationCallback)>",
        "implementationMethod" : "<android.service.assist.classification.FieldClassificationService$FieldClassificationServiceImpl: void onFieldClassificationRequest(android.service.assist.classification.FieldClassificationRequest,android.service.assist.classification.IFieldClassificationCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.attention.IAttentionService",
    "implementationName" : "android.service.attention.AttentionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.attention.IAttentionService: void cancelAttentionCheck(android.service.attention.IAttentionCallback)>",
        "implementationMethod" : "<android.service.attention.AttentionService$1: void cancelAttentionCheck(android.service.attention.IAttentionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.attention.IAttentionService: void checkAttention(android.service.attention.IAttentionCallback)>",
        "implementationMethod" : "<android.service.attention.AttentionService$1: void checkAttention(android.service.attention.IAttentionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.attention.IAttentionService: void onStartProximityUpdates(android.service.attention.IProximityUpdateCallback)>",
        "implementationMethod" : "<android.service.attention.AttentionService$1: void onStartProximityUpdates(android.service.attention.IProximityUpdateCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.attention.IAttentionService: void onStopProximityUpdates()>",
        "implementationMethod" : "<android.service.attention.AttentionService$1: void onStopProximityUpdates()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.IAutofillFieldClassificationService",
    "implementationName" : "android.service.autofill.AutofillFieldClassificationService$AutofillFieldClassificationServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.IAutofillFieldClassificationService: void calculateScores(android.os.RemoteCallback,java.util.List,java.lang.String[],java.lang.String[],java.lang.String,android.os.Bundle,java.util.Map,java.util.Map)>",
        "implementationMethod" : "<android.service.autofill.AutofillFieldClassificationService$AutofillFieldClassificationServiceWrapper: void calculateScores(android.os.RemoteCallback,java.util.List,java.lang.String[],java.lang.String[],java.lang.String,android.os.Bundle,java.util.Map,java.util.Map)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.IAutoFillService",
    "implementationName" : "android.service.autofill.AutofillService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.IAutoFillService: void onConnectedStateChanged(boolean)>",
        "implementationMethod" : "<android.service.autofill.AutofillService$1: void onConnectedStateChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IAutoFillService: void onFillRequest(android.service.autofill.FillRequest,android.service.autofill.IFillCallback)>",
        "implementationMethod" : "<android.service.autofill.AutofillService$1: void onFillRequest(android.service.autofill.FillRequest,android.service.autofill.IFillCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IAutoFillService: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.ISaveCallback)>",
        "implementationMethod" : "<android.service.autofill.AutofillService$1: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.ISaveCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IAutoFillService: void onSavedPasswordCountRequest(com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<android.service.autofill.AutofillService$1: void onSavedPasswordCountRequest(com.android.internal.os.IResultReceiver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.IInlineSuggestionRenderService",
    "implementationName" : "android.service.autofill.InlineSuggestionRenderService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionRenderService: void destroySuggestionViews(int,int)>",
        "implementationMethod" : "<android.service.autofill.InlineSuggestionRenderService$2: void destroySuggestionViews(int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionRenderService: void getInlineSuggestionsRendererInfo(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.autofill.InlineSuggestionRenderService$2: void getInlineSuggestionsRendererInfo(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionRenderService: void renderSuggestion(android.service.autofill.IInlineSuggestionUiCallback,android.service.autofill.InlinePresentation,int,int,android.os.IBinder,int,int,int)>",
        "implementationMethod" : "<android.service.autofill.InlineSuggestionRenderService$2: void renderSuggestion(android.service.autofill.IInlineSuggestionUiCallback,android.service.autofill.InlinePresentation,int,int,android.os.IBinder,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.IInlineSuggestionUi",
    "implementationName" : "android.service.autofill.InlineSuggestionRenderService$InlineSuggestionUiWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionUi: void getSurfacePackage(android.service.autofill.ISurfacePackageResultCallback)>",
        "implementationMethod" : "<android.service.autofill.InlineSuggestionRenderService$InlineSuggestionUiWrapper: void getSurfacePackage(android.service.autofill.ISurfacePackageResultCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.IInlineSuggestionUi: void releaseSurfaceControlViewHost()>",
        "implementationMethod" : "<android.service.autofill.InlineSuggestionRenderService$InlineSuggestionUiWrapper: void releaseSurfaceControlViewHost()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.autofill.augmented.IAugmentedAutofillService",
    "implementationName" : "android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IAugmentedAutofillService: void onConnected(boolean,boolean)>",
        "implementationMethod" : "<android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onConnected(boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IAugmentedAutofillService: void onDestroyAllFillWindowsRequest()>",
        "implementationMethod" : "<android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onDestroyAllFillWindowsRequest()>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IAugmentedAutofillService: void onDisconnected()>",
        "implementationMethod" : "<android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onDisconnected()>"
      },
      {
        "interfaceMethod" : "<android.service.autofill.augmented.IAugmentedAutofillService: void onFillRequest(int,android.os.IBinder,int,android.content.ComponentName,android.view.autofill.AutofillId,android.view.autofill.AutofillValue,long,android.view.inputmethod.InlineSuggestionsRequest,android.service.autofill.augmented.IFillCallback)>",
        "implementationMethod" : "<android.service.autofill.augmented.AugmentedAutofillService$AugmentedAutofillServiceImpl: void onFillRequest(int,android.os.IBinder,int,android.content.ComponentName,android.view.autofill.AutofillId,android.view.autofill.AutofillValue,long,android.view.inputmethod.InlineSuggestionsRequest,android.service.autofill.augmented.IFillCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.carrier.IApnSourceService",
    "implementationName" : "android.service.carrier.ApnService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.carrier.IApnSourceService: android.content.ContentValues[] getApns(int)>",
        "implementationMethod" : "<android.service.carrier.ApnService$1: android.content.ContentValues[] getApns(int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.carrier.ICarrierMessagingClientService",
    "implementationName" : "android.service.carrier.CarrierMessagingClientService$ICarrierMessagingClientServiceImpl",
    "methods" : [ ]
  },
  {
    "interfaceName" : "android.service.carrier.ICarrierMessagingCallback",
    "implementationName" : "android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingCallback: void onDownloadMmsComplete(int)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal: void onDownloadMmsComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingCallback: void onFilterComplete(int)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal: void onFilterComplete(int)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingCallback: void onSendMmsComplete(int,byte[])>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal: void onSendMmsComplete(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingCallback: void onSendMultipartSmsComplete(int,int[])>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal: void onSendMultipartSmsComplete(int,int[])>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingCallback: void onSendSmsComplete(int,int)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackInternal: void onSendSmsComplete(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.carrier.ICarrierMessagingService",
    "implementationName" : "android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void downloadMms(android.net.Uri,int,android.net.Uri,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void downloadMms(android.net.Uri,int,android.net.Uri,android.service.carrier.ICarrierMessagingCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void filterSms(android.service.carrier.MessagePdu,java.lang.String,int,int,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void filterSms(android.service.carrier.MessagePdu,java.lang.String,int,int,android.service.carrier.ICarrierMessagingCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void sendDataSms(byte[],int,java.lang.String,int,int,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void sendDataSms(byte[],int,java.lang.String,int,int,android.service.carrier.ICarrierMessagingCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void sendMms(android.net.Uri,int,android.net.Uri,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void sendMms(android.net.Uri,int,android.net.Uri,android.service.carrier.ICarrierMessagingCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void sendMultipartTextSms(java.util.List,int,java.lang.String,int,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void sendMultipartTextSms(java.util.List,int,java.lang.String,int,android.service.carrier.ICarrierMessagingCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierMessagingService: void sendTextSms(java.lang.String,int,java.lang.String,int,android.service.carrier.ICarrierMessagingCallback)>",
        "implementationMethod" : "<android.service.carrier.CarrierMessagingService$ICarrierMessagingWrapper: void sendTextSms(java.lang.String,int,java.lang.String,int,android.service.carrier.ICarrierMessagingCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.carrier.ICarrierService",
    "implementationName" : "android.service.carrier.CarrierService$ICarrierServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.carrier.ICarrierService: void getCarrierConfig(int,android.service.carrier.CarrierIdentifier,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.service.carrier.CarrierService$ICarrierServiceWrapper: void getCarrierConfig(int,android.service.carrier.CarrierIdentifier,android.os.ResultReceiver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.chooser.IChooserTargetService",
    "implementationName" : "android.service.chooser.ChooserTargetService$IChooserTargetServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.chooser.IChooserTargetService: void getChooserTargets(android.content.ComponentName,android.content.IntentFilter,android.service.chooser.IChooserTargetResult)>",
        "implementationMethod" : "<android.service.chooser.ChooserTargetService$IChooserTargetServiceWrapper: void getChooserTargets(android.content.ComponentName,android.content.IntentFilter,android.service.chooser.IChooserTargetResult)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.contentcapture.IContentCaptureService",
    "implementationName" : "android.service.contentcapture.ContentCaptureService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onActivityEvent(android.service.contentcapture.ActivityEvent)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onActivityEvent(android.service.contentcapture.ActivityEvent)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onActivitySnapshot(int,android.service.contentcapture.SnapshotData)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onActivitySnapshot(int,android.service.contentcapture.SnapshotData)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onConnected(android.os.IBinder,boolean,boolean)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onConnected(android.os.IBinder,boolean,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onDataRemovalRequest(android.view.contentcapture.DataRemovalRequest)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onDataRemovalRequest(android.view.contentcapture.DataRemovalRequest)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onDataShared(android.view.contentcapture.DataShareRequest,android.service.contentcapture.IDataShareCallback)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onDataShared(android.view.contentcapture.DataShareRequest,android.service.contentcapture.IDataShareCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onDisconnected()>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onDisconnected()>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onSessionFinished(int)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onSessionFinished(int)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IContentCaptureService: void onSessionStarted(android.view.contentcapture.ContentCaptureContext,int,int,com.android.internal.os.IResultReceiver,int)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$1: void onSessionStarted(android.view.contentcapture.ContentCaptureContext,int,int,com.android.internal.os.IResultReceiver,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.contentcapture.IDataShareReadAdapter",
    "implementationName" : "android.service.contentcapture.ContentCaptureService$DataShareReadAdapterDelegate",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.contentcapture.IDataShareReadAdapter: void error(int)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$DataShareReadAdapterDelegate: void error(int)>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IDataShareReadAdapter: void finish()>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$DataShareReadAdapterDelegate: void finish()>"
      },
      {
        "interfaceMethod" : "<android.service.contentcapture.IDataShareReadAdapter: void start(android.os.ParcelFileDescriptor)>",
        "implementationMethod" : "<android.service.contentcapture.ContentCaptureService$DataShareReadAdapterDelegate: void start(android.os.ParcelFileDescriptor)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.contentsuggestions.IContentSuggestionsService",
    "implementationName" : "android.service.contentsuggestions.ContentSuggestionsService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.contentsuggestions.IContentSuggestionsService: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>",
        "implementationMethod" : "<android.service.contentsuggestions.ContentSuggestionsService$1: void classifyContentSelections(android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.contentsuggestions.IContentSuggestionsService: void notifyInteraction(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.service.contentsuggestions.ContentSuggestionsService$1: void notifyInteraction(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.contentsuggestions.IContentSuggestionsService: void provideContextImage(int,android.hardware.HardwareBuffer,int,android.os.Bundle)>",
        "implementationMethod" : "<android.service.contentsuggestions.ContentSuggestionsService$1: void provideContextImage(int,android.hardware.HardwareBuffer,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.contentsuggestions.IContentSuggestionsService: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>",
        "implementationMethod" : "<android.service.contentsuggestions.ContentSuggestionsService$1: void suggestContentSelections(android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.controls.IControlsProvider",
    "implementationName" : "android.service.controls.ControlsProviderService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.controls.IControlsProvider: void action(java.lang.String,android.service.controls.actions.ControlActionWrapper,android.service.controls.IControlsActionCallback)>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$1: void action(java.lang.String,android.service.controls.actions.ControlActionWrapper,android.service.controls.IControlsActionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.controls.IControlsProvider: void load(android.service.controls.IControlsSubscriber)>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$1: void load(android.service.controls.IControlsSubscriber)>"
      },
      {
        "interfaceMethod" : "<android.service.controls.IControlsProvider: void loadSuggested(android.service.controls.IControlsSubscriber)>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$1: void loadSuggested(android.service.controls.IControlsSubscriber)>"
      },
      {
        "interfaceMethod" : "<android.service.controls.IControlsProvider: void subscribe(java.util.List,android.service.controls.IControlsSubscriber)>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$1: void subscribe(java.util.List,android.service.controls.IControlsSubscriber)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.controls.IControlsSubscription",
    "implementationName" : "android.service.controls.ControlsProviderService$SubscriptionAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.controls.IControlsSubscription: void cancel()>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$SubscriptionAdapter: void cancel()>"
      },
      {
        "interfaceMethod" : "<android.service.controls.IControlsSubscription: void request(long)>",
        "implementationMethod" : "<android.service.controls.ControlsProviderService$SubscriptionAdapter: void request(long)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.credentials.ICredentialProviderService",
    "implementationName" : "android.service.credentials.CredentialProviderService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.credentials.ICredentialProviderService: void onBeginCreateCredential(android.service.credentials.BeginCreateCredentialRequest,android.service.credentials.IBeginCreateCredentialCallback)>",
        "implementationMethod" : "<android.service.credentials.CredentialProviderService$1: void onBeginCreateCredential(android.service.credentials.BeginCreateCredentialRequest,android.service.credentials.IBeginCreateCredentialCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.credentials.ICredentialProviderService: void onBeginGetCredential(android.service.credentials.BeginGetCredentialRequest,android.service.credentials.IBeginGetCredentialCallback)>",
        "implementationMethod" : "<android.service.credentials.CredentialProviderService$1: void onBeginGetCredential(android.service.credentials.BeginGetCredentialRequest,android.service.credentials.IBeginGetCredentialCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.credentials.ICredentialProviderService: void onClearCredentialState(android.service.credentials.ClearCredentialStateRequest,android.service.credentials.IClearCredentialStateCallback)>",
        "implementationMethod" : "<android.service.credentials.CredentialProviderService$1: void onClearCredentialState(android.service.credentials.ClearCredentialStateRequest,android.service.credentials.IClearCredentialStateCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.displayhash.IDisplayHashingService",
    "implementationName" : "android.service.displayhash.DisplayHashingService$DisplayHashingServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.displayhash.IDisplayHashingService: void generateDisplayHash(byte[],android.hardware.HardwareBuffer,android.graphics.Rect,java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.displayhash.DisplayHashingService$DisplayHashingServiceWrapper: void generateDisplayHash(byte[],android.hardware.HardwareBuffer,android.graphics.Rect,java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.displayhash.IDisplayHashingService: void getDisplayHashAlgorithms(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.displayhash.DisplayHashingService$DisplayHashingServiceWrapper: void getDisplayHashAlgorithms(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.displayhash.IDisplayHashingService: void getIntervalBetweenRequestsMillis(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.displayhash.DisplayHashingService$DisplayHashingServiceWrapper: void getIntervalBetweenRequestsMillis(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.displayhash.IDisplayHashingService: void verifyDisplayHash(byte[],android.view.displayhash.DisplayHash,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.displayhash.DisplayHashingService$DisplayHashingServiceWrapper: void verifyDisplayHash(byte[],android.view.displayhash.DisplayHash,android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamOverlayCallback",
    "implementationName" : "android.service.dreams.DreamService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlayCallback: void onExitRequested()>",
        "implementationMethod" : "<android.service.dreams.DreamService$1: void onExitRequested()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamOverlayClient",
    "implementationName" : "android.service.dreams.DreamOverlayService$OverlayClient",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlayClient: void endDream()>",
        "implementationMethod" : "<android.service.dreams.DreamOverlayService$OverlayClient: void endDream()>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlayClient: void startDream(android.view.WindowManager$LayoutParams,android.service.dreams.IDreamOverlayCallback,java.lang.String,boolean)>",
        "implementationMethod" : "<android.service.dreams.DreamOverlayService$OverlayClient: void startDream(android.view.WindowManager$LayoutParams,android.service.dreams.IDreamOverlayCallback,java.lang.String,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlayClient: void wakeUp()>",
        "implementationMethod" : "<android.service.dreams.DreamOverlayService$OverlayClient: void wakeUp()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamService",
    "implementationName" : "android.service.dreams.DreamService$DreamServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamService: void attach(android.os.IBinder,boolean,boolean,android.os.IRemoteCallback)>",
        "implementationMethod" : "<android.service.dreams.DreamService$DreamServiceWrapper: void attach(android.os.IBinder,boolean,boolean,android.os.IRemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamService: void detach()>",
        "implementationMethod" : "<android.service.dreams.DreamService$DreamServiceWrapper: void detach()>"
      },
      {
        "interfaceMethod" : "<android.service.dreams.IDreamService: void wakeUp()>",
        "implementationMethod" : "<android.service.dreams.DreamService$DreamServiceWrapper: void wakeUp()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamOverlayClientCallback",
    "implementationName" : "android.service.dreams.DreamOverlayConnectionHandler$OverlayConnectionCallback$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlayClientCallback: void onDreamOverlayClient(android.service.dreams.IDreamOverlayClient)>",
        "implementationMethod" : "<android.service.dreams.DreamOverlayConnectionHandler$OverlayConnectionCallback$1: void onDreamOverlayClient(android.service.dreams.IDreamOverlayClient)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.dreams.IDreamOverlay",
    "implementationName" : "android.service.dreams.DreamOverlayService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.dreams.IDreamOverlay: void getClient(android.service.dreams.IDreamOverlayClientCallback)>",
        "implementationMethod" : "<android.service.dreams.DreamOverlayService$1: void getClient(android.service.dreams.IDreamOverlayClientCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.euicc.IEuiccService",
    "implementationName" : "android.service.euicc.EuiccService$IEuiccServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void deleteSubscription(int,java.lang.String,android.service.euicc.IDeleteSubscriptionCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void deleteSubscription(int,java.lang.String,android.service.euicc.IDeleteSubscriptionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void downloadSubscription(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.os.Bundle,android.service.euicc.IDownloadSubscriptionCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void downloadSubscription(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.os.Bundle,android.service.euicc.IDownloadSubscriptionCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void dump(android.service.euicc.IEuiccServiceDumpResultCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void dump(android.service.euicc.IEuiccServiceDumpResultCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void eraseSubscriptions(int,android.service.euicc.IEraseSubscriptionsCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void eraseSubscriptions(int,android.service.euicc.IEraseSubscriptionsCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void eraseSubscriptionsWithOptions(int,int,android.service.euicc.IEraseSubscriptionsCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void eraseSubscriptionsWithOptions(int,int,android.service.euicc.IEraseSubscriptionsCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getDefaultDownloadableSubscriptionList(int,boolean,android.service.euicc.IGetDefaultDownloadableSubscriptionListCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getDefaultDownloadableSubscriptionList(int,boolean,android.service.euicc.IGetDefaultDownloadableSubscriptionListCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getDownloadableSubscriptionMetadata(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.service.euicc.IGetDownloadableSubscriptionMetadataCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getDownloadableSubscriptionMetadata(int,int,android.telephony.euicc.DownloadableSubscription,boolean,boolean,android.service.euicc.IGetDownloadableSubscriptionMetadataCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getEid(int,android.service.euicc.IGetEidCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getEid(int,android.service.euicc.IGetEidCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getEuiccInfo(int,android.service.euicc.IGetEuiccInfoCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getEuiccInfo(int,android.service.euicc.IGetEuiccInfoCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getEuiccProfileInfoList(int,android.service.euicc.IGetEuiccProfileInfoListCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getEuiccProfileInfoList(int,android.service.euicc.IGetEuiccProfileInfoListCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void getOtaStatus(int,android.service.euicc.IGetOtaStatusCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void getOtaStatus(int,android.service.euicc.IGetOtaStatusCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void retainSubscriptionsForFactoryReset(int,android.service.euicc.IRetainSubscriptionsForFactoryResetCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void retainSubscriptionsForFactoryReset(int,android.service.euicc.IRetainSubscriptionsForFactoryResetCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void startOtaIfNecessary(int,android.service.euicc.IOtaStatusChangedCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void startOtaIfNecessary(int,android.service.euicc.IOtaStatusChangedCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void switchToSubscription(int,int,java.lang.String,boolean,android.service.euicc.ISwitchToSubscriptionCallback,boolean)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void switchToSubscription(int,int,java.lang.String,boolean,android.service.euicc.ISwitchToSubscriptionCallback,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.euicc.IEuiccService: void updateSubscriptionNickname(int,java.lang.String,java.lang.String,android.service.euicc.IUpdateSubscriptionNicknameCallback)>",
        "implementationMethod" : "<android.service.euicc.EuiccService$IEuiccServiceWrapper: void updateSubscriptionNickname(int,java.lang.String,java.lang.String,android.service.euicc.IUpdateSubscriptionNicknameCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.games.IGameSession",
    "implementationName" : "android.service.games.GameSession$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.games.IGameSession: void onDestroyed()>",
        "implementationMethod" : "<android.service.games.GameSession$1: void onDestroyed()>"
      },
      {
        "interfaceMethod" : "<android.service.games.IGameSession: void onTaskFocusChanged(boolean)>",
        "implementationMethod" : "<android.service.games.GameSession$1: void onTaskFocusChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.games.IGameSession: void onTransientSystemBarVisibilityFromRevealGestureChanged(boolean)>",
        "implementationMethod" : "<android.service.games.GameSession$1: void onTransientSystemBarVisibilityFromRevealGestureChanged(boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.games.IGameService",
    "implementationName" : "android.service.games.GameService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.games.IGameService: void connected(android.service.games.IGameServiceController)>",
        "implementationMethod" : "<android.service.games.GameService$1: void connected(android.service.games.IGameServiceController)>"
      },
      {
        "interfaceMethod" : "<android.service.games.IGameService: void disconnected()>",
        "implementationMethod" : "<android.service.games.GameService$1: void disconnected()>"
      },
      {
        "interfaceMethod" : "<android.service.games.IGameService: void gameStarted(android.service.games.GameStartedEvent)>",
        "implementationMethod" : "<android.service.games.GameService$1: void gameStarted(android.service.games.GameStartedEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.games.IGameSessionService",
    "implementationName" : "android.service.games.GameSessionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.games.IGameSessionService: void create(android.service.games.IGameSessionController,android.service.games.CreateGameSessionRequest,android.service.games.GameSessionViewHostConfiguration,com.android.internal.infra.AndroidFuture)>",
        "implementationMethod" : "<android.service.games.GameSessionService$1: void create(android.service.games.IGameSessionController,android.service.games.CreateGameSessionRequest,android.service.games.GameSessionViewHostConfiguration,com.android.internal.infra.AndroidFuture)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks",
    "implementationName" : "android.service.quickaccesswallet.QuickAccessWalletClientImpl$BaseCallbacks",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks: void onGetWalletCardsFailure(android.service.quickaccesswallet.GetWalletCardsError)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletClientImpl$BaseCallbacks: void onGetWalletCardsFailure(android.service.quickaccesswallet.GetWalletCardsError)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks: void onGetWalletCardsSuccess(android.service.quickaccesswallet.GetWalletCardsResponse)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletClientImpl$BaseCallbacks: void onGetWalletCardsSuccess(android.service.quickaccesswallet.GetWalletCardsResponse)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks: void onTargetActivityPendingIntentReceived(android.app.PendingIntent)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletClientImpl$BaseCallbacks: void onTargetActivityPendingIntentReceived(android.app.PendingIntent)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks: void onWalletServiceEvent(android.service.quickaccesswallet.WalletServiceEvent)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletClientImpl$BaseCallbacks: void onWalletServiceEvent(android.service.quickaccesswallet.WalletServiceEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.quickaccesswallet.IQuickAccessWalletService",
    "implementationName" : "android.service.quickaccesswallet.QuickAccessWalletService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void onTargetActivityIntentRequested(android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void onTargetActivityIntentRequested(android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void onWalletCardSelected(android.service.quickaccesswallet.SelectWalletCardRequest)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void onWalletCardSelected(android.service.quickaccesswallet.SelectWalletCardRequest)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void onWalletCardsRequested(android.service.quickaccesswallet.GetWalletCardsRequest,android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void onWalletCardsRequested(android.service.quickaccesswallet.GetWalletCardsRequest,android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void onWalletDismissed()>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void onWalletDismissed()>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void registerWalletServiceEventListener(android.service.quickaccesswallet.WalletServiceEventListenerRequest,android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void registerWalletServiceEventListener(android.service.quickaccesswallet.WalletServiceEventListenerRequest,android.service.quickaccesswallet.IQuickAccessWalletServiceCallbacks)>"
      },
      {
        "interfaceMethod" : "<android.service.quickaccesswallet.IQuickAccessWalletService: void unregisterWalletServiceEventListener(android.service.quickaccesswallet.WalletServiceEventListenerRequest)>",
        "implementationMethod" : "<android.service.quickaccesswallet.QuickAccessWalletService$1: void unregisterWalletServiceEventListener(android.service.quickaccesswallet.WalletServiceEventListenerRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.quicksettings.IQSTileService",
    "implementationName" : "android.service.quicksettings.TileService$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onClick(android.os.IBinder)>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onClick(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onStartListening()>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onStartListening()>"
      },
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onStopListening()>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onStopListening()>"
      },
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onTileAdded()>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onTileAdded()>"
      },
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onTileRemoved()>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onTileRemoved()>"
      },
      {
        "interfaceMethod" : "<android.service.quicksettings.IQSTileService: void onUnlockComplete()>",
        "implementationMethod" : "<android.service.quicksettings.TileService$2: void onUnlockComplete()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.remotelockscreenvalidation.IRemoteLockscreenValidationService",
    "implementationName" : "android.service.remotelockscreenvalidation.RemoteLockscreenValidationService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.remotelockscreenvalidation.IRemoteLockscreenValidationService: void validateLockscreenGuess(byte[],android.service.remotelockscreenvalidation.IRemoteLockscreenValidationCallback)>",
        "implementationMethod" : "<android.service.remotelockscreenvalidation.RemoteLockscreenValidationService$1: void validateLockscreenGuess(byte[],android.service.remotelockscreenvalidation.IRemoteLockscreenValidationCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.resumeonreboot.IResumeOnRebootService",
    "implementationName" : "android.service.resumeonreboot.ResumeOnRebootService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.resumeonreboot.IResumeOnRebootService: void unwrap(byte[],android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.resumeonreboot.ResumeOnRebootService$1: void unwrap(byte[],android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.resumeonreboot.IResumeOnRebootService: void wrapSecret(byte[],long,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.resumeonreboot.ResumeOnRebootService$1: void wrapSecret(byte[],long,android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.rotationresolver.IRotationResolverService",
    "implementationName" : "android.service.rotationresolver.RotationResolverService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.rotationresolver.IRotationResolverService: void resolveRotation(android.service.rotationresolver.IRotationResolverCallback,android.service.rotationresolver.RotationResolutionRequest)>",
        "implementationMethod" : "<android.service.rotationresolver.RotationResolverService$1: void resolveRotation(android.service.rotationresolver.IRotationResolverCallback,android.service.rotationresolver.RotationResolutionRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.search.ISearchUiService",
    "implementationName" : "android.service.search.SearchUiService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onCreateSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onCreateSearchSession(android.app.search.SearchContext,android.app.search.SearchSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onDestroy(android.app.search.SearchSessionId)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onDestroy(android.app.search.SearchSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onNotifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onNotifyEvent(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.SearchTargetEvent)>"
      },
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onQuery(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onQuery(android.app.search.SearchSessionId,android.app.search.Query,android.app.search.ISearchCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onRegisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onRegisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.search.ISearchUiService: void onUnregisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>",
        "implementationMethod" : "<android.service.search.SearchUiService$1: void onUnregisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId,android.app.search.ISearchCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.selectiontoolbar.ISelectionToolbarRenderService",
    "implementationName" : "android.service.selectiontoolbar.SelectionToolbarRenderService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onConnected(android.os.IBinder)>",
        "implementationMethod" : "<android.service.selectiontoolbar.SelectionToolbarRenderService$1: void onConnected(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onDismiss(int,long)>",
        "implementationMethod" : "<android.service.selectiontoolbar.SelectionToolbarRenderService$1: void onDismiss(int,long)>"
      },
      {
        "interfaceMethod" : "<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onHide(long)>",
        "implementationMethod" : "<android.service.selectiontoolbar.SelectionToolbarRenderService$1: void onHide(long)>"
      },
      {
        "interfaceMethod" : "<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onShow(int,android.view.selectiontoolbar.ShowInfo,android.view.selectiontoolbar.ISelectionToolbarCallback)>",
        "implementationMethod" : "<android.service.selectiontoolbar.SelectionToolbarRenderService$1: void onShow(int,android.view.selectiontoolbar.ShowInfo,android.view.selectiontoolbar.ISelectionToolbarCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.settings.suggestions.ISuggestionService",
    "implementationName" : "android.service.settings.suggestions.SuggestionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.settings.suggestions.ISuggestionService: void dismissSuggestion(android.service.settings.suggestions.Suggestion)>",
        "implementationMethod" : "<android.service.settings.suggestions.SuggestionService$1: void dismissSuggestion(android.service.settings.suggestions.Suggestion)>"
      },
      {
        "interfaceMethod" : "<android.service.settings.suggestions.ISuggestionService: java.util.List getSuggestions()>",
        "implementationMethod" : "<android.service.settings.suggestions.SuggestionService$1: java.util.List getSuggestions()>"
      },
      {
        "interfaceMethod" : "<android.service.settings.suggestions.ISuggestionService: void launchSuggestion(android.service.settings.suggestions.Suggestion)>",
        "implementationMethod" : "<android.service.settings.suggestions.SuggestionService$1: void launchSuggestion(android.service.settings.suggestions.Suggestion)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.smartspace.ISmartspaceService",
    "implementationName" : "android.service.smartspace.SmartspaceService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void notifySmartspaceEvent(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.SmartspaceTargetEvent)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void notifySmartspaceEvent(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.SmartspaceTargetEvent)>"
      },
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void onCreateSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void onCreateSmartspaceSession(android.app.smartspace.SmartspaceConfig,android.app.smartspace.SmartspaceSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void onDestroySmartspaceSession(android.app.smartspace.SmartspaceSessionId)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void onDestroySmartspaceSession(android.app.smartspace.SmartspaceSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void registerSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void registerSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void requestSmartspaceUpdate(android.app.smartspace.SmartspaceSessionId)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void requestSmartspaceUpdate(android.app.smartspace.SmartspaceSessionId)>"
      },
      {
        "interfaceMethod" : "<android.service.smartspace.ISmartspaceService: void unregisterSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>",
        "implementationMethod" : "<android.service.smartspace.SmartspaceService$1: void unregisterSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId,android.app.smartspace.ISmartspaceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.storage.IExternalStorageService",
    "implementationName" : "android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.storage.IExternalStorageService: void endSession(java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper: void endSession(java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.storage.IExternalStorageService: void freeCache(java.lang.String,java.lang.String,long,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper: void freeCache(java.lang.String,java.lang.String,long,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.storage.IExternalStorageService: void notifyAnrDelayStarted(java.lang.String,int,int,int)>",
        "implementationMethod" : "<android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper: void notifyAnrDelayStarted(java.lang.String,int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.storage.IExternalStorageService: void notifyVolumeStateChanged(java.lang.String,android.os.storage.StorageVolume,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper: void notifyVolumeStateChanged(java.lang.String,android.os.storage.StorageVolume,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.storage.IExternalStorageService: void startSession(java.lang.String,int,android.os.ParcelFileDescriptor,java.lang.String,java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.storage.ExternalStorageService$ExternalStorageServiceWrapper: void startSession(java.lang.String,int,android.os.ParcelFileDescriptor,java.lang.String,java.lang.String,android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.textservice.ISpellCheckerService",
    "implementationName" : "android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.textservice.ISpellCheckerService: void getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int,com.android.internal.textservice.ISpellCheckerServiceCallback)>",
        "implementationMethod" : "<android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder: void getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,int,com.android.internal.textservice.ISpellCheckerServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.timezone.ITimeZoneProvider",
    "implementationName" : "android.service.timezone.TimeZoneProviderService$TimeZoneProviderServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.timezone.ITimeZoneProvider: void startUpdates(android.service.timezone.ITimeZoneProviderManager,long,long)>",
        "implementationMethod" : "<android.service.timezone.TimeZoneProviderService$TimeZoneProviderServiceWrapper: void startUpdates(android.service.timezone.ITimeZoneProviderManager,long,long)>"
      },
      {
        "interfaceMethod" : "<android.service.timezone.ITimeZoneProvider: void stopUpdates()>",
        "implementationMethod" : "<android.service.timezone.TimeZoneProviderService$TimeZoneProviderServiceWrapper: void stopUpdates()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.translation.ITranslationService",
    "implementationName" : "android.service.translation.TranslationService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.translation.ITranslationService: void onConnected(android.os.IBinder)>",
        "implementationMethod" : "<android.service.translation.TranslationService$1: void onConnected(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.service.translation.ITranslationService: void onCreateTranslationSession(android.view.translation.TranslationContext,int,com.android.internal.os.IResultReceiver)>",
        "implementationMethod" : "<android.service.translation.TranslationService$1: void onCreateTranslationSession(android.view.translation.TranslationContext,int,com.android.internal.os.IResultReceiver)>"
      },
      {
        "interfaceMethod" : "<android.service.translation.ITranslationService: void onDisconnected()>",
        "implementationMethod" : "<android.service.translation.TranslationService$1: void onDisconnected()>"
      },
      {
        "interfaceMethod" : "<android.service.translation.ITranslationService: void onTranslationCapabilitiesRequest(int,int,android.os.ResultReceiver)>",
        "implementationMethod" : "<android.service.translation.TranslationService$1: void onTranslationCapabilitiesRequest(int,int,android.os.ResultReceiver)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.trust.ITrustAgentService",
    "implementationName" : "android.service.trust.TrustAgentService$TrustAgentServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onConfigure(java.util.List,android.os.IBinder)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onConfigure(java.util.List,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onDeviceLocked()>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onDeviceLocked()>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onDeviceUnlocked()>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onDeviceUnlocked()>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onEscrowTokenAdded(byte[],long,android.os.UserHandle)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onEscrowTokenAdded(byte[],long,android.os.UserHandle)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onEscrowTokenRemoved(long,boolean)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onEscrowTokenRemoved(long,boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onTokenStateReceived(long,int)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onTokenStateReceived(long,int)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onTrustTimeout()>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onTrustTimeout()>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onUnlockAttempt(boolean)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onUnlockAttempt(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onUnlockLockout(int)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onUnlockLockout(int)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onUserMayRequestUnlock()>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onUserMayRequestUnlock()>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void onUserRequestedUnlock(boolean)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void onUserRequestedUnlock(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.trust.ITrustAgentService: void setCallback(android.service.trust.ITrustAgentServiceCallback)>",
        "implementationMethod" : "<android.service.trust.TrustAgentService$TrustAgentServiceWrapper: void setCallback(android.service.trust.ITrustAgentServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.IRecognitionServiceManagerCallback",
    "implementationName" : "android.speech.SpeechRecognizer$2",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.IRecognitionServiceManagerCallback: void onError(int)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$2: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionServiceManagerCallback: void onSuccess(android.speech.IRecognitionService)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$2: void onSuccess(android.speech.IRecognitionService)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.IRecognitionService",
    "implementationName" : "android.speech.RecognitionService$RecognitionServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener,boolean)>",
        "implementationMethod" : "<android.speech.RecognitionService$RecognitionServiceBinder: void cancel(android.speech.IRecognitionListener,boolean)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionService: void checkRecognitionSupport(android.content.Intent,android.content.AttributionSource,android.speech.IRecognitionSupportCallback)>",
        "implementationMethod" : "<android.speech.RecognitionService$RecognitionServiceBinder: void checkRecognitionSupport(android.content.Intent,android.content.AttributionSource,android.speech.IRecognitionSupportCallback)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionService: void startListening(android.content.Intent,android.speech.IRecognitionListener,android.content.AttributionSource)>",
        "implementationMethod" : "<android.speech.RecognitionService$RecognitionServiceBinder: void startListening(android.content.Intent,android.speech.IRecognitionListener,android.content.AttributionSource)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionService: void stopListening(android.speech.IRecognitionListener)>",
        "implementationMethod" : "<android.speech.RecognitionService$RecognitionServiceBinder: void stopListening(android.speech.IRecognitionListener)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionService: void triggerModelDownload(android.content.Intent,android.content.AttributionSource,android.speech.IModelDownloadListener)>",
        "implementationMethod" : "<android.speech.RecognitionService$RecognitionServiceBinder: void triggerModelDownload(android.content.Intent,android.content.AttributionSource,android.speech.IModelDownloadListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.IRecognitionListener",
    "implementationName" : "android.speech.SpeechRecognizer$InternalRecognitionListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onBeginningOfSpeech()>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onBeginningOfSpeech()>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onBufferReceived(byte[])>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onBufferReceived(byte[])>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onEndOfSegmentedSession()>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onEndOfSegmentedSession()>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onEndOfSpeech()>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onEndOfSpeech()>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onError(int)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onEvent(int,android.os.Bundle)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onEvent(int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onLanguageDetection(android.os.Bundle)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onLanguageDetection(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onPartialResults(android.os.Bundle)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onPartialResults(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onReadyForSpeech(android.os.Bundle)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onReadyForSpeech(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onResults(android.os.Bundle)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onResults(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onRmsChanged(float)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onRmsChanged(float)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionListener: void onSegmentResults(android.os.Bundle)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalRecognitionListener: void onSegmentResults(android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.IRecognitionSupportCallback",
    "implementationName" : "android.speech.SpeechRecognizer$InternalSupportCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.IRecognitionSupportCallback: void onError(int)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalSupportCallback: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.speech.IRecognitionSupportCallback: void onSupportResult(android.speech.RecognitionSupport)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalSupportCallback: void onSupportResult(android.speech.RecognitionSupport)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.IModelDownloadListener",
    "implementationName" : "android.speech.SpeechRecognizer$InternalModelDownloadListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.IModelDownloadListener: void onError(int)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalModelDownloadListener: void onError(int)>"
      },
      {
        "interfaceMethod" : "<android.speech.IModelDownloadListener: void onProgress(int)>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalModelDownloadListener: void onProgress(int)>"
      },
      {
        "interfaceMethod" : "<android.speech.IModelDownloadListener: void onScheduled()>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalModelDownloadListener: void onScheduled()>"
      },
      {
        "interfaceMethod" : "<android.speech.IModelDownloadListener: void onSuccess()>",
        "implementationMethod" : "<android.speech.SpeechRecognizer$InternalModelDownloadListener: void onSuccess()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.voice.IVoiceInteractionService",
    "implementationName" : "android.service.voice.VoiceInteractionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void detectorRemoteExceptionOccurred(android.os.IBinder,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void detectorRemoteExceptionOccurred(android.os.IBinder,int)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void launchVoiceAssistFromKeyguard()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void launchVoiceAssistFromKeyguard()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void prepareToShowSession(android.os.Bundle,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void prepareToShowSession(android.os.Bundle,int)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void ready()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void ready()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void showSessionFailed(android.os.Bundle)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void showSessionFailed(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void shutdown()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void shutdown()>"
      },
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionService: void soundModelsChanged()>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionService$1: void soundModelsChanged()>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.voice.IVoiceInteractionSessionService",
    "implementationName" : "android.service.voice.VoiceInteractionSessionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.voice.IVoiceInteractionSessionService: void newSession(android.os.IBinder,android.os.Bundle,int)>",
        "implementationMethod" : "<android.service.voice.VoiceInteractionSessionService$1: void newSession(android.os.IBinder,android.os.Bundle,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.vr.IVrListener",
    "implementationName" : "android.service.vr.VrListenerService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.vr.IVrListener: void focusedActivityChanged(android.content.ComponentName,boolean,int)>",
        "implementationMethod" : "<android.service.vr.VrListenerService$1: void focusedActivityChanged(android.content.ComponentName,boolean,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.wallpaper.IWallpaperEngine",
    "implementationName" : "android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void addLocalColorsAreas(java.util.List)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void addLocalColorsAreas(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void applyDimming(float)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void applyDimming(float)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void destroy()>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void destroy()>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void dispatchPointer(android.view.MotionEvent)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void dispatchPointer(android.view.MotionEvent)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: android.view.SurfaceControl mirrorSurfaceControl()>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.view.SurfaceControl mirrorSurfaceControl()>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void onScreenTurnedOn()>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void onScreenTurnedOn()>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void onScreenTurningOn()>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void onScreenTurningOn()>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void removeLocalColorsAreas(java.util.List)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void removeLocalColorsAreas(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void requestWallpaperColors()>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void requestWallpaperColors()>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void resizePreview(android.graphics.Rect)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void resizePreview(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setDesiredSize(int,int)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setDesiredSize(int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setDisplayPadding(android.graphics.Rect)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setDisplayPadding(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setInAmbientMode(boolean,long)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setInAmbientMode(boolean,long)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setVisibility(boolean)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setVisibility(boolean)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setWallpaperFlags(int)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setWallpaperFlags(int)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperEngine: void setZoomOut(float)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setZoomOut(float)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.wallpaper.IWallpaperService",
    "implementationName" : "android.service.wallpaper.WallpaperService$IWallpaperServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperService: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int,android.graphics.Rect,int,int)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperServiceWrapper: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int,android.graphics.Rect,int,int)>"
      },
      {
        "interfaceMethod" : "<android.service.wallpaper.IWallpaperService: void detach(android.os.IBinder)>",
        "implementationMethod" : "<android.service.wallpaper.WallpaperService$IWallpaperServiceWrapper: void detach(android.os.IBinder)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.wallpapereffectsgeneration.IWallpaperEffectsGenerationService",
    "implementationName" : "android.service.wallpapereffectsgeneration.WallpaperEffectsGenerationService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.wallpapereffectsgeneration.IWallpaperEffectsGenerationService: void onGenerateCinematicEffect(android.app.wallpapereffectsgeneration.CinematicEffectRequest)>",
        "implementationMethod" : "<android.service.wallpapereffectsgeneration.WallpaperEffectsGenerationService$1: void onGenerateCinematicEffect(android.app.wallpapereffectsgeneration.CinematicEffectRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.watchdog.IExplicitHealthCheckService",
    "implementationName" : "android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.watchdog.IExplicitHealthCheckService: void cancel(java.lang.String)>",
        "implementationMethod" : "<android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper: void cancel(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.watchdog.IExplicitHealthCheckService: void getRequestedPackages(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper: void getRequestedPackages(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.watchdog.IExplicitHealthCheckService: void getSupportedPackages(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper: void getSupportedPackages(android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.watchdog.IExplicitHealthCheckService: void request(java.lang.String)>",
        "implementationMethod" : "<android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper: void request(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.service.watchdog.IExplicitHealthCheckService: void setCallback(android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.watchdog.ExplicitHealthCheckService$ExplicitHealthCheckServiceWrapper: void setCallback(android.os.RemoteCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.service.wearable.IWearableSensingService",
    "implementationName" : "android.service.wearable.WearableSensingService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.service.wearable.IWearableSensingService: void provideData(android.os.PersistableBundle,android.os.SharedMemory,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.wearable.WearableSensingService$1: void provideData(android.os.PersistableBundle,android.os.SharedMemory,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.wearable.IWearableSensingService: void provideDataStream(android.os.ParcelFileDescriptor,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.wearable.WearableSensingService$1: void provideDataStream(android.os.ParcelFileDescriptor,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.wearable.IWearableSensingService: void queryServiceStatus(int[],java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.wearable.WearableSensingService$1: void queryServiceStatus(int[],java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.wearable.IWearableSensingService: void startDetection(android.app.ambientcontext.AmbientContextEventRequest,java.lang.String,android.os.RemoteCallback,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.service.wearable.WearableSensingService$1: void startDetection(android.app.ambientcontext.AmbientContextEventRequest,java.lang.String,android.os.RemoteCallback,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.service.wearable.IWearableSensingService: void stopDetection(java.lang.String)>",
        "implementationMethod" : "<android.service.wearable.WearableSensingService$1: void stopDetection(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.speech.tts.ITextToSpeechSessionCallback",
    "implementationName" : "android.speech.tts.TextToSpeech$SystemConnection$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechSessionCallback: void onConnected(android.speech.tts.ITextToSpeechSession,android.os.IBinder)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$SystemConnection$1: void onConnected(android.speech.tts.ITextToSpeechSession,android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechSessionCallback: void onDisconnected()>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$SystemConnection$1: void onDisconnected()>"
      },
      {
        "interfaceMethod" : "<android.speech.tts.ITextToSpeechSessionCallback: void onError(java.lang.String)>",
        "implementationMethod" : "<android.speech.tts.TextToSpeech$SystemConnection$1: void onError(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IVideoProvider",
    "implementationName" : "android.telecom.Connection$VideoProvider$VideoProviderBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void addVideoCallback(android.os.IBinder)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void addVideoCallback(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void removeVideoCallback(android.os.IBinder)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void removeVideoCallback(android.os.IBinder)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void requestCallDataUsage()>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void requestCallDataUsage()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void requestCameraCapabilities()>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void requestCameraCapabilities()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void sendSessionModifyResponse(android.telecom.VideoProfile)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void sendSessionModifyResponse(android.telecom.VideoProfile)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setCamera(java.lang.String,java.lang.String,int)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setCamera(java.lang.String,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setDeviceOrientation(int)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setDeviceOrientation(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setDisplaySurface(android.view.Surface)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setDisplaySurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setPauseImage(android.net.Uri)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setPauseImage(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setPreviewSurface(android.view.Surface)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setPreviewSurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IVideoProvider: void setZoom(float)>",
        "implementationMethod" : "<android.telecom.Connection$VideoProvider$VideoProviderBinder: void setZoom(float)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.ICallDiagnosticService",
    "implementationName" : "android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void callQualityChanged(java.lang.String,android.telephony.CallQuality)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void callQualityChanged(java.lang.String,android.telephony.CallQuality)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void initializeDiagnosticCall(android.telecom.ParcelableCall)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void initializeDiagnosticCall(android.telecom.ParcelableCall)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void notifyCallDisconnected(java.lang.String,android.telecom.DisconnectCause)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void notifyCallDisconnected(java.lang.String,android.telecom.DisconnectCause)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void receiveBluetoothCallQualityReport(android.telecom.BluetoothCallQualityReport)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void receiveBluetoothCallQualityReport(android.telecom.BluetoothCallQualityReport)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void receiveDeviceToDeviceMessage(java.lang.String,int,int)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void receiveDeviceToDeviceMessage(java.lang.String,int,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void removeDiagnosticCall(java.lang.String)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void removeDiagnosticCall(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void setAdapter(com.android.internal.telecom.ICallDiagnosticServiceAdapter)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void setAdapter(com.android.internal.telecom.ICallDiagnosticServiceAdapter)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void updateCall(android.telecom.ParcelableCall)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void updateCall(android.telecom.ParcelableCall)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallDiagnosticService: void updateCallAudioState(android.telecom.CallAudioState)>",
        "implementationMethod" : "<android.telecom.CallDiagnosticService$CallDiagnosticServiceBinder: void updateCallAudioState(android.telecom.CallAudioState)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.ICallRedirectionService",
    "implementationName" : "android.telecom.CallRedirectionService$CallRedirectionBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallRedirectionService: void notifyTimeout()>",
        "implementationMethod" : "<android.telecom.CallRedirectionService$CallRedirectionBinder: void notifyTimeout()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallRedirectionService: void placeCall(com.android.internal.telecom.ICallRedirectionAdapter,android.net.Uri,android.telecom.PhoneAccountHandle,boolean)>",
        "implementationMethod" : "<android.telecom.CallRedirectionService$CallRedirectionBinder: void placeCall(com.android.internal.telecom.ICallRedirectionAdapter,android.net.Uri,android.telecom.PhoneAccountHandle,boolean)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.ICallScreeningService",
    "implementationName" : "android.telecom.CallScreeningService$CallScreeningBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallScreeningService: void screenCall(com.android.internal.telecom.ICallScreeningAdapter,android.telecom.ParcelableCall)>",
        "implementationMethod" : "<android.telecom.CallScreeningService$CallScreeningBinder: void screenCall(com.android.internal.telecom.ICallScreeningAdapter,android.telecom.ParcelableCall)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.ICallStreamingService",
    "implementationName" : "android.telecom.CallStreamingService$CallStreamingServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallStreamingService: void onCallStreamingStarted(android.telecom.StreamingCall)>",
        "implementationMethod" : "<android.telecom.CallStreamingService$CallStreamingServiceBinder: void onCallStreamingStarted(android.telecom.StreamingCall)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallStreamingService: void onCallStreamingStateChanged(int)>",
        "implementationMethod" : "<android.telecom.CallStreamingService$CallStreamingServiceBinder: void onCallStreamingStateChanged(int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallStreamingService: void onCallStreamingStopped()>",
        "implementationMethod" : "<android.telecom.CallStreamingService$CallStreamingServiceBinder: void onCallStreamingStopped()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.ICallStreamingService: void setStreamingCallAdapter(com.android.internal.telecom.IStreamingCallAdapter)>",
        "implementationMethod" : "<android.telecom.CallStreamingService$CallStreamingServiceBinder: void setStreamingCallAdapter(com.android.internal.telecom.IStreamingCallAdapter)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IConnectionServiceAdapter",
    "implementationName" : "android.telecom.ConnectionServiceAdapterServant$2",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void addConferenceCall(java.lang.String,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void addConferenceCall(java.lang.String,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void addExistingConnection(java.lang.String,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void addExistingConnection(java.lang.String,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void handleCreateConferenceComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void handleCreateConferenceComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConference,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void handleCreateConnectionComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void handleCreateConnectionComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConnection,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onConnectionServiceFocusReleased(android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onConnectionServiceFocusReleased(android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onPhoneAccountChanged(java.lang.String,android.telecom.PhoneAccountHandle,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onPhoneAccountChanged(java.lang.String,android.telecom.PhoneAccountHandle,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onPostDialChar(java.lang.String,char,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onPostDialChar(java.lang.String,char,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onPostDialWait(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onPostDialWait(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onRemoteRttRequest(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onRemoteRttRequest(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onRttInitiationFailure(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onRttInitiationFailure(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onRttInitiationSuccess(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onRttInitiationSuccess(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void onRttSessionRemotelyTerminated(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void onRttSessionRemotelyTerminated(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void putExtras(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void putExtras(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void queryLocation(java.lang.String,long,java.lang.String,android.os.ResultReceiver,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void queryLocation(java.lang.String,long,java.lang.String,android.os.ResultReceiver,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void queryRemoteConnectionServices(com.android.internal.telecom.RemoteServiceCallback,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void queryRemoteConnectionServices(com.android.internal.telecom.RemoteServiceCallback,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void removeCall(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void removeCall(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void removeExtras(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void removeExtras(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void requestCallEndpointChange(java.lang.String,android.telecom.CallEndpoint,android.os.ResultReceiver,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void requestCallEndpointChange(java.lang.String,android.telecom.CallEndpoint,android.os.ResultReceiver,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void resetConnectionTime(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void resetConnectionTime(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setActive(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setActive(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setAddress(java.lang.String,android.net.Uri,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setAddress(java.lang.String,android.net.Uri,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setAudioRoute(java.lang.String,int,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setAudioRoute(java.lang.String,int,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setCallDirection(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setCallDirection(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setCallerDisplayName(java.lang.String,java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setCallerDisplayName(java.lang.String,java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setConferenceMergeFailed(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setConferenceMergeFailed(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setConferenceState(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setConferenceState(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setConferenceableConnections(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setConferenceableConnections(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setConnectionCapabilities(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setConnectionCapabilities(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setConnectionProperties(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setConnectionProperties(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setDialing(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setDialing(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setDisconnected(java.lang.String,android.telecom.DisconnectCause,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setDisconnected(java.lang.String,android.telecom.DisconnectCause,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setIsConferenced(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setIsConferenced(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setIsVoipAudioMode(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setIsVoipAudioMode(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setOnHold(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setOnHold(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setPulling(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setPulling(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setRingbackRequested(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setRingbackRequested(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setRinging(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setRinging(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setStatusHints(java.lang.String,android.telecom.StatusHints,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setStatusHints(java.lang.String,android.telecom.StatusHints,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setVideoProvider(java.lang.String,com.android.internal.telecom.IVideoProvider,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setVideoProvider(java.lang.String,com.android.internal.telecom.IVideoProvider,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionServiceAdapter: void setVideoState(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionServiceAdapterServant$2: void setVideoState(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.RemoteServiceCallback",
    "implementationName" : "android.telecom.ConnectionService$5",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.RemoteServiceCallback: void onError()>",
        "implementationMethod" : "<android.telecom.ConnectionService$5: void onError()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.RemoteServiceCallback: void onResult(java.util.List,java.util.List)>",
        "implementationMethod" : "<android.telecom.ConnectionService$5: void onResult(java.util.List,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IConnectionService",
    "implementationName" : "android.telecom.ConnectionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void abort(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void abort(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void addConferenceParticipants(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void addConferenceParticipants(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void addConnectionServiceAdapter(com.android.internal.telecom.IConnectionServiceAdapter,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void addConnectionServiceAdapter(com.android.internal.telecom.IConnectionServiceAdapter,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void answer(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void answer(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void answerVideo(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void answerVideo(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void conference(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void conference(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void connectionServiceFocusGained(android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void connectionServiceFocusGained(android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void connectionServiceFocusLost(android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void connectionServiceFocusLost(android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void consultativeTransfer(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void consultativeTransfer(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConference(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConference(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConferenceComplete(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConferenceComplete(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConferenceFailed(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConferenceFailed(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConnection(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConnection(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConnectionComplete(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConnectionComplete(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void createConnectionFailed(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void createConnectionFailed(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void deflect(java.lang.String,android.net.Uri,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void deflect(java.lang.String,android.net.Uri,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void disconnect(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void disconnect(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void handoverComplete(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void handoverComplete(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void handoverFailed(java.lang.String,android.telecom.ConnectionRequest,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void handoverFailed(java.lang.String,android.telecom.ConnectionRequest,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void hold(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void hold(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void mergeConference(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void mergeConference(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onAvailableCallEndpointsChanged(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onAvailableCallEndpointsChanged(java.lang.String,java.util.List,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onCallEndpointChanged(java.lang.String,android.telecom.CallEndpoint,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onCallEndpointChanged(java.lang.String,android.telecom.CallEndpoint,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onCallFilteringCompleted(java.lang.String,android.telecom.Connection$CallFilteringCompletionInfo,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onCallFilteringCompleted(java.lang.String,android.telecom.Connection$CallFilteringCompletionInfo,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onExtrasChanged(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onExtrasChanged(java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onMuteStateChanged(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onMuteStateChanged(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onPostDialContinue(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onPostDialContinue(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onTrackedByNonUiService(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onTrackedByNonUiService(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void onUsingAlternativeUi(java.lang.String,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void onUsingAlternativeUi(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void playDtmfTone(java.lang.String,char,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void playDtmfTone(java.lang.String,char,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void pullExternalCall(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void pullExternalCall(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void reject(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void reject(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void rejectWithMessage(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void rejectWithMessage(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void rejectWithReason(java.lang.String,int,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void rejectWithReason(java.lang.String,int,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void removeConnectionServiceAdapter(com.android.internal.telecom.IConnectionServiceAdapter,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void removeConnectionServiceAdapter(com.android.internal.telecom.IConnectionServiceAdapter,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void respondToRttUpgradeRequest(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void respondToRttUpgradeRequest(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void sendCallEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void sendCallEvent(java.lang.String,java.lang.String,android.os.Bundle,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void silence(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void silence(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void splitFromConference(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void splitFromConference(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void startRtt(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void startRtt(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void stopDtmfTone(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void stopDtmfTone(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void stopRtt(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void stopRtt(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void swapConference(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void swapConference(java.lang.String,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void transfer(java.lang.String,android.net.Uri,boolean,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void transfer(java.lang.String,android.net.Uri,boolean,android.telecom.Logging.Session$Info)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IConnectionService: void unhold(java.lang.String,android.telecom.Logging.Session$Info)>",
        "implementationMethod" : "<android.telecom.ConnectionService$1: void unhold(java.lang.String,android.telecom.Logging.Session$Info)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IInCallService",
    "implementationName" : "android.telecom.InCallService$InCallServiceBinder",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void addCall(android.telecom.ParcelableCall)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void addCall(android.telecom.ParcelableCall)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void bringToForeground(boolean)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void bringToForeground(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onAvailableCallEndpointsChanged(java.util.List)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onAvailableCallEndpointsChanged(java.util.List)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onCallAudioStateChanged(android.telecom.CallAudioState)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onCallAudioStateChanged(android.telecom.CallAudioState)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onCallEndpointChanged(android.telecom.CallEndpoint)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onCallEndpointChanged(android.telecom.CallEndpoint)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onCanAddCallChanged(boolean)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onCanAddCallChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onConnectionEvent(java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onHandoverComplete(java.lang.String)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onHandoverComplete(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onHandoverFailed(java.lang.String,int)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onHandoverFailed(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onMuteStateChanged(boolean)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onMuteStateChanged(boolean)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onRttInitiationFailure(java.lang.String,int)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onRttInitiationFailure(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void onRttUpgradeRequest(java.lang.String,int)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void onRttUpgradeRequest(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void setInCallAdapter(com.android.internal.telecom.IInCallAdapter)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void setInCallAdapter(com.android.internal.telecom.IInCallAdapter)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void setPostDial(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void setPostDial(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void setPostDialWait(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void setPostDialWait(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void silenceRinger()>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void silenceRinger()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telecom.IInCallService: void updateCall(android.telecom.ParcelableCall)>",
        "implementationMethod" : "<android.telecom.InCallService$InCallServiceBinder: void updateCall(android.telecom.ParcelableCall)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telecom.IPhoneAccountSuggestionService",
    "implementationName" : "android.telecom.PhoneAccountSuggestionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telecom.IPhoneAccountSuggestionService: void onAccountSuggestionRequest(com.android.internal.telecom.IPhoneAccountSuggestionCallback,java.lang.String)>",
        "implementationMethod" : "<android.telecom.PhoneAccountSuggestionService$1: void onAccountSuggestionRequest(com.android.internal.telecom.IPhoneAccountSuggestionCallback,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ICellBroadcastService",
    "implementationName" : "android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ICellBroadcastService: java.lang.CharSequence getCellBroadcastAreaInfo(int)>",
        "implementationMethod" : "<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: java.lang.CharSequence getCellBroadcastAreaInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ICellBroadcastService: void handleCdmaCellBroadcastSms(int,byte[],int)>",
        "implementationMethod" : "<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: void handleCdmaCellBroadcastSms(int,byte[],int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ICellBroadcastService: void handleCdmaScpMessage(int,java.util.List,java.lang.String,android.os.RemoteCallback)>",
        "implementationMethod" : "<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: void handleCdmaScpMessage(int,java.util.List,java.lang.String,android.os.RemoteCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ICellBroadcastService: void handleGsmCellBroadcastSms(int,byte[])>",
        "implementationMethod" : "<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: void handleGsmCellBroadcastSms(int,byte[])>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IDomainSelector",
    "implementationName" : "android.telephony.DomainSelectionService$DomainSelectorWrapper$IDomainSelectorAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelector: void cancelSelection()>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$DomainSelectorWrapper$IDomainSelectorAdapter: void cancelSelection()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelector: void finishSelection()>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$DomainSelectorWrapper$IDomainSelectorAdapter: void finishSelection()>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelector: void reselectDomain(android.telephony.DomainSelectionService$SelectionAttributes)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$DomainSelectorWrapper$IDomainSelectorAdapter: void reselectDomain(android.telephony.DomainSelectionService$SelectionAttributes)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.ITransportSelectorResultCallback",
    "implementationName" : "android.telephony.DomainSelectionService$TransportSelectorCallbackWrapper$ITransportSelectorResultCallbackAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.ITransportSelectorResultCallback: void onCompleted(com.android.internal.telephony.IWwanSelectorCallback)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$TransportSelectorCallbackWrapper$ITransportSelectorResultCallbackAdapter: void onCompleted(com.android.internal.telephony.IWwanSelectorCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IDomainSelectionServiceController",
    "implementationName" : "android.telephony.DomainSelectionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelectionServiceController: void selectDomain(android.telephony.DomainSelectionService$SelectionAttributes,com.android.internal.telephony.ITransportSelectorCallback)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$1: void selectDomain(android.telephony.DomainSelectionService$SelectionAttributes,com.android.internal.telephony.ITransportSelectorCallback)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelectionServiceController: void updateBarringInfo(int,int,android.telephony.BarringInfo)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$1: void updateBarringInfo(int,int,android.telephony.BarringInfo)>"
      },
      {
        "interfaceMethod" : "<com.android.internal.telephony.IDomainSelectionServiceController: void updateServiceState(int,int,android.telephony.ServiceState)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$1: void updateServiceState(int,int,android.telephony.ServiceState)>"
      }
    ]
  },
  {
    "interfaceName" : "com.android.internal.telephony.IWwanSelectorResultCallback",
    "implementationName" : "android.telephony.DomainSelectionService$WwanSelectorCallbackWrapper$IWwanSelectorResultCallbackAdapter",
    "methods" : [
      {
        "interfaceMethod" : "<com.android.internal.telephony.IWwanSelectorResultCallback: void onComplete(android.telephony.EmergencyRegResult)>",
        "implementationMethod" : "<android.telephony.DomainSelectionService$WwanSelectorCallbackWrapper$IWwanSelectorResultCallbackAdapter: void onComplete(android.telephony.EmergencyRegResult)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.INetworkService",
    "implementationName" : "android.telephony.NetworkService$INetworkServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.INetworkService: void createNetworkServiceProvider(int)>",
        "implementationMethod" : "<android.telephony.NetworkService$INetworkServiceWrapper: void createNetworkServiceProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.INetworkService: void registerForNetworkRegistrationInfoChanged(int,android.telephony.INetworkServiceCallback)>",
        "implementationMethod" : "<android.telephony.NetworkService$INetworkServiceWrapper: void registerForNetworkRegistrationInfoChanged(int,android.telephony.INetworkServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.INetworkService: void removeNetworkServiceProvider(int)>",
        "implementationMethod" : "<android.telephony.NetworkService$INetworkServiceWrapper: void removeNetworkServiceProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.INetworkService: void requestNetworkRegistrationInfo(int,int,android.telephony.INetworkServiceCallback)>",
        "implementationMethod" : "<android.telephony.NetworkService$INetworkServiceWrapper: void requestNetworkRegistrationInfo(int,int,android.telephony.INetworkServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.INetworkService: void unregisterForNetworkRegistrationInfoChanged(int,android.telephony.INetworkServiceCallback)>",
        "implementationMethod" : "<android.telephony.NetworkService$INetworkServiceWrapper: void unregisterForNetworkRegistrationInfoChanged(int,android.telephony.INetworkServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IMbmsDownloadSessionCallback",
    "implementationName" : "android.telephony.mbms.InternalDownloadSessionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsDownloadSessionCallback: void onError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.InternalDownloadSessionCallback: void onError(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsDownloadSessionCallback: void onFileServicesUpdated(java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.InternalDownloadSessionCallback: void onFileServicesUpdated(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsDownloadSessionCallback: void onMiddlewareReady()>",
        "implementationMethod" : "<android.telephony.mbms.InternalDownloadSessionCallback: void onMiddlewareReady()>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.vendor.IMbmsGroupCallService",
    "implementationName" : "android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsGroupCallService: void dispose(int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: void dispose(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsGroupCallService: int initialize(android.telephony.mbms.IMbmsGroupCallSessionCallback,int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: int initialize(android.telephony.mbms.IMbmsGroupCallSessionCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsGroupCallService: int startGroupCall(int,long,java.util.List,java.util.List,android.telephony.mbms.IGroupCallCallback)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: int startGroupCall(int,long,java.util.List,java.util.List,android.telephony.mbms.IGroupCallCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsGroupCallService: void stopGroupCall(int,long)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: void stopGroupCall(int,long)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsGroupCallService: void updateGroupCall(int,long,java.util.List,java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: void updateGroupCall(int,long,java.util.List,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IMbmsGroupCallSessionCallback",
    "implementationName" : "android.telephony.mbms.InternalGroupCallSessionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsGroupCallSessionCallback: void onAvailableSaisUpdated(java.util.List,java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallSessionCallback: void onAvailableSaisUpdated(java.util.List,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsGroupCallSessionCallback: void onError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallSessionCallback: void onError(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsGroupCallSessionCallback: void onMiddlewareReady()>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallSessionCallback: void onMiddlewareReady()>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsGroupCallSessionCallback: void onServiceInterfaceAvailable(java.lang.String,int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallSessionCallback: void onServiceInterfaceAvailable(java.lang.String,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IGroupCallCallback",
    "implementationName" : "android.telephony.mbms.InternalGroupCallCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IGroupCallCallback: void onBroadcastSignalStrengthUpdated(int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallCallback: void onBroadcastSignalStrengthUpdated(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IGroupCallCallback: void onError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallCallback: void onError(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IGroupCallCallback: void onGroupCallStateChanged(int,int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalGroupCallCallback: void onGroupCallStateChanged(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.vendor.IMbmsStreamingService",
    "implementationName" : "android.telephony.mbms.vendor.MbmsStreamingServiceBase",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: void dispose(int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: void dispose(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: android.net.Uri getPlaybackUri(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: android.net.Uri getPlaybackUri(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: int initialize(android.telephony.mbms.IMbmsStreamingSessionCallback,int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int initialize(android.telephony.mbms.IMbmsStreamingSessionCallback,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: int requestUpdateStreamingServices(int,java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int requestUpdateStreamingServices(int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: int startStreaming(int,java.lang.String,android.telephony.mbms.IStreamingServiceCallback)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int startStreaming(int,java.lang.String,android.telephony.mbms.IStreamingServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsStreamingService: void stopStreaming(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsStreamingServiceBase: void stopStreaming(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IMbmsStreamingSessionCallback",
    "implementationName" : "android.telephony.mbms.InternalStreamingSessionCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsStreamingSessionCallback: void onError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingSessionCallback: void onError(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsStreamingSessionCallback: void onMiddlewareReady()>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingSessionCallback: void onMiddlewareReady()>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IMbmsStreamingSessionCallback: void onStreamingServicesUpdated(java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingSessionCallback: void onStreamingServicesUpdated(java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IStreamingServiceCallback",
    "implementationName" : "android.telephony.mbms.InternalStreamingServiceCallback",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IStreamingServiceCallback: void onBroadcastSignalStrengthUpdated(int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingServiceCallback: void onBroadcastSignalStrengthUpdated(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IStreamingServiceCallback: void onError(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingServiceCallback: void onError(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IStreamingServiceCallback: void onMediaDescriptionUpdated()>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingServiceCallback: void onMediaDescriptionUpdated()>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IStreamingServiceCallback: void onStreamMethodUpdated(int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingServiceCallback: void onStreamMethodUpdated(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.IStreamingServiceCallback: void onStreamStateUpdated(int,int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalStreamingServiceCallback: void onStreamStateUpdated(int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.data.IDataService",
    "implementationName" : "android.telephony.data.DataService$IDataServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void cancelHandover(int,int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void cancelHandover(int,int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void createDataServiceProvider(int)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void createDataServiceProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void deactivateDataCall(int,int,int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void deactivateDataCall(int,int,int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void registerForDataCallListChanged(int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void registerForDataCallListChanged(int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void registerForUnthrottleApn(int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void registerForUnthrottleApn(int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void removeDataServiceProvider(int)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void removeDataServiceProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void requestDataCallList(int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void requestDataCallList(int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void setDataProfile(int,java.util.List,boolean,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void setDataProfile(int,java.util.List,boolean,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void setInitialAttachApn(int,android.telephony.data.DataProfile,boolean,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void setInitialAttachApn(int,android.telephony.data.DataProfile,boolean,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void setupDataCall(int,int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,int,android.telephony.data.NetworkSliceInfo,android.telephony.data.TrafficDescriptor,boolean,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void setupDataCall(int,int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,int,android.telephony.data.NetworkSliceInfo,android.telephony.data.TrafficDescriptor,boolean,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void startHandover(int,int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void startHandover(int,int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void unregisterForDataCallListChanged(int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void unregisterForDataCallListChanged(int,android.telephony.data.IDataServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IDataService: void unregisterForUnthrottleApn(int,android.telephony.data.IDataServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.DataService$IDataServiceWrapper: void unregisterForUnthrottleApn(int,android.telephony.data.IDataServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.data.IQualifiedNetworksService",
    "implementationName" : "android.telephony.data.QualifiedNetworksService$IQualifiedNetworksServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.data.IQualifiedNetworksService: void createNetworkAvailabilityProvider(int,android.telephony.data.IQualifiedNetworksServiceCallback)>",
        "implementationMethod" : "<android.telephony.data.QualifiedNetworksService$IQualifiedNetworksServiceWrapper: void createNetworkAvailabilityProvider(int,android.telephony.data.IQualifiedNetworksServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IQualifiedNetworksService: void removeNetworkAvailabilityProvider(int)>",
        "implementationMethod" : "<android.telephony.data.QualifiedNetworksService$IQualifiedNetworksServiceWrapper: void removeNetworkAvailabilityProvider(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IQualifiedNetworksService: void reportEmergencyDataNetworkPreferredTransportChanged(int,int)>",
        "implementationMethod" : "<android.telephony.data.QualifiedNetworksService$IQualifiedNetworksServiceWrapper: void reportEmergencyDataNetworkPreferredTransportChanged(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.data.IQualifiedNetworksService: void reportThrottleStatusChanged(int,java.util.List)>",
        "implementationMethod" : "<android.telephony.data.QualifiedNetworksService$IQualifiedNetworksServiceWrapper: void reportThrottleStatusChanged(int,java.util.List)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.gba.IGbaService",
    "implementationName" : "android.telephony.gba.GbaService$IGbaServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.gba.IGbaService: void authenticationRequest(android.telephony.gba.GbaAuthRequest)>",
        "implementationMethod" : "<android.telephony.gba.GbaService$IGbaServiceWrapper: void authenticationRequest(android.telephony.gba.GbaAuthRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.ims.aidl.IImsServiceController",
    "implementationName" : "android.telephony.ims.ImsService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void addFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void addFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.IImsMmTelFeature createEmergencyOnlyMmTelFeature(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.IImsMmTelFeature createEmergencyOnlyMmTelFeature(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.IImsMmTelFeature createMmTelFeature(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.IImsMmTelFeature createMmTelFeature(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.IImsRcsFeature createRcsFeature(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.IImsRcsFeature createRcsFeature(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void disableIms(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void disableIms(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void enableIms(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void enableIms(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.IImsConfig getConfig(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.IImsConfig getConfig(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: long getImsServiceCapabilities()>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: long getImsServiceCapabilities()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.IImsRegistration getRegistration(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.IImsRegistration getRegistration(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.aidl.ISipTransport getSipTransport(int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.aidl.ISipTransport getSipTransport(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void notifyImsServiceReadyForFeatureCreation()>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void notifyImsServiceReadyForFeatureCreation()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: android.telephony.ims.stub.ImsFeatureConfiguration querySupportedImsFeatures()>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: android.telephony.ims.stub.ImsFeatureConfiguration querySupportedImsFeatures()>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void removeFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void removeFeatureStatusCallback(int,int,com.android.ims.internal.IImsFeatureStatusCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void removeImsFeature(int,int,boolean)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void removeImsFeature(int,int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void resetIms(int,int)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void resetIms(int,int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.ims.aidl.IImsServiceController: void setListener(android.telephony.ims.aidl.IImsServiceControllerListener)>",
        "implementationMethod" : "<android.telephony.ims.ImsService$1: void setListener(android.telephony.ims.aidl.IImsServiceControllerListener)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IDownloadProgressListener",
    "implementationName" : "android.telephony.mbms.InternalDownloadProgressListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IDownloadProgressListener: void onProgressUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int,int,int,int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalDownloadProgressListener: void onProgressUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int,int,int,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.IDownloadStatusListener",
    "implementationName" : "android.telephony.mbms.InternalDownloadStatusListener",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.IDownloadStatusListener: void onStatusUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int)>",
        "implementationMethod" : "<android.telephony.mbms.InternalDownloadStatusListener: void onStatusUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.mbms.vendor.IMbmsDownloadService",
    "implementationName" : "android.telephony.mbms.vendor.MbmsDownloadServiceBase",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int addProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadProgressListener)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadProgressListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int addServiceAnnouncement(int,byte[])>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addServiceAnnouncement(int,byte[])>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int addStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int cancelDownload(android.telephony.mbms.DownloadRequest)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int cancelDownload(android.telephony.mbms.DownloadRequest)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: void dispose(int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: void dispose(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int download(android.telephony.mbms.DownloadRequest)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int download(android.telephony.mbms.DownloadRequest)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int initialize(int,android.telephony.mbms.IMbmsDownloadSessionCallback)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int initialize(int,android.telephony.mbms.IMbmsDownloadSessionCallback)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: java.util.List listPendingDownloads(int)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: java.util.List listPendingDownloads(int)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int removeProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadProgressListener)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int removeProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadProgressListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int removeStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int removeStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int requestDownloadState(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int requestDownloadState(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int requestUpdateFileServices(int,java.util.List)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int requestUpdateFileServices(int,java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int resetDownloadKnowledge(android.telephony.mbms.DownloadRequest)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int resetDownloadKnowledge(android.telephony.mbms.DownloadRequest)>"
      },
      {
        "interfaceMethod" : "<android.telephony.mbms.vendor.IMbmsDownloadService: int setTempFileRootDirectory(int,java.lang.String)>",
        "implementationMethod" : "<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int setTempFileRootDirectory(int,java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.stub.ISatellite",
    "implementationName" : "android.telephony.satellite.stub.SatelliteImplBase$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void deprovisionSatelliteService(java.lang.String,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void deprovisionSatelliteService(java.lang.String,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void enableCellularModemWhileSatelliteModeIsOn(boolean,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void enableCellularModemWhileSatelliteModeIsOn(boolean,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void pollPendingSatelliteDatagrams(com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void pollPendingSatelliteDatagrams(com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void provisionSatelliteService(java.lang.String,byte[],com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void provisionSatelliteService(java.lang.String,byte[],com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteCommunicationAllowedForCurrentLocation(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestIsSatelliteCommunicationAllowedForCurrentLocation(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteEnabled(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestIsSatelliteEnabled(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteProvisioned(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestIsSatelliteProvisioned(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteSupported(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestIsSatelliteSupported(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestSatelliteCapabilities(com.android.internal.telephony.IIntegerConsumer,android.telephony.satellite.stub.ISatelliteCapabilitiesConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestSatelliteCapabilities(com.android.internal.telephony.IIntegerConsumer,android.telephony.satellite.stub.ISatelliteCapabilitiesConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestSatelliteEnabled(boolean,boolean,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestSatelliteEnabled(boolean,boolean,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestSatelliteListeningEnabled(boolean,int,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestSatelliteListeningEnabled(boolean,int,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestSatelliteModemState(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestSatelliteModemState(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void requestTimeForNextSatelliteVisibility(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void requestTimeForNextSatelliteVisibility(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void sendSatelliteDatagram(android.telephony.satellite.stub.SatelliteDatagram,boolean,com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void sendSatelliteDatagram(android.telephony.satellite.stub.SatelliteDatagram,boolean,com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void setSatelliteListener(android.telephony.satellite.stub.ISatelliteListener)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void setSatelliteListener(android.telephony.satellite.stub.ISatelliteListener)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void startSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void startSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>"
      },
      {
        "interfaceMethod" : "<android.telephony.satellite.stub.ISatellite: void stopSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>",
        "implementationMethod" : "<android.telephony.satellite.stub.SatelliteImplBase$1: void stopSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>"
      }
    ]
  },
  {
    "interfaceName" : "android.telephony.satellite.stub.ISatelliteGateway",
    "implementationName" : "android.telephony.satellite.stub.SatelliteGatewayService$1",
    "methods" : [ ]
  },
  {
    "interfaceName" : "android.hardware.location.IActivityRecognitionHardware",
    "implementationName" : "android.hardware.location.ActivityRecognitionHardware",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean disableActivityEvent(java.lang.String,int)>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean disableActivityEvent(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean enableActivityEvent(java.lang.String,int,long)>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean enableActivityEvent(java.lang.String,int,long)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean flush()>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean flush()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: java.lang.String[] getSupportedActivities()>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] getSupportedActivities()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean isActivitySupported(java.lang.String)>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean isActivitySupported(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean registerSink(android.hardware.location.IActivityRecognitionHardwareSink)>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean registerSink(android.hardware.location.IActivityRecognitionHardwareSink)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IActivityRecognitionHardware: boolean unregisterSink(android.hardware.location.IActivityRecognitionHardwareSink)>",
        "implementationMethod" : "<android.hardware.location.ActivityRecognitionHardware: boolean unregisterSink(android.hardware.location.IActivityRecognitionHardwareSink)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IGeofenceHardwareCallback",
    "implementationName" : "android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareCallback: void onGeofenceAdd(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceAdd(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareCallback: void onGeofencePause(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofencePause(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareCallback: void onGeofenceRemove(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceRemove(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareCallback: void onGeofenceResume(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceResume(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareCallback: void onGeofenceTransition(int,int,android.location.Location,long,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareCallbackWrapper: void onGeofenceTransition(int,int,android.location.Location,long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IGeofenceHardware",
    "implementationName" : "android.hardware.location.GeofenceHardwareService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean addCircularFence(int,android.hardware.location.GeofenceHardwareRequestParcelable,android.hardware.location.IGeofenceHardwareCallback)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean addCircularFence(int,android.hardware.location.GeofenceHardwareRequestParcelable,android.hardware.location.IGeofenceHardwareCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: int[] getMonitoringTypes()>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: int[] getMonitoringTypes()>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: int getStatusOfMonitoringType(int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: int getStatusOfMonitoringType(int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean pauseGeofence(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean pauseGeofence(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean removeGeofence(int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean removeGeofence(int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean resumeGeofence(int,int,int)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean resumeGeofence(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: void setFusedGeofenceHardware(android.location.IFusedGeofenceHardware)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: void setFusedGeofenceHardware(android.location.IFusedGeofenceHardware)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: void setGpsGeofenceHardware(android.location.IGpsGeofenceHardware)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: void setGpsGeofenceHardware(android.location.IGpsGeofenceHardware)>"
      },
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardwareService$1: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.hardware.location.IGeofenceHardwareMonitorCallback",
    "implementationName" : "android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.hardware.location.IGeofenceHardwareMonitorCallback: void onMonitoringSystemChange(android.hardware.location.GeofenceHardwareMonitorEvent)>",
        "implementationMethod" : "<android.hardware.location.GeofenceHardware$GeofenceHardwareMonitorCallbackWrapper: void onMonitoringSystemChange(android.hardware.location.GeofenceHardwareMonitorEvent)>"
      }
    ]
  },
  {
    "interfaceName" : "android.location.provider.ILocationProvider",
    "implementationName" : "android.location.provider.LocationProviderBase$Service",
    "methods" : [
      {
        "interfaceMethod" : "<android.location.provider.ILocationProvider: void flush()>",
        "implementationMethod" : "<android.location.provider.LocationProviderBase$Service: void flush()>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProvider: void sendExtraCommand(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.location.provider.LocationProviderBase$Service: void sendExtraCommand(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProvider: void setLocationProviderManager(android.location.provider.ILocationProviderManager)>",
        "implementationMethod" : "<android.location.provider.LocationProviderBase$Service: void setLocationProviderManager(android.location.provider.ILocationProviderManager)>"
      },
      {
        "interfaceMethod" : "<android.location.provider.ILocationProvider: void setRequest(android.location.provider.ProviderRequest)>",
        "implementationMethod" : "<android.location.provider.LocationProviderBase$Service: void setRequest(android.location.provider.ProviderRequest)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaHTTPConnection",
    "implementationName" : "android.media.MediaHTTPConnection",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: android.os.IBinder connect(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: android.os.IBinder connect(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: void disconnect()>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: void disconnect()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: java.lang.String getMIMEType()>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: java.lang.String getMIMEType()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: long getSize()>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: long getSize()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: java.lang.String getUri()>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: java.lang.String getUri()>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaHTTPConnection: int readAt(long,int)>",
        "implementationMethod" : "<android.media.MediaHTTPConnection: int readAt(long,int)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaHTTPService",
    "implementationName" : "android.media.MediaHTTPService",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaHTTPService: android.media.IMediaHTTPConnection makeHTTPConnection()>",
        "implementationMethod" : "<android.media.MediaHTTPService: android.media.IMediaHTTPConnection makeHTTPConnection()>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaRoute2ProviderService",
    "implementationName" : "android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void deselectRoute(long,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void deselectRoute(long,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void releaseSession(long,java.lang.String)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void releaseSession(long,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void requestCreateSession(long,java.lang.String,java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void requestCreateSession(long,java.lang.String,java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void selectRoute(long,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void selectRoute(long,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void setCallback(android.media.IMediaRoute2ProviderServiceCallback)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void setCallback(android.media.IMediaRoute2ProviderServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void setRouteVolume(long,java.lang.String,int)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void setRouteVolume(long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void setSessionVolume(long,java.lang.String,int)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void setSessionVolume(long,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void transferToRoute(long,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void transferToRoute(long,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.IMediaRoute2ProviderService: void updateDiscoveryPreference(android.media.RouteDiscoveryPreference)>",
        "implementationMethod" : "<android.media.MediaRoute2ProviderService$MediaRoute2ProviderServiceStub: void updateDiscoveryPreference(android.media.RouteDiscoveryPreference)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.IMediaScannerListener",
    "implementationName" : "android.media.MediaScannerConnection$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.IMediaScannerListener: void scanCompleted(java.lang.String,android.net.Uri)>",
        "implementationMethod" : "<android.media.MediaScannerConnection$1: void scanCompleted(java.lang.String,android.net.Uri)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.musicrecognition.IMusicRecognitionManagerCallback",
    "implementationName" : "android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionManagerCallback: void onAudioStreamClosed()>",
        "implementationMethod" : "<android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper: void onAudioStreamClosed()>"
      },
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionManagerCallback: void onRecognitionFailed(int)>",
        "implementationMethod" : "<android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper: void onRecognitionFailed(int)>"
      },
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionManagerCallback: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>",
        "implementationMethod" : "<android.media.musicrecognition.MusicRecognitionManager$MusicRecognitionCallbackWrapper: void onRecognitionSucceeded(android.media.MediaMetadata,android.os.Bundle)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.musicrecognition.IMusicRecognitionService",
    "implementationName" : "android.media.musicrecognition.MusicRecognitionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionService: void getAttributionTag(android.media.musicrecognition.IMusicRecognitionAttributionTagCallback)>",
        "implementationMethod" : "<android.media.musicrecognition.MusicRecognitionService$1: void getAttributionTag(android.media.musicrecognition.IMusicRecognitionAttributionTagCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.musicrecognition.IMusicRecognitionService: void onAudioStreamStarted(android.os.ParcelFileDescriptor,android.media.AudioFormat,android.media.musicrecognition.IMusicRecognitionServiceCallback)>",
        "implementationMethod" : "<android.media.musicrecognition.MusicRecognitionService$1: void onAudioStreamStarted(android.os.ParcelFileDescriptor,android.media.AudioFormat,android.media.musicrecognition.IMusicRecognitionServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.soundtrigger.ISoundTriggerDetectionService",
    "implementationName" : "android.media.soundtrigger.SoundTriggerDetectionService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionService: void onError(android.os.ParcelUuid,int,int)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetectionService$1: void onError(android.os.ParcelUuid,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionService: void onGenericRecognitionEvent(android.os.ParcelUuid,int,android.hardware.soundtrigger.SoundTrigger$GenericRecognitionEvent)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetectionService$1: void onGenericRecognitionEvent(android.os.ParcelUuid,int,android.hardware.soundtrigger.SoundTrigger$GenericRecognitionEvent)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionService: void onStopOperation(android.os.ParcelUuid,int)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetectionService$1: void onStopOperation(android.os.ParcelUuid,int)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionService: void removeClient(android.os.ParcelUuid)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetectionService$1: void removeClient(android.os.ParcelUuid)>"
      },
      {
        "interfaceMethod" : "<android.media.soundtrigger.ISoundTriggerDetectionService: void setClient(android.os.ParcelUuid,android.os.Bundle,android.media.soundtrigger.ISoundTriggerDetectionServiceClient)>",
        "implementationMethod" : "<android.media.soundtrigger.SoundTriggerDetectionService$1: void setClient(android.os.ParcelUuid,android.os.Bundle,android.media.soundtrigger.ISoundTriggerDetectionServiceClient)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputService",
    "implementationName" : "android.media.tv.TvInputService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void createRecordingSession(android.media.tv.ITvInputSessionCallback,java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void createRecordingSession(android.media.tv.ITvInputSessionCallback,java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void createSession(android.view.InputChannel,android.media.tv.ITvInputSessionCallback,java.lang.String,java.lang.String,android.content.AttributionSource)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void createSession(android.view.InputChannel,android.media.tv.ITvInputSessionCallback,java.lang.String,java.lang.String,android.content.AttributionSource)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: java.util.List getAvailableExtensionInterfaceNames()>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: java.util.List getAvailableExtensionInterfaceNames()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: android.os.IBinder getExtensionInterface(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: android.os.IBinder getExtensionInterface(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: java.lang.String getExtensionInterfacePermission(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: java.lang.String getExtensionInterfacePermission(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void notifyHardwareAdded(android.media.tv.TvInputHardwareInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void notifyHardwareAdded(android.media.tv.TvInputHardwareInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void notifyHardwareRemoved(android.media.tv.TvInputHardwareInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void notifyHardwareRemoved(android.media.tv.TvInputHardwareInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void notifyHdmiDeviceAdded(android.hardware.hdmi.HdmiDeviceInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void notifyHdmiDeviceAdded(android.hardware.hdmi.HdmiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void notifyHdmiDeviceRemoved(android.hardware.hdmi.HdmiDeviceInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void notifyHdmiDeviceRemoved(android.hardware.hdmi.HdmiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void notifyHdmiDeviceUpdated(android.hardware.hdmi.HdmiDeviceInfo)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void notifyHdmiDeviceUpdated(android.hardware.hdmi.HdmiDeviceInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void registerCallback(android.media.tv.ITvInputServiceCallback)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void registerCallback(android.media.tv.ITvInputServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputService: void unregisterCallback(android.media.tv.ITvInputServiceCallback)>",
        "implementationMethod" : "<android.media.tv.TvInputService$1: void unregisterCallback(android.media.tv.ITvInputServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.ITvInputSession",
    "implementationName" : "android.media.tv.ITvInputSessionWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void appPrivateCommand(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void appPrivateCommand(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void createOverlayView(android.os.IBinder,android.graphics.Rect)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void createOverlayView(android.os.IBinder,android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void dispatchSurfaceChanged(int,int,int)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void dispatchSurfaceChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void notifyAdBufferReady(android.media.tv.AdBuffer)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void notifyAdBufferReady(android.media.tv.AdBuffer)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void notifyTvMessage(int,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void notifyTvMessage(int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void pauseRecording(android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void pauseRecording(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void relayoutOverlayView(android.graphics.Rect)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void relayoutOverlayView(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void release()>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void release()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void removeBroadcastInfo(int)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void removeBroadcastInfo(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void removeOverlayView()>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void removeOverlayView()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void requestAd(android.media.tv.AdRequest)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void requestAd(android.media.tv.AdRequest)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void requestBroadcastInfo(android.media.tv.BroadcastInfoRequest)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void requestBroadcastInfo(android.media.tv.BroadcastInfoRequest)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void resumeRecording(android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void resumeRecording(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void selectAudioPresentation(int,int)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void selectAudioPresentation(int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void selectTrack(int,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void selectTrack(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setCaptionEnabled(boolean)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setCaptionEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setInteractiveAppNotificationEnabled(boolean)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setInteractiveAppNotificationEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setMain(boolean)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setMain(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setSurface(android.view.Surface)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setSurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setTvMessageEnabled(int,boolean)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setTvMessageEnabled(int,boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void setVolume(float)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void setVolume(float)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void startRecording(android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void startRecording(android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void stopRecording()>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void stopRecording()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftEnablePositionTracking(boolean)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftEnablePositionTracking(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftPause()>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftPause()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftPlay(android.net.Uri)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftPlay(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftResume()>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftResume()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftSeekTo(long)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftSeekTo(long)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftSetMode(int)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftSetMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void timeShiftSetPlaybackParams(android.media.PlaybackParams)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void timeShiftSetPlaybackParams(android.media.PlaybackParams)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void tune(android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void tune(android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.ITvInputSession: void unblockContent(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.ITvInputSessionWrapper: void unblockContent(java.lang.String)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppService",
    "implementationName" : "android.media.tv.interactive.TvInteractiveAppService$1",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void createSession(android.view.InputChannel,android.media.tv.interactive.ITvInteractiveAppSessionCallback,java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void createSession(android.view.InputChannel,android.media.tv.interactive.ITvInteractiveAppSessionCallback,java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void registerAppLinkInfo(android.media.tv.interactive.AppLinkInfo)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void registerAppLinkInfo(android.media.tv.interactive.AppLinkInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void registerCallback(android.media.tv.interactive.ITvInteractiveAppServiceCallback)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void registerCallback(android.media.tv.interactive.ITvInteractiveAppServiceCallback)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void sendAppLinkCommand(android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void sendAppLinkCommand(android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void unregisterAppLinkInfo(android.media.tv.interactive.AppLinkInfo)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void unregisterAppLinkInfo(android.media.tv.interactive.AppLinkInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppService: void unregisterCallback(android.media.tv.interactive.ITvInteractiveAppServiceCallback)>",
        "implementationMethod" : "<android.media.tv.interactive.TvInteractiveAppService$1: void unregisterCallback(android.media.tv.interactive.ITvInteractiveAppServiceCallback)>"
      }
    ]
  },
  {
    "interfaceName" : "android.media.tv.interactive.ITvInteractiveAppSession",
    "implementationName" : "android.media.tv.interactive.ITvInteractiveAppSessionWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void createBiInteractiveApp(android.net.Uri,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void createBiInteractiveApp(android.net.Uri,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void createMediaView(android.os.IBinder,android.graphics.Rect)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void createMediaView(android.os.IBinder,android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void destroyBiInteractiveApp(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void destroyBiInteractiveApp(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void dispatchSurfaceChanged(int,int,int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void dispatchSurfaceChanged(int,int,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyAdBufferConsumed(android.media.tv.AdBuffer)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyAdBufferConsumed(android.media.tv.AdBuffer)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyAdResponse(android.media.tv.AdResponse)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyAdResponse(android.media.tv.AdResponse)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyContentAllowed()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyContentAllowed()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyContentBlocked(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyContentBlocked(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyError(java.lang.String,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyError(java.lang.String,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingConnectionFailed(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingConnectionFailed(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingDisconnected(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingDisconnected(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingError(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingError(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingScheduled(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingScheduled(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingStarted(java.lang.String,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingStarted(java.lang.String,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingStopped(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingStopped(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyRecordingTuned(java.lang.String,android.net.Uri)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyRecordingTuned(java.lang.String,android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifySignalStrength(int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifySignalStrength(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTimeShiftCurrentPositionChanged(java.lang.String,long)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTimeShiftCurrentPositionChanged(java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTimeShiftPlaybackParams(android.media.PlaybackParams)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTimeShiftPlaybackParams(android.media.PlaybackParams)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTimeShiftStartPositionChanged(java.lang.String,long)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTimeShiftStartPositionChanged(java.lang.String,long)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTimeShiftStatusChanged(java.lang.String,int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTimeShiftStatusChanged(java.lang.String,int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTrackSelected(int,java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTrackSelected(int,java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTracksChanged(java.util.List)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTracksChanged(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTuned(android.net.Uri)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTuned(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyTvMessage(int,android.os.Bundle)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyTvMessage(int,android.os.Bundle)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyVideoAvailable()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyVideoAvailable()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void notifyVideoUnavailable(int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void notifyVideoUnavailable(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void relayoutMediaView(android.graphics.Rect)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void relayoutMediaView(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void release()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void release()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void removeMediaView()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void removeMediaView()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void resetInteractiveApp()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void resetInteractiveApp()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendAvailableSpeeds(float[])>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendAvailableSpeeds(float[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendCurrentChannelLcn(int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendCurrentChannelLcn(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendCurrentChannelUri(android.net.Uri)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendCurrentChannelUri(android.net.Uri)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendCurrentTvInputId(java.lang.String)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendCurrentTvInputId(java.lang.String)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendCurrentVideoBounds(android.graphics.Rect)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendCurrentVideoBounds(android.graphics.Rect)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendSigningResult(java.lang.String,byte[])>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendSigningResult(java.lang.String,byte[])>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendStreamVolume(float)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendStreamVolume(float)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendTimeShiftMode(int)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendTimeShiftMode(int)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendTrackInfoList(java.util.List)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendTrackInfoList(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendTvRecordingInfo(android.media.tv.TvRecordingInfo)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendTvRecordingInfo(android.media.tv.TvRecordingInfo)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void sendTvRecordingInfoList(java.util.List)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void sendTvRecordingInfoList(java.util.List)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void setSurface(android.view.Surface)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void setSurface(android.view.Surface)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void setTeletextAppEnabled(boolean)>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void setTeletextAppEnabled(boolean)>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void startInteractiveApp()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void startInteractiveApp()>"
      },
      {
        "interfaceMethod" : "<android.media.tv.interactive.ITvInteractiveAppSession: void stopInteractiveApp()>",
        "implementationMethod" : "<android.media.tv.interactive.ITvInteractiveAppSessionWrapper: void stopInteractiveApp()>"
      }
    ]
  },
  {
    "interfaceName" : "android.net.INetworkRecommendationProvider",
    "implementationName" : "android.net.NetworkRecommendationProvider$ServiceWrapper",
    "methods" : [
      {
        "interfaceMethod" : "<android.net.INetworkRecommendationProvider: void requestScores(android.net.NetworkKey[])>",
        "implementationMethod" : "<android.net.NetworkRecommendationProvider$ServiceWrapper: void requestScores(android.net.NetworkKey[])>"
      }
    ]
  }
]